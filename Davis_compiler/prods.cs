/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  comp5210.analysis;

namespace comp5210.node {

public abstract class PProgram : Node
{
}

public abstract class PStatements : Node
{
}

public abstract class PStatement : Node
{
}

public abstract class PIfState : Node
{
}

public abstract class PWhileState : Node
{
}

public abstract class PMethodsCall : Node
{
}

public abstract class PActualParams : Node
{
}

public abstract class PActualConsts : Node
{
}

public abstract class PMethDecs : Node
{
}

public abstract class PMethodsDecl : Node
{
}

public abstract class PFormalParams : Node
{
}

public abstract class PFormalConsts : Node
{
}

public abstract class PExpressLogic : Node
{
}

public abstract class PExpressComp : Node
{
}

public abstract class PExpressAs : Node
{
}

public abstract class PExpressMd : Node
{
}

public abstract class PExpressParent : Node
{
}

public abstract class PExpressConsts : Node
{
}

public abstract class PDeclarations : Node
{
}

public abstract class PDeclaration : Node
{
}

public abstract class PDeclOptions : Node
{
}

public abstract class PConstantine : Node
{
}

public abstract class PNumConsts : Node
{
}

public abstract class PAssign : Node
{
}


public sealed class AProgram : PProgram
{
    private PDeclarations _declarations_;
    private PMethDecs _meth_decs_;

    public AProgram ()
    {
    }

    public AProgram (
            PDeclarations _declarations_,
            PMethDecs _meth_decs_
    )
    {
        SetDeclarations (_declarations_);
        SetMethDecs (_meth_decs_);
    }

    public override Object Clone()
    {
        return new AProgram (
            (PDeclarations)CloneNode (_declarations_),
            (PMethDecs)CloneNode (_meth_decs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgram(this);
    }

    public PDeclarations GetDeclarations ()
    {
        return _declarations_;
    }

    public void SetDeclarations (PDeclarations node)
    {
        if(_declarations_ != null)
        {
            _declarations_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declarations_ = node;
    }
    public PMethDecs GetMethDecs ()
    {
        return _meth_decs_;
    }

    public void SetMethDecs (PMethDecs node)
    {
        if(_meth_decs_ != null)
        {
            _meth_decs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _meth_decs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declarations_)
            + ToString (_meth_decs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declarations_ == child )
        {
            _declarations_ = null;
            return;
        }
        if ( _meth_decs_ == child )
        {
            _meth_decs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declarations_ == oldChild )
        {
            SetDeclarations ((PDeclarations) newChild);
            return;
        }
        if ( _meth_decs_ == oldChild )
        {
            SetMethDecs ((PMethDecs) newChild);
            return;
        }
    }

}
public sealed class ARecursStatements : PStatements
{
    private PStatements _statements_;
    private PStatement _statement_;

    public ARecursStatements ()
    {
    }

    public ARecursStatements (
            PStatements _statements_,
            PStatement _statement_
    )
    {
        SetStatements (_statements_);
        SetStatement (_statement_);
    }

    public override Object Clone()
    {
        return new ARecursStatements (
            (PStatements)CloneNode (_statements_),
            (PStatement)CloneNode (_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARecursStatements(this);
    }

    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statements_)
            + ToString (_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
    }

}
public sealed class AOneStatements : PStatements
{
    private PStatement _statement_;

    public AOneStatements ()
    {
    }

    public AOneStatements (
            PStatement _statement_
    )
    {
        SetStatement (_statement_);
    }

    public override Object Clone()
    {
        return new AOneStatements (
            (PStatement)CloneNode (_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneStatements(this);
    }

    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
    }

}
public sealed class AIfsStatement : PStatement
{
    private PIfState _if_state_;

    public AIfsStatement ()
    {
    }

    public AIfsStatement (
            PIfState _if_state_
    )
    {
        SetIfState (_if_state_);
    }

    public override Object Clone()
    {
        return new AIfsStatement (
            (PIfState)CloneNode (_if_state_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfsStatement(this);
    }

    public PIfState GetIfState ()
    {
        return _if_state_;
    }

    public void SetIfState (PIfState node)
    {
        if(_if_state_ != null)
        {
            _if_state_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_state_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_state_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_state_ == child )
        {
            _if_state_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_state_ == oldChild )
        {
            SetIfState ((PIfState) newChild);
            return;
        }
    }

}
public sealed class AMethStatement : PStatement
{
    private PMethodsCall _methods_call_;

    public AMethStatement ()
    {
    }

    public AMethStatement (
            PMethodsCall _methods_call_
    )
    {
        SetMethodsCall (_methods_call_);
    }

    public override Object Clone()
    {
        return new AMethStatement (
            (PMethodsCall)CloneNode (_methods_call_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMethStatement(this);
    }

    public PMethodsCall GetMethodsCall ()
    {
        return _methods_call_;
    }

    public void SetMethodsCall (PMethodsCall node)
    {
        if(_methods_call_ != null)
        {
            _methods_call_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _methods_call_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_methods_call_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _methods_call_ == child )
        {
            _methods_call_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _methods_call_ == oldChild )
        {
            SetMethodsCall ((PMethodsCall) newChild);
            return;
        }
    }

}
public sealed class AWhilesStatement : PStatement
{
    private PWhileState _while_state_;

    public AWhilesStatement ()
    {
    }

    public AWhilesStatement (
            PWhileState _while_state_
    )
    {
        SetWhileState (_while_state_);
    }

    public override Object Clone()
    {
        return new AWhilesStatement (
            (PWhileState)CloneNode (_while_state_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhilesStatement(this);
    }

    public PWhileState GetWhileState ()
    {
        return _while_state_;
    }

    public void SetWhileState (PWhileState node)
    {
        if(_while_state_ != null)
        {
            _while_state_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_state_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_state_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_state_ == child )
        {
            _while_state_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_state_ == oldChild )
        {
            SetWhileState ((PWhileState) newChild);
            return;
        }
    }

}
public sealed class ADeclStatement : PStatement
{
    private PDeclaration _declaration_;

    public ADeclStatement ()
    {
    }

    public ADeclStatement (
            PDeclaration _declaration_
    )
    {
        SetDeclaration (_declaration_);
    }

    public override Object Clone()
    {
        return new ADeclStatement (
            (PDeclaration)CloneNode (_declaration_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclStatement(this);
    }

    public PDeclaration GetDeclaration ()
    {
        return _declaration_;
    }

    public void SetDeclaration (PDeclaration node)
    {
        if(_declaration_ != null)
        {
            _declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declaration_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declaration_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declaration_ == child )
        {
            _declaration_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declaration_ == oldChild )
        {
            SetDeclaration ((PDeclaration) newChild);
            return;
        }
    }

}
public sealed class AAssStatement : PStatement
{
    private PAssign _assign_;

    public AAssStatement ()
    {
    }

    public AAssStatement (
            PAssign _assign_
    )
    {
        SetAssign (_assign_);
    }

    public override Object Clone()
    {
        return new AAssStatement (
            (PAssign)CloneNode (_assign_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssStatement(this);
    }

    public PAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (PAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assign_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assign_ == oldChild )
        {
            SetAssign ((PAssign) newChild);
            return;
        }
    }

}
public sealed class AIfsIfState : PIfState
{
    private TIf _if_;
    private TLeftParent _left_parent_;
    private PExpressLogic _express_logic_;
    private TRightParent _right_parent_;
    private TLeftCurly _left_curly_;
    private PStatements _statements_;
    private TRightCurly _right_curly_;

    public AIfsIfState ()
    {
    }

    public AIfsIfState (
            TIf _if_,
            TLeftParent _left_parent_,
            PExpressLogic _express_logic_,
            TRightParent _right_parent_,
            TLeftCurly _left_curly_,
            PStatements _statements_,
            TRightCurly _right_curly_
    )
    {
        SetIf (_if_);
        SetLeftParent (_left_parent_);
        SetExpressLogic (_express_logic_);
        SetRightParent (_right_parent_);
        SetLeftCurly (_left_curly_);
        SetStatements (_statements_);
        SetRightCurly (_right_curly_);
    }

    public override Object Clone()
    {
        return new AIfsIfState (
            (TIf)CloneNode (_if_),
            (TLeftParent)CloneNode (_left_parent_),
            (PExpressLogic)CloneNode (_express_logic_),
            (TRightParent)CloneNode (_right_parent_),
            (TLeftCurly)CloneNode (_left_curly_),
            (PStatements)CloneNode (_statements_),
            (TRightCurly)CloneNode (_right_curly_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfsIfState(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TLeftParent GetLeftParent ()
    {
        return _left_parent_;
    }

    public void SetLeftParent (TLeftParent node)
    {
        if(_left_parent_ != null)
        {
            _left_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parent_ = node;
    }
    public PExpressLogic GetExpressLogic ()
    {
        return _express_logic_;
    }

    public void SetExpressLogic (PExpressLogic node)
    {
        if(_express_logic_ != null)
        {
            _express_logic_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _express_logic_ = node;
    }
    public TRightParent GetRightParent ()
    {
        return _right_parent_;
    }

    public void SetRightParent (TRightParent node)
    {
        if(_right_parent_ != null)
        {
            _right_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parent_ = node;
    }
    public TLeftCurly GetLeftCurly ()
    {
        return _left_curly_;
    }

    public void SetLeftCurly (TLeftCurly node)
    {
        if(_left_curly_ != null)
        {
            _left_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_curly_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRightCurly GetRightCurly ()
    {
        return _right_curly_;
    }

    public void SetRightCurly (TRightCurly node)
    {
        if(_right_curly_ != null)
        {
            _right_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_curly_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_left_parent_)
            + ToString (_express_logic_)
            + ToString (_right_parent_)
            + ToString (_left_curly_)
            + ToString (_statements_)
            + ToString (_right_curly_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _left_parent_ == child )
        {
            _left_parent_ = null;
            return;
        }
        if ( _express_logic_ == child )
        {
            _express_logic_ = null;
            return;
        }
        if ( _right_parent_ == child )
        {
            _right_parent_ = null;
            return;
        }
        if ( _left_curly_ == child )
        {
            _left_curly_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _right_curly_ == child )
        {
            _right_curly_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _left_parent_ == oldChild )
        {
            SetLeftParent ((TLeftParent) newChild);
            return;
        }
        if ( _express_logic_ == oldChild )
        {
            SetExpressLogic ((PExpressLogic) newChild);
            return;
        }
        if ( _right_parent_ == oldChild )
        {
            SetRightParent ((TRightParent) newChild);
            return;
        }
        if ( _left_curly_ == oldChild )
        {
            SetLeftCurly ((TLeftCurly) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _right_curly_ == oldChild )
        {
            SetRightCurly ((TRightCurly) newChild);
            return;
        }
    }

}
public sealed class AElsesIfState : PIfState
{
    private TIf _if_;
    private TLeftParent _left_parent_;
    private PExpressLogic _express_logic_;
    private TRightParent _right_parent_;
    private TLeftCurly _lcurl1_;
    private PStatements _ifstates_;
    private TRightCurly _rcurl1_;
    private TElse _else_;
    private TLeftCurly _lcurl2_;
    private PStatements _elsestates_;
    private TRightCurly _rculr2_;

    public AElsesIfState ()
    {
    }

    public AElsesIfState (
            TIf _if_,
            TLeftParent _left_parent_,
            PExpressLogic _express_logic_,
            TRightParent _right_parent_,
            TLeftCurly _lcurl1_,
            PStatements _ifstates_,
            TRightCurly _rcurl1_,
            TElse _else_,
            TLeftCurly _lcurl2_,
            PStatements _elsestates_,
            TRightCurly _rculr2_
    )
    {
        SetIf (_if_);
        SetLeftParent (_left_parent_);
        SetExpressLogic (_express_logic_);
        SetRightParent (_right_parent_);
        SetLcurl1 (_lcurl1_);
        SetIfstates (_ifstates_);
        SetRcurl1 (_rcurl1_);
        SetElse (_else_);
        SetLcurl2 (_lcurl2_);
        SetElsestates (_elsestates_);
        SetRculr2 (_rculr2_);
    }

    public override Object Clone()
    {
        return new AElsesIfState (
            (TIf)CloneNode (_if_),
            (TLeftParent)CloneNode (_left_parent_),
            (PExpressLogic)CloneNode (_express_logic_),
            (TRightParent)CloneNode (_right_parent_),
            (TLeftCurly)CloneNode (_lcurl1_),
            (PStatements)CloneNode (_ifstates_),
            (TRightCurly)CloneNode (_rcurl1_),
            (TElse)CloneNode (_else_),
            (TLeftCurly)CloneNode (_lcurl2_),
            (PStatements)CloneNode (_elsestates_),
            (TRightCurly)CloneNode (_rculr2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAElsesIfState(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TLeftParent GetLeftParent ()
    {
        return _left_parent_;
    }

    public void SetLeftParent (TLeftParent node)
    {
        if(_left_parent_ != null)
        {
            _left_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parent_ = node;
    }
    public PExpressLogic GetExpressLogic ()
    {
        return _express_logic_;
    }

    public void SetExpressLogic (PExpressLogic node)
    {
        if(_express_logic_ != null)
        {
            _express_logic_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _express_logic_ = node;
    }
    public TRightParent GetRightParent ()
    {
        return _right_parent_;
    }

    public void SetRightParent (TRightParent node)
    {
        if(_right_parent_ != null)
        {
            _right_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parent_ = node;
    }
    public TLeftCurly GetLcurl1 ()
    {
        return _lcurl1_;
    }

    public void SetLcurl1 (TLeftCurly node)
    {
        if(_lcurl1_ != null)
        {
            _lcurl1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lcurl1_ = node;
    }
    public PStatements GetIfstates ()
    {
        return _ifstates_;
    }

    public void SetIfstates (PStatements node)
    {
        if(_ifstates_ != null)
        {
            _ifstates_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ifstates_ = node;
    }
    public TRightCurly GetRcurl1 ()
    {
        return _rcurl1_;
    }

    public void SetRcurl1 (TRightCurly node)
    {
        if(_rcurl1_ != null)
        {
            _rcurl1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rcurl1_ = node;
    }
    public TElse GetElse ()
    {
        return _else_;
    }

    public void SetElse (TElse node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }
    public TLeftCurly GetLcurl2 ()
    {
        return _lcurl2_;
    }

    public void SetLcurl2 (TLeftCurly node)
    {
        if(_lcurl2_ != null)
        {
            _lcurl2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lcurl2_ = node;
    }
    public PStatements GetElsestates ()
    {
        return _elsestates_;
    }

    public void SetElsestates (PStatements node)
    {
        if(_elsestates_ != null)
        {
            _elsestates_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elsestates_ = node;
    }
    public TRightCurly GetRculr2 ()
    {
        return _rculr2_;
    }

    public void SetRculr2 (TRightCurly node)
    {
        if(_rculr2_ != null)
        {
            _rculr2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rculr2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_left_parent_)
            + ToString (_express_logic_)
            + ToString (_right_parent_)
            + ToString (_lcurl1_)
            + ToString (_ifstates_)
            + ToString (_rcurl1_)
            + ToString (_else_)
            + ToString (_lcurl2_)
            + ToString (_elsestates_)
            + ToString (_rculr2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _left_parent_ == child )
        {
            _left_parent_ = null;
            return;
        }
        if ( _express_logic_ == child )
        {
            _express_logic_ = null;
            return;
        }
        if ( _right_parent_ == child )
        {
            _right_parent_ = null;
            return;
        }
        if ( _lcurl1_ == child )
        {
            _lcurl1_ = null;
            return;
        }
        if ( _ifstates_ == child )
        {
            _ifstates_ = null;
            return;
        }
        if ( _rcurl1_ == child )
        {
            _rcurl1_ = null;
            return;
        }
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
        if ( _lcurl2_ == child )
        {
            _lcurl2_ = null;
            return;
        }
        if ( _elsestates_ == child )
        {
            _elsestates_ = null;
            return;
        }
        if ( _rculr2_ == child )
        {
            _rculr2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _left_parent_ == oldChild )
        {
            SetLeftParent ((TLeftParent) newChild);
            return;
        }
        if ( _express_logic_ == oldChild )
        {
            SetExpressLogic ((PExpressLogic) newChild);
            return;
        }
        if ( _right_parent_ == oldChild )
        {
            SetRightParent ((TRightParent) newChild);
            return;
        }
        if ( _lcurl1_ == oldChild )
        {
            SetLcurl1 ((TLeftCurly) newChild);
            return;
        }
        if ( _ifstates_ == oldChild )
        {
            SetIfstates ((PStatements) newChild);
            return;
        }
        if ( _rcurl1_ == oldChild )
        {
            SetRcurl1 ((TRightCurly) newChild);
            return;
        }
        if ( _else_ == oldChild )
        {
            SetElse ((TElse) newChild);
            return;
        }
        if ( _lcurl2_ == oldChild )
        {
            SetLcurl2 ((TLeftCurly) newChild);
            return;
        }
        if ( _elsestates_ == oldChild )
        {
            SetElsestates ((PStatements) newChild);
            return;
        }
        if ( _rculr2_ == oldChild )
        {
            SetRculr2 ((TRightCurly) newChild);
            return;
        }
    }

}
public sealed class AWhileState : PWhileState
{
    private TWhile _while_;
    private PExpressLogic _express_logic_;
    private TLeftCurly _left_curly_;
    private PStatements _statements_;
    private TRightCurly _right_curly_;

    public AWhileState ()
    {
    }

    public AWhileState (
            TWhile _while_,
            PExpressLogic _express_logic_,
            TLeftCurly _left_curly_,
            PStatements _statements_,
            TRightCurly _right_curly_
    )
    {
        SetWhile (_while_);
        SetExpressLogic (_express_logic_);
        SetLeftCurly (_left_curly_);
        SetStatements (_statements_);
        SetRightCurly (_right_curly_);
    }

    public override Object Clone()
    {
        return new AWhileState (
            (TWhile)CloneNode (_while_),
            (PExpressLogic)CloneNode (_express_logic_),
            (TLeftCurly)CloneNode (_left_curly_),
            (PStatements)CloneNode (_statements_),
            (TRightCurly)CloneNode (_right_curly_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileState(this);
    }

    public TWhile GetWhile ()
    {
        return _while_;
    }

    public void SetWhile (TWhile node)
    {
        if(_while_ != null)
        {
            _while_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_ = node;
    }
    public PExpressLogic GetExpressLogic ()
    {
        return _express_logic_;
    }

    public void SetExpressLogic (PExpressLogic node)
    {
        if(_express_logic_ != null)
        {
            _express_logic_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _express_logic_ = node;
    }
    public TLeftCurly GetLeftCurly ()
    {
        return _left_curly_;
    }

    public void SetLeftCurly (TLeftCurly node)
    {
        if(_left_curly_ != null)
        {
            _left_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_curly_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRightCurly GetRightCurly ()
    {
        return _right_curly_;
    }

    public void SetRightCurly (TRightCurly node)
    {
        if(_right_curly_ != null)
        {
            _right_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_curly_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_)
            + ToString (_express_logic_)
            + ToString (_left_curly_)
            + ToString (_statements_)
            + ToString (_right_curly_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_ == child )
        {
            _while_ = null;
            return;
        }
        if ( _express_logic_ == child )
        {
            _express_logic_ = null;
            return;
        }
        if ( _left_curly_ == child )
        {
            _left_curly_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _right_curly_ == child )
        {
            _right_curly_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_ == oldChild )
        {
            SetWhile ((TWhile) newChild);
            return;
        }
        if ( _express_logic_ == oldChild )
        {
            SetExpressLogic ((PExpressLogic) newChild);
            return;
        }
        if ( _left_curly_ == oldChild )
        {
            SetLeftCurly ((TLeftCurly) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _right_curly_ == oldChild )
        {
            SetRightCurly ((TRightCurly) newChild);
            return;
        }
    }

}
public sealed class AParamsMethodsCall : PMethodsCall
{
    private TVarNames _var_names_;
    private TLeftParent _left_parent_;
    private PActualParams _actual_params_;
    private TRightParent _right_parent_;
    private TLineEnder _line_ender_;

    public AParamsMethodsCall ()
    {
    }

    public AParamsMethodsCall (
            TVarNames _var_names_,
            TLeftParent _left_parent_,
            PActualParams _actual_params_,
            TRightParent _right_parent_,
            TLineEnder _line_ender_
    )
    {
        SetVarNames (_var_names_);
        SetLeftParent (_left_parent_);
        SetActualParams (_actual_params_);
        SetRightParent (_right_parent_);
        SetLineEnder (_line_ender_);
    }

    public override Object Clone()
    {
        return new AParamsMethodsCall (
            (TVarNames)CloneNode (_var_names_),
            (TLeftParent)CloneNode (_left_parent_),
            (PActualParams)CloneNode (_actual_params_),
            (TRightParent)CloneNode (_right_parent_),
            (TLineEnder)CloneNode (_line_ender_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParamsMethodsCall(this);
    }

    public TVarNames GetVarNames ()
    {
        return _var_names_;
    }

    public void SetVarNames (TVarNames node)
    {
        if(_var_names_ != null)
        {
            _var_names_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_names_ = node;
    }
    public TLeftParent GetLeftParent ()
    {
        return _left_parent_;
    }

    public void SetLeftParent (TLeftParent node)
    {
        if(_left_parent_ != null)
        {
            _left_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parent_ = node;
    }
    public PActualParams GetActualParams ()
    {
        return _actual_params_;
    }

    public void SetActualParams (PActualParams node)
    {
        if(_actual_params_ != null)
        {
            _actual_params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actual_params_ = node;
    }
    public TRightParent GetRightParent ()
    {
        return _right_parent_;
    }

    public void SetRightParent (TRightParent node)
    {
        if(_right_parent_ != null)
        {
            _right_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parent_ = node;
    }
    public TLineEnder GetLineEnder ()
    {
        return _line_ender_;
    }

    public void SetLineEnder (TLineEnder node)
    {
        if(_line_ender_ != null)
        {
            _line_ender_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _line_ender_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_names_)
            + ToString (_left_parent_)
            + ToString (_actual_params_)
            + ToString (_right_parent_)
            + ToString (_line_ender_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_names_ == child )
        {
            _var_names_ = null;
            return;
        }
        if ( _left_parent_ == child )
        {
            _left_parent_ = null;
            return;
        }
        if ( _actual_params_ == child )
        {
            _actual_params_ = null;
            return;
        }
        if ( _right_parent_ == child )
        {
            _right_parent_ = null;
            return;
        }
        if ( _line_ender_ == child )
        {
            _line_ender_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_names_ == oldChild )
        {
            SetVarNames ((TVarNames) newChild);
            return;
        }
        if ( _left_parent_ == oldChild )
        {
            SetLeftParent ((TLeftParent) newChild);
            return;
        }
        if ( _actual_params_ == oldChild )
        {
            SetActualParams ((PActualParams) newChild);
            return;
        }
        if ( _right_parent_ == oldChild )
        {
            SetRightParent ((TRightParent) newChild);
            return;
        }
        if ( _line_ender_ == oldChild )
        {
            SetLineEnder ((TLineEnder) newChild);
            return;
        }
    }

}
public sealed class ANoparamsMethodsCall : PMethodsCall
{
    private TVarNames _var_names_;
    private TLeftParent _left_parent_;
    private TRightParent _right_parent_;
    private TLineEnder _line_ender_;

    public ANoparamsMethodsCall ()
    {
    }

    public ANoparamsMethodsCall (
            TVarNames _var_names_,
            TLeftParent _left_parent_,
            TRightParent _right_parent_,
            TLineEnder _line_ender_
    )
    {
        SetVarNames (_var_names_);
        SetLeftParent (_left_parent_);
        SetRightParent (_right_parent_);
        SetLineEnder (_line_ender_);
    }

    public override Object Clone()
    {
        return new ANoparamsMethodsCall (
            (TVarNames)CloneNode (_var_names_),
            (TLeftParent)CloneNode (_left_parent_),
            (TRightParent)CloneNode (_right_parent_),
            (TLineEnder)CloneNode (_line_ender_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoparamsMethodsCall(this);
    }

    public TVarNames GetVarNames ()
    {
        return _var_names_;
    }

    public void SetVarNames (TVarNames node)
    {
        if(_var_names_ != null)
        {
            _var_names_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_names_ = node;
    }
    public TLeftParent GetLeftParent ()
    {
        return _left_parent_;
    }

    public void SetLeftParent (TLeftParent node)
    {
        if(_left_parent_ != null)
        {
            _left_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parent_ = node;
    }
    public TRightParent GetRightParent ()
    {
        return _right_parent_;
    }

    public void SetRightParent (TRightParent node)
    {
        if(_right_parent_ != null)
        {
            _right_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parent_ = node;
    }
    public TLineEnder GetLineEnder ()
    {
        return _line_ender_;
    }

    public void SetLineEnder (TLineEnder node)
    {
        if(_line_ender_ != null)
        {
            _line_ender_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _line_ender_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_names_)
            + ToString (_left_parent_)
            + ToString (_right_parent_)
            + ToString (_line_ender_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_names_ == child )
        {
            _var_names_ = null;
            return;
        }
        if ( _left_parent_ == child )
        {
            _left_parent_ = null;
            return;
        }
        if ( _right_parent_ == child )
        {
            _right_parent_ = null;
            return;
        }
        if ( _line_ender_ == child )
        {
            _line_ender_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_names_ == oldChild )
        {
            SetVarNames ((TVarNames) newChild);
            return;
        }
        if ( _left_parent_ == oldChild )
        {
            SetLeftParent ((TLeftParent) newChild);
            return;
        }
        if ( _right_parent_ == oldChild )
        {
            SetRightParent ((TRightParent) newChild);
            return;
        }
        if ( _line_ender_ == oldChild )
        {
            SetLineEnder ((TLineEnder) newChild);
            return;
        }
    }

}
public sealed class ARecurActualParams : PActualParams
{
    private PActualParams _actual_params_;
    private TComma _comma_;
    private PActualConsts _actual_consts_;

    public ARecurActualParams ()
    {
    }

    public ARecurActualParams (
            PActualParams _actual_params_,
            TComma _comma_,
            PActualConsts _actual_consts_
    )
    {
        SetActualParams (_actual_params_);
        SetComma (_comma_);
        SetActualConsts (_actual_consts_);
    }

    public override Object Clone()
    {
        return new ARecurActualParams (
            (PActualParams)CloneNode (_actual_params_),
            (TComma)CloneNode (_comma_),
            (PActualConsts)CloneNode (_actual_consts_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARecurActualParams(this);
    }

    public PActualParams GetActualParams ()
    {
        return _actual_params_;
    }

    public void SetActualParams (PActualParams node)
    {
        if(_actual_params_ != null)
        {
            _actual_params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actual_params_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PActualConsts GetActualConsts ()
    {
        return _actual_consts_;
    }

    public void SetActualConsts (PActualConsts node)
    {
        if(_actual_consts_ != null)
        {
            _actual_consts_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actual_consts_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_actual_params_)
            + ToString (_comma_)
            + ToString (_actual_consts_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _actual_params_ == child )
        {
            _actual_params_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _actual_consts_ == child )
        {
            _actual_consts_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _actual_params_ == oldChild )
        {
            SetActualParams ((PActualParams) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _actual_consts_ == oldChild )
        {
            SetActualConsts ((PActualConsts) newChild);
            return;
        }
    }

}
public sealed class AOneActualParams : PActualParams
{
    private PActualConsts _actual_consts_;

    public AOneActualParams ()
    {
    }

    public AOneActualParams (
            PActualConsts _actual_consts_
    )
    {
        SetActualConsts (_actual_consts_);
    }

    public override Object Clone()
    {
        return new AOneActualParams (
            (PActualConsts)CloneNode (_actual_consts_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneActualParams(this);
    }

    public PActualConsts GetActualConsts ()
    {
        return _actual_consts_;
    }

    public void SetActualConsts (PActualConsts node)
    {
        if(_actual_consts_ != null)
        {
            _actual_consts_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _actual_consts_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_actual_consts_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _actual_consts_ == child )
        {
            _actual_consts_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _actual_consts_ == oldChild )
        {
            SetActualConsts ((PActualConsts) newChild);
            return;
        }
    }

}
public sealed class AExpressionsActualConsts : PActualConsts
{
    private PExpressLogic _express_logic_;

    public AExpressionsActualConsts ()
    {
    }

    public AExpressionsActualConsts (
            PExpressLogic _express_logic_
    )
    {
        SetExpressLogic (_express_logic_);
    }

    public override Object Clone()
    {
        return new AExpressionsActualConsts (
            (PExpressLogic)CloneNode (_express_logic_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExpressionsActualConsts(this);
    }

    public PExpressLogic GetExpressLogic ()
    {
        return _express_logic_;
    }

    public void SetExpressLogic (PExpressLogic node)
    {
        if(_express_logic_ != null)
        {
            _express_logic_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _express_logic_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_express_logic_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _express_logic_ == child )
        {
            _express_logic_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _express_logic_ == oldChild )
        {
            SetExpressLogic ((PExpressLogic) newChild);
            return;
        }
    }

}
public sealed class AStringsActualConsts : PActualConsts
{
    private TSillystrings _sillystrings_;

    public AStringsActualConsts ()
    {
    }

    public AStringsActualConsts (
            TSillystrings _sillystrings_
    )
    {
        SetSillystrings (_sillystrings_);
    }

    public override Object Clone()
    {
        return new AStringsActualConsts (
            (TSillystrings)CloneNode (_sillystrings_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringsActualConsts(this);
    }

    public TSillystrings GetSillystrings ()
    {
        return _sillystrings_;
    }

    public void SetSillystrings (TSillystrings node)
    {
        if(_sillystrings_ != null)
        {
            _sillystrings_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _sillystrings_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_sillystrings_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _sillystrings_ == child )
        {
            _sillystrings_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _sillystrings_ == oldChild )
        {
            SetSillystrings ((TSillystrings) newChild);
            return;
        }
    }

}
public sealed class ARecurseMethDecs : PMethDecs
{
    private PMethDecs _meth_decs_;
    private PMethodsDecl _methods_decl_;

    public ARecurseMethDecs ()
    {
    }

    public ARecurseMethDecs (
            PMethDecs _meth_decs_,
            PMethodsDecl _methods_decl_
    )
    {
        SetMethDecs (_meth_decs_);
        SetMethodsDecl (_methods_decl_);
    }

    public override Object Clone()
    {
        return new ARecurseMethDecs (
            (PMethDecs)CloneNode (_meth_decs_),
            (PMethodsDecl)CloneNode (_methods_decl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARecurseMethDecs(this);
    }

    public PMethDecs GetMethDecs ()
    {
        return _meth_decs_;
    }

    public void SetMethDecs (PMethDecs node)
    {
        if(_meth_decs_ != null)
        {
            _meth_decs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _meth_decs_ = node;
    }
    public PMethodsDecl GetMethodsDecl ()
    {
        return _methods_decl_;
    }

    public void SetMethodsDecl (PMethodsDecl node)
    {
        if(_methods_decl_ != null)
        {
            _methods_decl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _methods_decl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_meth_decs_)
            + ToString (_methods_decl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _meth_decs_ == child )
        {
            _meth_decs_ = null;
            return;
        }
        if ( _methods_decl_ == child )
        {
            _methods_decl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _meth_decs_ == oldChild )
        {
            SetMethDecs ((PMethDecs) newChild);
            return;
        }
        if ( _methods_decl_ == oldChild )
        {
            SetMethodsDecl ((PMethodsDecl) newChild);
            return;
        }
    }

}
public sealed class AOneMethDecs : PMethDecs
{
    private PMethodsDecl _methods_decl_;

    public AOneMethDecs ()
    {
    }

    public AOneMethDecs (
            PMethodsDecl _methods_decl_
    )
    {
        SetMethodsDecl (_methods_decl_);
    }

    public override Object Clone()
    {
        return new AOneMethDecs (
            (PMethodsDecl)CloneNode (_methods_decl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneMethDecs(this);
    }

    public PMethodsDecl GetMethodsDecl ()
    {
        return _methods_decl_;
    }

    public void SetMethodsDecl (PMethodsDecl node)
    {
        if(_methods_decl_ != null)
        {
            _methods_decl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _methods_decl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_methods_decl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _methods_decl_ == child )
        {
            _methods_decl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _methods_decl_ == oldChild )
        {
            SetMethodsDecl ((PMethodsDecl) newChild);
            return;
        }
    }

}
public sealed class AParamsMethodsDecl : PMethodsDecl
{
    private TVoidMethods _void_methods_;
    private TVarNames _var_names_;
    private TLeftParent _left_parent_;
    private PFormalParams _formal_params_;
    private TRightParent _right_parent_;
    private TLeftCurly _left_curly_;
    private PStatements _statements_;
    private TRightCurly _right_curly_;

    public AParamsMethodsDecl ()
    {
    }

    public AParamsMethodsDecl (
            TVoidMethods _void_methods_,
            TVarNames _var_names_,
            TLeftParent _left_parent_,
            PFormalParams _formal_params_,
            TRightParent _right_parent_,
            TLeftCurly _left_curly_,
            PStatements _statements_,
            TRightCurly _right_curly_
    )
    {
        SetVoidMethods (_void_methods_);
        SetVarNames (_var_names_);
        SetLeftParent (_left_parent_);
        SetFormalParams (_formal_params_);
        SetRightParent (_right_parent_);
        SetLeftCurly (_left_curly_);
        SetStatements (_statements_);
        SetRightCurly (_right_curly_);
    }

    public override Object Clone()
    {
        return new AParamsMethodsDecl (
            (TVoidMethods)CloneNode (_void_methods_),
            (TVarNames)CloneNode (_var_names_),
            (TLeftParent)CloneNode (_left_parent_),
            (PFormalParams)CloneNode (_formal_params_),
            (TRightParent)CloneNode (_right_parent_),
            (TLeftCurly)CloneNode (_left_curly_),
            (PStatements)CloneNode (_statements_),
            (TRightCurly)CloneNode (_right_curly_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParamsMethodsDecl(this);
    }

    public TVoidMethods GetVoidMethods ()
    {
        return _void_methods_;
    }

    public void SetVoidMethods (TVoidMethods node)
    {
        if(_void_methods_ != null)
        {
            _void_methods_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _void_methods_ = node;
    }
    public TVarNames GetVarNames ()
    {
        return _var_names_;
    }

    public void SetVarNames (TVarNames node)
    {
        if(_var_names_ != null)
        {
            _var_names_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_names_ = node;
    }
    public TLeftParent GetLeftParent ()
    {
        return _left_parent_;
    }

    public void SetLeftParent (TLeftParent node)
    {
        if(_left_parent_ != null)
        {
            _left_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parent_ = node;
    }
    public PFormalParams GetFormalParams ()
    {
        return _formal_params_;
    }

    public void SetFormalParams (PFormalParams node)
    {
        if(_formal_params_ != null)
        {
            _formal_params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_params_ = node;
    }
    public TRightParent GetRightParent ()
    {
        return _right_parent_;
    }

    public void SetRightParent (TRightParent node)
    {
        if(_right_parent_ != null)
        {
            _right_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parent_ = node;
    }
    public TLeftCurly GetLeftCurly ()
    {
        return _left_curly_;
    }

    public void SetLeftCurly (TLeftCurly node)
    {
        if(_left_curly_ != null)
        {
            _left_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_curly_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRightCurly GetRightCurly ()
    {
        return _right_curly_;
    }

    public void SetRightCurly (TRightCurly node)
    {
        if(_right_curly_ != null)
        {
            _right_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_curly_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_void_methods_)
            + ToString (_var_names_)
            + ToString (_left_parent_)
            + ToString (_formal_params_)
            + ToString (_right_parent_)
            + ToString (_left_curly_)
            + ToString (_statements_)
            + ToString (_right_curly_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _void_methods_ == child )
        {
            _void_methods_ = null;
            return;
        }
        if ( _var_names_ == child )
        {
            _var_names_ = null;
            return;
        }
        if ( _left_parent_ == child )
        {
            _left_parent_ = null;
            return;
        }
        if ( _formal_params_ == child )
        {
            _formal_params_ = null;
            return;
        }
        if ( _right_parent_ == child )
        {
            _right_parent_ = null;
            return;
        }
        if ( _left_curly_ == child )
        {
            _left_curly_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _right_curly_ == child )
        {
            _right_curly_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _void_methods_ == oldChild )
        {
            SetVoidMethods ((TVoidMethods) newChild);
            return;
        }
        if ( _var_names_ == oldChild )
        {
            SetVarNames ((TVarNames) newChild);
            return;
        }
        if ( _left_parent_ == oldChild )
        {
            SetLeftParent ((TLeftParent) newChild);
            return;
        }
        if ( _formal_params_ == oldChild )
        {
            SetFormalParams ((PFormalParams) newChild);
            return;
        }
        if ( _right_parent_ == oldChild )
        {
            SetRightParent ((TRightParent) newChild);
            return;
        }
        if ( _left_curly_ == oldChild )
        {
            SetLeftCurly ((TLeftCurly) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _right_curly_ == oldChild )
        {
            SetRightCurly ((TRightCurly) newChild);
            return;
        }
    }

}
public sealed class ANoparamsMethodsDecl : PMethodsDecl
{
    private TVoidMethods _void_methods_;
    private TVarNames _var_names_;
    private TLeftParent _left_parent_;
    private TRightParent _right_parent_;
    private TLeftCurly _left_curly_;
    private PStatements _statements_;
    private TRightCurly _right_curly_;

    public ANoparamsMethodsDecl ()
    {
    }

    public ANoparamsMethodsDecl (
            TVoidMethods _void_methods_,
            TVarNames _var_names_,
            TLeftParent _left_parent_,
            TRightParent _right_parent_,
            TLeftCurly _left_curly_,
            PStatements _statements_,
            TRightCurly _right_curly_
    )
    {
        SetVoidMethods (_void_methods_);
        SetVarNames (_var_names_);
        SetLeftParent (_left_parent_);
        SetRightParent (_right_parent_);
        SetLeftCurly (_left_curly_);
        SetStatements (_statements_);
        SetRightCurly (_right_curly_);
    }

    public override Object Clone()
    {
        return new ANoparamsMethodsDecl (
            (TVoidMethods)CloneNode (_void_methods_),
            (TVarNames)CloneNode (_var_names_),
            (TLeftParent)CloneNode (_left_parent_),
            (TRightParent)CloneNode (_right_parent_),
            (TLeftCurly)CloneNode (_left_curly_),
            (PStatements)CloneNode (_statements_),
            (TRightCurly)CloneNode (_right_curly_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoparamsMethodsDecl(this);
    }

    public TVoidMethods GetVoidMethods ()
    {
        return _void_methods_;
    }

    public void SetVoidMethods (TVoidMethods node)
    {
        if(_void_methods_ != null)
        {
            _void_methods_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _void_methods_ = node;
    }
    public TVarNames GetVarNames ()
    {
        return _var_names_;
    }

    public void SetVarNames (TVarNames node)
    {
        if(_var_names_ != null)
        {
            _var_names_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_names_ = node;
    }
    public TLeftParent GetLeftParent ()
    {
        return _left_parent_;
    }

    public void SetLeftParent (TLeftParent node)
    {
        if(_left_parent_ != null)
        {
            _left_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parent_ = node;
    }
    public TRightParent GetRightParent ()
    {
        return _right_parent_;
    }

    public void SetRightParent (TRightParent node)
    {
        if(_right_parent_ != null)
        {
            _right_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parent_ = node;
    }
    public TLeftCurly GetLeftCurly ()
    {
        return _left_curly_;
    }

    public void SetLeftCurly (TLeftCurly node)
    {
        if(_left_curly_ != null)
        {
            _left_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_curly_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRightCurly GetRightCurly ()
    {
        return _right_curly_;
    }

    public void SetRightCurly (TRightCurly node)
    {
        if(_right_curly_ != null)
        {
            _right_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_curly_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_void_methods_)
            + ToString (_var_names_)
            + ToString (_left_parent_)
            + ToString (_right_parent_)
            + ToString (_left_curly_)
            + ToString (_statements_)
            + ToString (_right_curly_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _void_methods_ == child )
        {
            _void_methods_ = null;
            return;
        }
        if ( _var_names_ == child )
        {
            _var_names_ = null;
            return;
        }
        if ( _left_parent_ == child )
        {
            _left_parent_ = null;
            return;
        }
        if ( _right_parent_ == child )
        {
            _right_parent_ = null;
            return;
        }
        if ( _left_curly_ == child )
        {
            _left_curly_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _right_curly_ == child )
        {
            _right_curly_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _void_methods_ == oldChild )
        {
            SetVoidMethods ((TVoidMethods) newChild);
            return;
        }
        if ( _var_names_ == oldChild )
        {
            SetVarNames ((TVarNames) newChild);
            return;
        }
        if ( _left_parent_ == oldChild )
        {
            SetLeftParent ((TLeftParent) newChild);
            return;
        }
        if ( _right_parent_ == oldChild )
        {
            SetRightParent ((TRightParent) newChild);
            return;
        }
        if ( _left_curly_ == oldChild )
        {
            SetLeftCurly ((TLeftCurly) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _right_curly_ == oldChild )
        {
            SetRightCurly ((TRightCurly) newChild);
            return;
        }
    }

}
public sealed class AMainMethodsDecl : PMethodsDecl
{
    private TVoidMethods _void_methods_;
    private TMainmeth _mainmeth_;
    private TLeftParent _left_parent_;
    private TRightParent _right_parent_;
    private TLeftCurly _left_curly_;
    private PStatements _statements_;
    private TRightCurly _right_curly_;

    public AMainMethodsDecl ()
    {
    }

    public AMainMethodsDecl (
            TVoidMethods _void_methods_,
            TMainmeth _mainmeth_,
            TLeftParent _left_parent_,
            TRightParent _right_parent_,
            TLeftCurly _left_curly_,
            PStatements _statements_,
            TRightCurly _right_curly_
    )
    {
        SetVoidMethods (_void_methods_);
        SetMainmeth (_mainmeth_);
        SetLeftParent (_left_parent_);
        SetRightParent (_right_parent_);
        SetLeftCurly (_left_curly_);
        SetStatements (_statements_);
        SetRightCurly (_right_curly_);
    }

    public override Object Clone()
    {
        return new AMainMethodsDecl (
            (TVoidMethods)CloneNode (_void_methods_),
            (TMainmeth)CloneNode (_mainmeth_),
            (TLeftParent)CloneNode (_left_parent_),
            (TRightParent)CloneNode (_right_parent_),
            (TLeftCurly)CloneNode (_left_curly_),
            (PStatements)CloneNode (_statements_),
            (TRightCurly)CloneNode (_right_curly_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainMethodsDecl(this);
    }

    public TVoidMethods GetVoidMethods ()
    {
        return _void_methods_;
    }

    public void SetVoidMethods (TVoidMethods node)
    {
        if(_void_methods_ != null)
        {
            _void_methods_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _void_methods_ = node;
    }
    public TMainmeth GetMainmeth ()
    {
        return _mainmeth_;
    }

    public void SetMainmeth (TMainmeth node)
    {
        if(_mainmeth_ != null)
        {
            _mainmeth_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mainmeth_ = node;
    }
    public TLeftParent GetLeftParent ()
    {
        return _left_parent_;
    }

    public void SetLeftParent (TLeftParent node)
    {
        if(_left_parent_ != null)
        {
            _left_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parent_ = node;
    }
    public TRightParent GetRightParent ()
    {
        return _right_parent_;
    }

    public void SetRightParent (TRightParent node)
    {
        if(_right_parent_ != null)
        {
            _right_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parent_ = node;
    }
    public TLeftCurly GetLeftCurly ()
    {
        return _left_curly_;
    }

    public void SetLeftCurly (TLeftCurly node)
    {
        if(_left_curly_ != null)
        {
            _left_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_curly_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRightCurly GetRightCurly ()
    {
        return _right_curly_;
    }

    public void SetRightCurly (TRightCurly node)
    {
        if(_right_curly_ != null)
        {
            _right_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_curly_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_void_methods_)
            + ToString (_mainmeth_)
            + ToString (_left_parent_)
            + ToString (_right_parent_)
            + ToString (_left_curly_)
            + ToString (_statements_)
            + ToString (_right_curly_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _void_methods_ == child )
        {
            _void_methods_ = null;
            return;
        }
        if ( _mainmeth_ == child )
        {
            _mainmeth_ = null;
            return;
        }
        if ( _left_parent_ == child )
        {
            _left_parent_ = null;
            return;
        }
        if ( _right_parent_ == child )
        {
            _right_parent_ = null;
            return;
        }
        if ( _left_curly_ == child )
        {
            _left_curly_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _right_curly_ == child )
        {
            _right_curly_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _void_methods_ == oldChild )
        {
            SetVoidMethods ((TVoidMethods) newChild);
            return;
        }
        if ( _mainmeth_ == oldChild )
        {
            SetMainmeth ((TMainmeth) newChild);
            return;
        }
        if ( _left_parent_ == oldChild )
        {
            SetLeftParent ((TLeftParent) newChild);
            return;
        }
        if ( _right_parent_ == oldChild )
        {
            SetRightParent ((TRightParent) newChild);
            return;
        }
        if ( _left_curly_ == oldChild )
        {
            SetLeftCurly ((TLeftCurly) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _right_curly_ == oldChild )
        {
            SetRightCurly ((TRightCurly) newChild);
            return;
        }
    }

}
public sealed class AEmptyparaMethodsDecl : PMethodsDecl
{
    private TVoidMethods _void_methods_;
    private TVarNames _var_names_;
    private TLeftParent _left_parent_;
    private PFormalParams _formal_params_;
    private TRightParent _right_parent_;
    private TLeftCurly _left_curly_;
    private TRightCurly _right_curly_;

    public AEmptyparaMethodsDecl ()
    {
    }

    public AEmptyparaMethodsDecl (
            TVoidMethods _void_methods_,
            TVarNames _var_names_,
            TLeftParent _left_parent_,
            PFormalParams _formal_params_,
            TRightParent _right_parent_,
            TLeftCurly _left_curly_,
            TRightCurly _right_curly_
    )
    {
        SetVoidMethods (_void_methods_);
        SetVarNames (_var_names_);
        SetLeftParent (_left_parent_);
        SetFormalParams (_formal_params_);
        SetRightParent (_right_parent_);
        SetLeftCurly (_left_curly_);
        SetRightCurly (_right_curly_);
    }

    public override Object Clone()
    {
        return new AEmptyparaMethodsDecl (
            (TVoidMethods)CloneNode (_void_methods_),
            (TVarNames)CloneNode (_var_names_),
            (TLeftParent)CloneNode (_left_parent_),
            (PFormalParams)CloneNode (_formal_params_),
            (TRightParent)CloneNode (_right_parent_),
            (TLeftCurly)CloneNode (_left_curly_),
            (TRightCurly)CloneNode (_right_curly_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEmptyparaMethodsDecl(this);
    }

    public TVoidMethods GetVoidMethods ()
    {
        return _void_methods_;
    }

    public void SetVoidMethods (TVoidMethods node)
    {
        if(_void_methods_ != null)
        {
            _void_methods_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _void_methods_ = node;
    }
    public TVarNames GetVarNames ()
    {
        return _var_names_;
    }

    public void SetVarNames (TVarNames node)
    {
        if(_var_names_ != null)
        {
            _var_names_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_names_ = node;
    }
    public TLeftParent GetLeftParent ()
    {
        return _left_parent_;
    }

    public void SetLeftParent (TLeftParent node)
    {
        if(_left_parent_ != null)
        {
            _left_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parent_ = node;
    }
    public PFormalParams GetFormalParams ()
    {
        return _formal_params_;
    }

    public void SetFormalParams (PFormalParams node)
    {
        if(_formal_params_ != null)
        {
            _formal_params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_params_ = node;
    }
    public TRightParent GetRightParent ()
    {
        return _right_parent_;
    }

    public void SetRightParent (TRightParent node)
    {
        if(_right_parent_ != null)
        {
            _right_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parent_ = node;
    }
    public TLeftCurly GetLeftCurly ()
    {
        return _left_curly_;
    }

    public void SetLeftCurly (TLeftCurly node)
    {
        if(_left_curly_ != null)
        {
            _left_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_curly_ = node;
    }
    public TRightCurly GetRightCurly ()
    {
        return _right_curly_;
    }

    public void SetRightCurly (TRightCurly node)
    {
        if(_right_curly_ != null)
        {
            _right_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_curly_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_void_methods_)
            + ToString (_var_names_)
            + ToString (_left_parent_)
            + ToString (_formal_params_)
            + ToString (_right_parent_)
            + ToString (_left_curly_)
            + ToString (_right_curly_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _void_methods_ == child )
        {
            _void_methods_ = null;
            return;
        }
        if ( _var_names_ == child )
        {
            _var_names_ = null;
            return;
        }
        if ( _left_parent_ == child )
        {
            _left_parent_ = null;
            return;
        }
        if ( _formal_params_ == child )
        {
            _formal_params_ = null;
            return;
        }
        if ( _right_parent_ == child )
        {
            _right_parent_ = null;
            return;
        }
        if ( _left_curly_ == child )
        {
            _left_curly_ = null;
            return;
        }
        if ( _right_curly_ == child )
        {
            _right_curly_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _void_methods_ == oldChild )
        {
            SetVoidMethods ((TVoidMethods) newChild);
            return;
        }
        if ( _var_names_ == oldChild )
        {
            SetVarNames ((TVarNames) newChild);
            return;
        }
        if ( _left_parent_ == oldChild )
        {
            SetLeftParent ((TLeftParent) newChild);
            return;
        }
        if ( _formal_params_ == oldChild )
        {
            SetFormalParams ((PFormalParams) newChild);
            return;
        }
        if ( _right_parent_ == oldChild )
        {
            SetRightParent ((TRightParent) newChild);
            return;
        }
        if ( _left_curly_ == oldChild )
        {
            SetLeftCurly ((TLeftCurly) newChild);
            return;
        }
        if ( _right_curly_ == oldChild )
        {
            SetRightCurly ((TRightCurly) newChild);
            return;
        }
    }

}
public sealed class AEmptynoparaMethodsDecl : PMethodsDecl
{
    private TVoidMethods _void_methods_;
    private TVarNames _var_names_;
    private TLeftParent _left_parent_;
    private TRightParent _right_parent_;
    private TLeftCurly _left_curly_;
    private TRightCurly _right_curly_;

    public AEmptynoparaMethodsDecl ()
    {
    }

    public AEmptynoparaMethodsDecl (
            TVoidMethods _void_methods_,
            TVarNames _var_names_,
            TLeftParent _left_parent_,
            TRightParent _right_parent_,
            TLeftCurly _left_curly_,
            TRightCurly _right_curly_
    )
    {
        SetVoidMethods (_void_methods_);
        SetVarNames (_var_names_);
        SetLeftParent (_left_parent_);
        SetRightParent (_right_parent_);
        SetLeftCurly (_left_curly_);
        SetRightCurly (_right_curly_);
    }

    public override Object Clone()
    {
        return new AEmptynoparaMethodsDecl (
            (TVoidMethods)CloneNode (_void_methods_),
            (TVarNames)CloneNode (_var_names_),
            (TLeftParent)CloneNode (_left_parent_),
            (TRightParent)CloneNode (_right_parent_),
            (TLeftCurly)CloneNode (_left_curly_),
            (TRightCurly)CloneNode (_right_curly_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEmptynoparaMethodsDecl(this);
    }

    public TVoidMethods GetVoidMethods ()
    {
        return _void_methods_;
    }

    public void SetVoidMethods (TVoidMethods node)
    {
        if(_void_methods_ != null)
        {
            _void_methods_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _void_methods_ = node;
    }
    public TVarNames GetVarNames ()
    {
        return _var_names_;
    }

    public void SetVarNames (TVarNames node)
    {
        if(_var_names_ != null)
        {
            _var_names_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_names_ = node;
    }
    public TLeftParent GetLeftParent ()
    {
        return _left_parent_;
    }

    public void SetLeftParent (TLeftParent node)
    {
        if(_left_parent_ != null)
        {
            _left_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parent_ = node;
    }
    public TRightParent GetRightParent ()
    {
        return _right_parent_;
    }

    public void SetRightParent (TRightParent node)
    {
        if(_right_parent_ != null)
        {
            _right_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parent_ = node;
    }
    public TLeftCurly GetLeftCurly ()
    {
        return _left_curly_;
    }

    public void SetLeftCurly (TLeftCurly node)
    {
        if(_left_curly_ != null)
        {
            _left_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_curly_ = node;
    }
    public TRightCurly GetRightCurly ()
    {
        return _right_curly_;
    }

    public void SetRightCurly (TRightCurly node)
    {
        if(_right_curly_ != null)
        {
            _right_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_curly_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_void_methods_)
            + ToString (_var_names_)
            + ToString (_left_parent_)
            + ToString (_right_parent_)
            + ToString (_left_curly_)
            + ToString (_right_curly_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _void_methods_ == child )
        {
            _void_methods_ = null;
            return;
        }
        if ( _var_names_ == child )
        {
            _var_names_ = null;
            return;
        }
        if ( _left_parent_ == child )
        {
            _left_parent_ = null;
            return;
        }
        if ( _right_parent_ == child )
        {
            _right_parent_ = null;
            return;
        }
        if ( _left_curly_ == child )
        {
            _left_curly_ = null;
            return;
        }
        if ( _right_curly_ == child )
        {
            _right_curly_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _void_methods_ == oldChild )
        {
            SetVoidMethods ((TVoidMethods) newChild);
            return;
        }
        if ( _var_names_ == oldChild )
        {
            SetVarNames ((TVarNames) newChild);
            return;
        }
        if ( _left_parent_ == oldChild )
        {
            SetLeftParent ((TLeftParent) newChild);
            return;
        }
        if ( _right_parent_ == oldChild )
        {
            SetRightParent ((TRightParent) newChild);
            return;
        }
        if ( _left_curly_ == oldChild )
        {
            SetLeftCurly ((TLeftCurly) newChild);
            return;
        }
        if ( _right_curly_ == oldChild )
        {
            SetRightCurly ((TRightCurly) newChild);
            return;
        }
    }

}
public sealed class AEmptymainMethodsDecl : PMethodsDecl
{
    private TVoidMethods _void_methods_;
    private TMainmeth _mainmeth_;
    private TLeftParent _left_parent_;
    private TRightParent _right_parent_;
    private TLeftCurly _left_curly_;
    private TRightCurly _right_curly_;

    public AEmptymainMethodsDecl ()
    {
    }

    public AEmptymainMethodsDecl (
            TVoidMethods _void_methods_,
            TMainmeth _mainmeth_,
            TLeftParent _left_parent_,
            TRightParent _right_parent_,
            TLeftCurly _left_curly_,
            TRightCurly _right_curly_
    )
    {
        SetVoidMethods (_void_methods_);
        SetMainmeth (_mainmeth_);
        SetLeftParent (_left_parent_);
        SetRightParent (_right_parent_);
        SetLeftCurly (_left_curly_);
        SetRightCurly (_right_curly_);
    }

    public override Object Clone()
    {
        return new AEmptymainMethodsDecl (
            (TVoidMethods)CloneNode (_void_methods_),
            (TMainmeth)CloneNode (_mainmeth_),
            (TLeftParent)CloneNode (_left_parent_),
            (TRightParent)CloneNode (_right_parent_),
            (TLeftCurly)CloneNode (_left_curly_),
            (TRightCurly)CloneNode (_right_curly_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEmptymainMethodsDecl(this);
    }

    public TVoidMethods GetVoidMethods ()
    {
        return _void_methods_;
    }

    public void SetVoidMethods (TVoidMethods node)
    {
        if(_void_methods_ != null)
        {
            _void_methods_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _void_methods_ = node;
    }
    public TMainmeth GetMainmeth ()
    {
        return _mainmeth_;
    }

    public void SetMainmeth (TMainmeth node)
    {
        if(_mainmeth_ != null)
        {
            _mainmeth_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mainmeth_ = node;
    }
    public TLeftParent GetLeftParent ()
    {
        return _left_parent_;
    }

    public void SetLeftParent (TLeftParent node)
    {
        if(_left_parent_ != null)
        {
            _left_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parent_ = node;
    }
    public TRightParent GetRightParent ()
    {
        return _right_parent_;
    }

    public void SetRightParent (TRightParent node)
    {
        if(_right_parent_ != null)
        {
            _right_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parent_ = node;
    }
    public TLeftCurly GetLeftCurly ()
    {
        return _left_curly_;
    }

    public void SetLeftCurly (TLeftCurly node)
    {
        if(_left_curly_ != null)
        {
            _left_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_curly_ = node;
    }
    public TRightCurly GetRightCurly ()
    {
        return _right_curly_;
    }

    public void SetRightCurly (TRightCurly node)
    {
        if(_right_curly_ != null)
        {
            _right_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_curly_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_void_methods_)
            + ToString (_mainmeth_)
            + ToString (_left_parent_)
            + ToString (_right_parent_)
            + ToString (_left_curly_)
            + ToString (_right_curly_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _void_methods_ == child )
        {
            _void_methods_ = null;
            return;
        }
        if ( _mainmeth_ == child )
        {
            _mainmeth_ = null;
            return;
        }
        if ( _left_parent_ == child )
        {
            _left_parent_ = null;
            return;
        }
        if ( _right_parent_ == child )
        {
            _right_parent_ = null;
            return;
        }
        if ( _left_curly_ == child )
        {
            _left_curly_ = null;
            return;
        }
        if ( _right_curly_ == child )
        {
            _right_curly_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _void_methods_ == oldChild )
        {
            SetVoidMethods ((TVoidMethods) newChild);
            return;
        }
        if ( _mainmeth_ == oldChild )
        {
            SetMainmeth ((TMainmeth) newChild);
            return;
        }
        if ( _left_parent_ == oldChild )
        {
            SetLeftParent ((TLeftParent) newChild);
            return;
        }
        if ( _right_parent_ == oldChild )
        {
            SetRightParent ((TRightParent) newChild);
            return;
        }
        if ( _left_curly_ == oldChild )
        {
            SetLeftCurly ((TLeftCurly) newChild);
            return;
        }
        if ( _right_curly_ == oldChild )
        {
            SetRightCurly ((TRightCurly) newChild);
            return;
        }
    }

}
public sealed class ARecurFormalParams : PFormalParams
{
    private PFormalParams _formal_params_;
    private TComma _comma_;
    private PFormalConsts _formal_consts_;

    public ARecurFormalParams ()
    {
    }

    public ARecurFormalParams (
            PFormalParams _formal_params_,
            TComma _comma_,
            PFormalConsts _formal_consts_
    )
    {
        SetFormalParams (_formal_params_);
        SetComma (_comma_);
        SetFormalConsts (_formal_consts_);
    }

    public override Object Clone()
    {
        return new ARecurFormalParams (
            (PFormalParams)CloneNode (_formal_params_),
            (TComma)CloneNode (_comma_),
            (PFormalConsts)CloneNode (_formal_consts_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARecurFormalParams(this);
    }

    public PFormalParams GetFormalParams ()
    {
        return _formal_params_;
    }

    public void SetFormalParams (PFormalParams node)
    {
        if(_formal_params_ != null)
        {
            _formal_params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_params_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PFormalConsts GetFormalConsts ()
    {
        return _formal_consts_;
    }

    public void SetFormalConsts (PFormalConsts node)
    {
        if(_formal_consts_ != null)
        {
            _formal_consts_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_consts_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_formal_params_)
            + ToString (_comma_)
            + ToString (_formal_consts_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _formal_params_ == child )
        {
            _formal_params_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _formal_consts_ == child )
        {
            _formal_consts_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _formal_params_ == oldChild )
        {
            SetFormalParams ((PFormalParams) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _formal_consts_ == oldChild )
        {
            SetFormalConsts ((PFormalConsts) newChild);
            return;
        }
    }

}
public sealed class AOneFormalParams : PFormalParams
{
    private PFormalConsts _formal_consts_;

    public AOneFormalParams ()
    {
    }

    public AOneFormalParams (
            PFormalConsts _formal_consts_
    )
    {
        SetFormalConsts (_formal_consts_);
    }

    public override Object Clone()
    {
        return new AOneFormalParams (
            (PFormalConsts)CloneNode (_formal_consts_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOneFormalParams(this);
    }

    public PFormalConsts GetFormalConsts ()
    {
        return _formal_consts_;
    }

    public void SetFormalConsts (PFormalConsts node)
    {
        if(_formal_consts_ != null)
        {
            _formal_consts_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_consts_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_formal_consts_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _formal_consts_ == child )
        {
            _formal_consts_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _formal_consts_ == oldChild )
        {
            SetFormalConsts ((PFormalConsts) newChild);
            return;
        }
    }

}
public sealed class AVarsFormalConsts : PFormalConsts
{
    private TVarNames _id1_;
    private TVarNames _id2_;

    public AVarsFormalConsts ()
    {
    }

    public AVarsFormalConsts (
            TVarNames _id1_,
            TVarNames _id2_
    )
    {
        SetId1 (_id1_);
        SetId2 (_id2_);
    }

    public override Object Clone()
    {
        return new AVarsFormalConsts (
            (TVarNames)CloneNode (_id1_),
            (TVarNames)CloneNode (_id2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVarsFormalConsts(this);
    }

    public TVarNames GetId1 ()
    {
        return _id1_;
    }

    public void SetId1 (TVarNames node)
    {
        if(_id1_ != null)
        {
            _id1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id1_ = node;
    }
    public TVarNames GetId2 ()
    {
        return _id2_;
    }

    public void SetId2 (TVarNames node)
    {
        if(_id2_ != null)
        {
            _id2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id1_)
            + ToString (_id2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id1_ == child )
        {
            _id1_ = null;
            return;
        }
        if ( _id2_ == child )
        {
            _id2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id1_ == oldChild )
        {
            SetId1 ((TVarNames) newChild);
            return;
        }
        if ( _id2_ == oldChild )
        {
            SetId2 ((TVarNames) newChild);
            return;
        }
    }

}
public sealed class AArrFormalConsts : PFormalConsts
{
    private TVarNames _id1_;
    private TVarNames _id2_;
    private TLeftBracket _left_bracket_;
    private TRightBracket _right_bracket_;

    public AArrFormalConsts ()
    {
    }

    public AArrFormalConsts (
            TVarNames _id1_,
            TVarNames _id2_,
            TLeftBracket _left_bracket_,
            TRightBracket _right_bracket_
    )
    {
        SetId1 (_id1_);
        SetId2 (_id2_);
        SetLeftBracket (_left_bracket_);
        SetRightBracket (_right_bracket_);
    }

    public override Object Clone()
    {
        return new AArrFormalConsts (
            (TVarNames)CloneNode (_id1_),
            (TVarNames)CloneNode (_id2_),
            (TLeftBracket)CloneNode (_left_bracket_),
            (TRightBracket)CloneNode (_right_bracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrFormalConsts(this);
    }

    public TVarNames GetId1 ()
    {
        return _id1_;
    }

    public void SetId1 (TVarNames node)
    {
        if(_id1_ != null)
        {
            _id1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id1_ = node;
    }
    public TVarNames GetId2 ()
    {
        return _id2_;
    }

    public void SetId2 (TVarNames node)
    {
        if(_id2_ != null)
        {
            _id2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id2_ = node;
    }
    public TLeftBracket GetLeftBracket ()
    {
        return _left_bracket_;
    }

    public void SetLeftBracket (TLeftBracket node)
    {
        if(_left_bracket_ != null)
        {
            _left_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_bracket_ = node;
    }
    public TRightBracket GetRightBracket ()
    {
        return _right_bracket_;
    }

    public void SetRightBracket (TRightBracket node)
    {
        if(_right_bracket_ != null)
        {
            _right_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_bracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id1_)
            + ToString (_id2_)
            + ToString (_left_bracket_)
            + ToString (_right_bracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id1_ == child )
        {
            _id1_ = null;
            return;
        }
        if ( _id2_ == child )
        {
            _id2_ = null;
            return;
        }
        if ( _left_bracket_ == child )
        {
            _left_bracket_ = null;
            return;
        }
        if ( _right_bracket_ == child )
        {
            _right_bracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id1_ == oldChild )
        {
            SetId1 ((TVarNames) newChild);
            return;
        }
        if ( _id2_ == oldChild )
        {
            SetId2 ((TVarNames) newChild);
            return;
        }
        if ( _left_bracket_ == oldChild )
        {
            SetLeftBracket ((TLeftBracket) newChild);
            return;
        }
        if ( _right_bracket_ == oldChild )
        {
            SetRightBracket ((TRightBracket) newChild);
            return;
        }
    }

}
public sealed class AOrExpressLogic : PExpressLogic
{
    private PExpressComp _ops1_;
    private TOrNah _or_nah_;
    private PExpressComp _ops2_;

    public AOrExpressLogic ()
    {
    }

    public AOrExpressLogic (
            PExpressComp _ops1_,
            TOrNah _or_nah_,
            PExpressComp _ops2_
    )
    {
        SetOps1 (_ops1_);
        SetOrNah (_or_nah_);
        SetOps2 (_ops2_);
    }

    public override Object Clone()
    {
        return new AOrExpressLogic (
            (PExpressComp)CloneNode (_ops1_),
            (TOrNah)CloneNode (_or_nah_),
            (PExpressComp)CloneNode (_ops2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOrExpressLogic(this);
    }

    public PExpressComp GetOps1 ()
    {
        return _ops1_;
    }

    public void SetOps1 (PExpressComp node)
    {
        if(_ops1_ != null)
        {
            _ops1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ops1_ = node;
    }
    public TOrNah GetOrNah ()
    {
        return _or_nah_;
    }

    public void SetOrNah (TOrNah node)
    {
        if(_or_nah_ != null)
        {
            _or_nah_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_nah_ = node;
    }
    public PExpressComp GetOps2 ()
    {
        return _ops2_;
    }

    public void SetOps2 (PExpressComp node)
    {
        if(_ops2_ != null)
        {
            _ops2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ops2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_ops1_)
            + ToString (_or_nah_)
            + ToString (_ops2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _ops1_ == child )
        {
            _ops1_ = null;
            return;
        }
        if ( _or_nah_ == child )
        {
            _or_nah_ = null;
            return;
        }
        if ( _ops2_ == child )
        {
            _ops2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _ops1_ == oldChild )
        {
            SetOps1 ((PExpressComp) newChild);
            return;
        }
        if ( _or_nah_ == oldChild )
        {
            SetOrNah ((TOrNah) newChild);
            return;
        }
        if ( _ops2_ == oldChild )
        {
            SetOps2 ((PExpressComp) newChild);
            return;
        }
    }

}
public sealed class AAndExpressLogic : PExpressLogic
{
    private PExpressComp _ops1_;
    private TAndy _andy_;
    private PExpressComp _ops2_;

    public AAndExpressLogic ()
    {
    }

    public AAndExpressLogic (
            PExpressComp _ops1_,
            TAndy _andy_,
            PExpressComp _ops2_
    )
    {
        SetOps1 (_ops1_);
        SetAndy (_andy_);
        SetOps2 (_ops2_);
    }

    public override Object Clone()
    {
        return new AAndExpressLogic (
            (PExpressComp)CloneNode (_ops1_),
            (TAndy)CloneNode (_andy_),
            (PExpressComp)CloneNode (_ops2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndExpressLogic(this);
    }

    public PExpressComp GetOps1 ()
    {
        return _ops1_;
    }

    public void SetOps1 (PExpressComp node)
    {
        if(_ops1_ != null)
        {
            _ops1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ops1_ = node;
    }
    public TAndy GetAndy ()
    {
        return _andy_;
    }

    public void SetAndy (TAndy node)
    {
        if(_andy_ != null)
        {
            _andy_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _andy_ = node;
    }
    public PExpressComp GetOps2 ()
    {
        return _ops2_;
    }

    public void SetOps2 (PExpressComp node)
    {
        if(_ops2_ != null)
        {
            _ops2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ops2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_ops1_)
            + ToString (_andy_)
            + ToString (_ops2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _ops1_ == child )
        {
            _ops1_ = null;
            return;
        }
        if ( _andy_ == child )
        {
            _andy_ = null;
            return;
        }
        if ( _ops2_ == child )
        {
            _ops2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _ops1_ == oldChild )
        {
            SetOps1 ((PExpressComp) newChild);
            return;
        }
        if ( _andy_ == oldChild )
        {
            SetAndy ((TAndy) newChild);
            return;
        }
        if ( _ops2_ == oldChild )
        {
            SetOps2 ((PExpressComp) newChild);
            return;
        }
    }

}
public sealed class ANotExpressLogic : PExpressLogic
{
    private TNah _nah_;
    private PExpressComp _express_comp_;

    public ANotExpressLogic ()
    {
    }

    public ANotExpressLogic (
            TNah _nah_,
            PExpressComp _express_comp_
    )
    {
        SetNah (_nah_);
        SetExpressComp (_express_comp_);
    }

    public override Object Clone()
    {
        return new ANotExpressLogic (
            (TNah)CloneNode (_nah_),
            (PExpressComp)CloneNode (_express_comp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotExpressLogic(this);
    }

    public TNah GetNah ()
    {
        return _nah_;
    }

    public void SetNah (TNah node)
    {
        if(_nah_ != null)
        {
            _nah_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _nah_ = node;
    }
    public PExpressComp GetExpressComp ()
    {
        return _express_comp_;
    }

    public void SetExpressComp (PExpressComp node)
    {
        if(_express_comp_ != null)
        {
            _express_comp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _express_comp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_nah_)
            + ToString (_express_comp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _nah_ == child )
        {
            _nah_ = null;
            return;
        }
        if ( _express_comp_ == child )
        {
            _express_comp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _nah_ == oldChild )
        {
            SetNah ((TNah) newChild);
            return;
        }
        if ( _express_comp_ == oldChild )
        {
            SetExpressComp ((PExpressComp) newChild);
            return;
        }
    }

}
public sealed class ACompExpressLogic : PExpressLogic
{
    private PExpressComp _express_comp_;

    public ACompExpressLogic ()
    {
    }

    public ACompExpressLogic (
            PExpressComp _express_comp_
    )
    {
        SetExpressComp (_express_comp_);
    }

    public override Object Clone()
    {
        return new ACompExpressLogic (
            (PExpressComp)CloneNode (_express_comp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACompExpressLogic(this);
    }

    public PExpressComp GetExpressComp ()
    {
        return _express_comp_;
    }

    public void SetExpressComp (PExpressComp node)
    {
        if(_express_comp_ != null)
        {
            _express_comp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _express_comp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_express_comp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _express_comp_ == child )
        {
            _express_comp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _express_comp_ == oldChild )
        {
            SetExpressComp ((PExpressComp) newChild);
            return;
        }
    }

}
public sealed class AGteExpressComp : PExpressComp
{
    private PExpressAs _ops1_;
    private TGreatThanEq _great_than_eq_;
    private PExpressAs _ops2_;

    public AGteExpressComp ()
    {
    }

    public AGteExpressComp (
            PExpressAs _ops1_,
            TGreatThanEq _great_than_eq_,
            PExpressAs _ops2_
    )
    {
        SetOps1 (_ops1_);
        SetGreatThanEq (_great_than_eq_);
        SetOps2 (_ops2_);
    }

    public override Object Clone()
    {
        return new AGteExpressComp (
            (PExpressAs)CloneNode (_ops1_),
            (TGreatThanEq)CloneNode (_great_than_eq_),
            (PExpressAs)CloneNode (_ops2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGteExpressComp(this);
    }

    public PExpressAs GetOps1 ()
    {
        return _ops1_;
    }

    public void SetOps1 (PExpressAs node)
    {
        if(_ops1_ != null)
        {
            _ops1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ops1_ = node;
    }
    public TGreatThanEq GetGreatThanEq ()
    {
        return _great_than_eq_;
    }

    public void SetGreatThanEq (TGreatThanEq node)
    {
        if(_great_than_eq_ != null)
        {
            _great_than_eq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _great_than_eq_ = node;
    }
    public PExpressAs GetOps2 ()
    {
        return _ops2_;
    }

    public void SetOps2 (PExpressAs node)
    {
        if(_ops2_ != null)
        {
            _ops2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ops2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_ops1_)
            + ToString (_great_than_eq_)
            + ToString (_ops2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _ops1_ == child )
        {
            _ops1_ = null;
            return;
        }
        if ( _great_than_eq_ == child )
        {
            _great_than_eq_ = null;
            return;
        }
        if ( _ops2_ == child )
        {
            _ops2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _ops1_ == oldChild )
        {
            SetOps1 ((PExpressAs) newChild);
            return;
        }
        if ( _great_than_eq_ == oldChild )
        {
            SetGreatThanEq ((TGreatThanEq) newChild);
            return;
        }
        if ( _ops2_ == oldChild )
        {
            SetOps2 ((PExpressAs) newChild);
            return;
        }
    }

}
public sealed class ALteExpressComp : PExpressComp
{
    private PExpressAs _ops1_;
    private TLessThanEq _less_than_eq_;
    private PExpressAs _ops2_;

    public ALteExpressComp ()
    {
    }

    public ALteExpressComp (
            PExpressAs _ops1_,
            TLessThanEq _less_than_eq_,
            PExpressAs _ops2_
    )
    {
        SetOps1 (_ops1_);
        SetLessThanEq (_less_than_eq_);
        SetOps2 (_ops2_);
    }

    public override Object Clone()
    {
        return new ALteExpressComp (
            (PExpressAs)CloneNode (_ops1_),
            (TLessThanEq)CloneNode (_less_than_eq_),
            (PExpressAs)CloneNode (_ops2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALteExpressComp(this);
    }

    public PExpressAs GetOps1 ()
    {
        return _ops1_;
    }

    public void SetOps1 (PExpressAs node)
    {
        if(_ops1_ != null)
        {
            _ops1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ops1_ = node;
    }
    public TLessThanEq GetLessThanEq ()
    {
        return _less_than_eq_;
    }

    public void SetLessThanEq (TLessThanEq node)
    {
        if(_less_than_eq_ != null)
        {
            _less_than_eq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_than_eq_ = node;
    }
    public PExpressAs GetOps2 ()
    {
        return _ops2_;
    }

    public void SetOps2 (PExpressAs node)
    {
        if(_ops2_ != null)
        {
            _ops2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ops2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_ops1_)
            + ToString (_less_than_eq_)
            + ToString (_ops2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _ops1_ == child )
        {
            _ops1_ = null;
            return;
        }
        if ( _less_than_eq_ == child )
        {
            _less_than_eq_ = null;
            return;
        }
        if ( _ops2_ == child )
        {
            _ops2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _ops1_ == oldChild )
        {
            SetOps1 ((PExpressAs) newChild);
            return;
        }
        if ( _less_than_eq_ == oldChild )
        {
            SetLessThanEq ((TLessThanEq) newChild);
            return;
        }
        if ( _ops2_ == oldChild )
        {
            SetOps2 ((PExpressAs) newChild);
            return;
        }
    }

}
public sealed class ALtExpressComp : PExpressComp
{
    private PExpressAs _ops1_;
    private TLesser _lesser_;
    private PExpressAs _ops2_;

    public ALtExpressComp ()
    {
    }

    public ALtExpressComp (
            PExpressAs _ops1_,
            TLesser _lesser_,
            PExpressAs _ops2_
    )
    {
        SetOps1 (_ops1_);
        SetLesser (_lesser_);
        SetOps2 (_ops2_);
    }

    public override Object Clone()
    {
        return new ALtExpressComp (
            (PExpressAs)CloneNode (_ops1_),
            (TLesser)CloneNode (_lesser_),
            (PExpressAs)CloneNode (_ops2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALtExpressComp(this);
    }

    public PExpressAs GetOps1 ()
    {
        return _ops1_;
    }

    public void SetOps1 (PExpressAs node)
    {
        if(_ops1_ != null)
        {
            _ops1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ops1_ = node;
    }
    public TLesser GetLesser ()
    {
        return _lesser_;
    }

    public void SetLesser (TLesser node)
    {
        if(_lesser_ != null)
        {
            _lesser_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lesser_ = node;
    }
    public PExpressAs GetOps2 ()
    {
        return _ops2_;
    }

    public void SetOps2 (PExpressAs node)
    {
        if(_ops2_ != null)
        {
            _ops2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ops2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_ops1_)
            + ToString (_lesser_)
            + ToString (_ops2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _ops1_ == child )
        {
            _ops1_ = null;
            return;
        }
        if ( _lesser_ == child )
        {
            _lesser_ = null;
            return;
        }
        if ( _ops2_ == child )
        {
            _ops2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _ops1_ == oldChild )
        {
            SetOps1 ((PExpressAs) newChild);
            return;
        }
        if ( _lesser_ == oldChild )
        {
            SetLesser ((TLesser) newChild);
            return;
        }
        if ( _ops2_ == oldChild )
        {
            SetOps2 ((PExpressAs) newChild);
            return;
        }
    }

}
public sealed class AGtExpressComp : PExpressComp
{
    private PExpressAs _ops1_;
    private TGreater _greater_;
    private PExpressAs _ops2_;

    public AGtExpressComp ()
    {
    }

    public AGtExpressComp (
            PExpressAs _ops1_,
            TGreater _greater_,
            PExpressAs _ops2_
    )
    {
        SetOps1 (_ops1_);
        SetGreater (_greater_);
        SetOps2 (_ops2_);
    }

    public override Object Clone()
    {
        return new AGtExpressComp (
            (PExpressAs)CloneNode (_ops1_),
            (TGreater)CloneNode (_greater_),
            (PExpressAs)CloneNode (_ops2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGtExpressComp(this);
    }

    public PExpressAs GetOps1 ()
    {
        return _ops1_;
    }

    public void SetOps1 (PExpressAs node)
    {
        if(_ops1_ != null)
        {
            _ops1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ops1_ = node;
    }
    public TGreater GetGreater ()
    {
        return _greater_;
    }

    public void SetGreater (TGreater node)
    {
        if(_greater_ != null)
        {
            _greater_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greater_ = node;
    }
    public PExpressAs GetOps2 ()
    {
        return _ops2_;
    }

    public void SetOps2 (PExpressAs node)
    {
        if(_ops2_ != null)
        {
            _ops2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ops2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_ops1_)
            + ToString (_greater_)
            + ToString (_ops2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _ops1_ == child )
        {
            _ops1_ = null;
            return;
        }
        if ( _greater_ == child )
        {
            _greater_ = null;
            return;
        }
        if ( _ops2_ == child )
        {
            _ops2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _ops1_ == oldChild )
        {
            SetOps1 ((PExpressAs) newChild);
            return;
        }
        if ( _greater_ == oldChild )
        {
            SetGreater ((TGreater) newChild);
            return;
        }
        if ( _ops2_ == oldChild )
        {
            SetOps2 ((PExpressAs) newChild);
            return;
        }
    }

}
public sealed class AEqsExpressComp : PExpressComp
{
    private PExpressAs _ops1_;
    private TEquators _equators_;
    private PExpressAs _ops2_;

    public AEqsExpressComp ()
    {
    }

    public AEqsExpressComp (
            PExpressAs _ops1_,
            TEquators _equators_,
            PExpressAs _ops2_
    )
    {
        SetOps1 (_ops1_);
        SetEquators (_equators_);
        SetOps2 (_ops2_);
    }

    public override Object Clone()
    {
        return new AEqsExpressComp (
            (PExpressAs)CloneNode (_ops1_),
            (TEquators)CloneNode (_equators_),
            (PExpressAs)CloneNode (_ops2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqsExpressComp(this);
    }

    public PExpressAs GetOps1 ()
    {
        return _ops1_;
    }

    public void SetOps1 (PExpressAs node)
    {
        if(_ops1_ != null)
        {
            _ops1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ops1_ = node;
    }
    public TEquators GetEquators ()
    {
        return _equators_;
    }

    public void SetEquators (TEquators node)
    {
        if(_equators_ != null)
        {
            _equators_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equators_ = node;
    }
    public PExpressAs GetOps2 ()
    {
        return _ops2_;
    }

    public void SetOps2 (PExpressAs node)
    {
        if(_ops2_ != null)
        {
            _ops2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ops2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_ops1_)
            + ToString (_equators_)
            + ToString (_ops2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _ops1_ == child )
        {
            _ops1_ = null;
            return;
        }
        if ( _equators_ == child )
        {
            _equators_ = null;
            return;
        }
        if ( _ops2_ == child )
        {
            _ops2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _ops1_ == oldChild )
        {
            SetOps1 ((PExpressAs) newChild);
            return;
        }
        if ( _equators_ == oldChild )
        {
            SetEquators ((TEquators) newChild);
            return;
        }
        if ( _ops2_ == oldChild )
        {
            SetOps2 ((PExpressAs) newChild);
            return;
        }
    }

}
public sealed class ANoteqsExpressComp : PExpressComp
{
    private PExpressAs _ops1_;
    private TNoteqs _noteqs_;
    private PExpressAs _ops2_;

    public ANoteqsExpressComp ()
    {
    }

    public ANoteqsExpressComp (
            PExpressAs _ops1_,
            TNoteqs _noteqs_,
            PExpressAs _ops2_
    )
    {
        SetOps1 (_ops1_);
        SetNoteqs (_noteqs_);
        SetOps2 (_ops2_);
    }

    public override Object Clone()
    {
        return new ANoteqsExpressComp (
            (PExpressAs)CloneNode (_ops1_),
            (TNoteqs)CloneNode (_noteqs_),
            (PExpressAs)CloneNode (_ops2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoteqsExpressComp(this);
    }

    public PExpressAs GetOps1 ()
    {
        return _ops1_;
    }

    public void SetOps1 (PExpressAs node)
    {
        if(_ops1_ != null)
        {
            _ops1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ops1_ = node;
    }
    public TNoteqs GetNoteqs ()
    {
        return _noteqs_;
    }

    public void SetNoteqs (TNoteqs node)
    {
        if(_noteqs_ != null)
        {
            _noteqs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _noteqs_ = node;
    }
    public PExpressAs GetOps2 ()
    {
        return _ops2_;
    }

    public void SetOps2 (PExpressAs node)
    {
        if(_ops2_ != null)
        {
            _ops2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ops2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_ops1_)
            + ToString (_noteqs_)
            + ToString (_ops2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _ops1_ == child )
        {
            _ops1_ = null;
            return;
        }
        if ( _noteqs_ == child )
        {
            _noteqs_ = null;
            return;
        }
        if ( _ops2_ == child )
        {
            _ops2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _ops1_ == oldChild )
        {
            SetOps1 ((PExpressAs) newChild);
            return;
        }
        if ( _noteqs_ == oldChild )
        {
            SetNoteqs ((TNoteqs) newChild);
            return;
        }
        if ( _ops2_ == oldChild )
        {
            SetOps2 ((PExpressAs) newChild);
            return;
        }
    }

}
public sealed class AMathExpressComp : PExpressComp
{
    private PExpressAs _express_as_;

    public AMathExpressComp ()
    {
    }

    public AMathExpressComp (
            PExpressAs _express_as_
    )
    {
        SetExpressAs (_express_as_);
    }

    public override Object Clone()
    {
        return new AMathExpressComp (
            (PExpressAs)CloneNode (_express_as_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMathExpressComp(this);
    }

    public PExpressAs GetExpressAs ()
    {
        return _express_as_;
    }

    public void SetExpressAs (PExpressAs node)
    {
        if(_express_as_ != null)
        {
            _express_as_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _express_as_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_express_as_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _express_as_ == child )
        {
            _express_as_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _express_as_ == oldChild )
        {
            SetExpressAs ((PExpressAs) newChild);
            return;
        }
    }

}
public sealed class AAddExpressAs : PExpressAs
{
    private PExpressAs _express_as_;
    private TPlus _plus_;
    private PExpressMd _express_md_;

    public AAddExpressAs ()
    {
    }

    public AAddExpressAs (
            PExpressAs _express_as_,
            TPlus _plus_,
            PExpressMd _express_md_
    )
    {
        SetExpressAs (_express_as_);
        SetPlus (_plus_);
        SetExpressMd (_express_md_);
    }

    public override Object Clone()
    {
        return new AAddExpressAs (
            (PExpressAs)CloneNode (_express_as_),
            (TPlus)CloneNode (_plus_),
            (PExpressMd)CloneNode (_express_md_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAddExpressAs(this);
    }

    public PExpressAs GetExpressAs ()
    {
        return _express_as_;
    }

    public void SetExpressAs (PExpressAs node)
    {
        if(_express_as_ != null)
        {
            _express_as_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _express_as_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PExpressMd GetExpressMd ()
    {
        return _express_md_;
    }

    public void SetExpressMd (PExpressMd node)
    {
        if(_express_md_ != null)
        {
            _express_md_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _express_md_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_express_as_)
            + ToString (_plus_)
            + ToString (_express_md_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _express_as_ == child )
        {
            _express_as_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _express_md_ == child )
        {
            _express_md_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _express_as_ == oldChild )
        {
            SetExpressAs ((PExpressAs) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _express_md_ == oldChild )
        {
            SetExpressMd ((PExpressMd) newChild);
            return;
        }
    }

}
public sealed class ASubExpressAs : PExpressAs
{
    private PExpressAs _express_as_;
    private TMinus _minus_;
    private PExpressMd _express_md_;

    public ASubExpressAs ()
    {
    }

    public ASubExpressAs (
            PExpressAs _express_as_,
            TMinus _minus_,
            PExpressMd _express_md_
    )
    {
        SetExpressAs (_express_as_);
        SetMinus (_minus_);
        SetExpressMd (_express_md_);
    }

    public override Object Clone()
    {
        return new ASubExpressAs (
            (PExpressAs)CloneNode (_express_as_),
            (TMinus)CloneNode (_minus_),
            (PExpressMd)CloneNode (_express_md_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASubExpressAs(this);
    }

    public PExpressAs GetExpressAs ()
    {
        return _express_as_;
    }

    public void SetExpressAs (PExpressAs node)
    {
        if(_express_as_ != null)
        {
            _express_as_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _express_as_ = node;
    }
    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public PExpressMd GetExpressMd ()
    {
        return _express_md_;
    }

    public void SetExpressMd (PExpressMd node)
    {
        if(_express_md_ != null)
        {
            _express_md_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _express_md_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_express_as_)
            + ToString (_minus_)
            + ToString (_express_md_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _express_as_ == child )
        {
            _express_as_ = null;
            return;
        }
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _express_md_ == child )
        {
            _express_md_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _express_as_ == oldChild )
        {
            SetExpressAs ((PExpressAs) newChild);
            return;
        }
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _express_md_ == oldChild )
        {
            SetExpressMd ((PExpressMd) newChild);
            return;
        }
    }

}
public sealed class AMdExpressAs : PExpressAs
{
    private PExpressMd _express_md_;

    public AMdExpressAs ()
    {
    }

    public AMdExpressAs (
            PExpressMd _express_md_
    )
    {
        SetExpressMd (_express_md_);
    }

    public override Object Clone()
    {
        return new AMdExpressAs (
            (PExpressMd)CloneNode (_express_md_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMdExpressAs(this);
    }

    public PExpressMd GetExpressMd ()
    {
        return _express_md_;
    }

    public void SetExpressMd (PExpressMd node)
    {
        if(_express_md_ != null)
        {
            _express_md_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _express_md_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_express_md_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _express_md_ == child )
        {
            _express_md_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _express_md_ == oldChild )
        {
            SetExpressMd ((PExpressMd) newChild);
            return;
        }
    }

}
public sealed class AMultExpressMd : PExpressMd
{
    private PExpressMd _express_md_;
    private TTimes _times_;
    private PExpressParent _express_parent_;

    public AMultExpressMd ()
    {
    }

    public AMultExpressMd (
            PExpressMd _express_md_,
            TTimes _times_,
            PExpressParent _express_parent_
    )
    {
        SetExpressMd (_express_md_);
        SetTimes (_times_);
        SetExpressParent (_express_parent_);
    }

    public override Object Clone()
    {
        return new AMultExpressMd (
            (PExpressMd)CloneNode (_express_md_),
            (TTimes)CloneNode (_times_),
            (PExpressParent)CloneNode (_express_parent_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultExpressMd(this);
    }

    public PExpressMd GetExpressMd ()
    {
        return _express_md_;
    }

    public void SetExpressMd (PExpressMd node)
    {
        if(_express_md_ != null)
        {
            _express_md_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _express_md_ = node;
    }
    public TTimes GetTimes ()
    {
        return _times_;
    }

    public void SetTimes (TTimes node)
    {
        if(_times_ != null)
        {
            _times_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _times_ = node;
    }
    public PExpressParent GetExpressParent ()
    {
        return _express_parent_;
    }

    public void SetExpressParent (PExpressParent node)
    {
        if(_express_parent_ != null)
        {
            _express_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _express_parent_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_express_md_)
            + ToString (_times_)
            + ToString (_express_parent_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _express_md_ == child )
        {
            _express_md_ = null;
            return;
        }
        if ( _times_ == child )
        {
            _times_ = null;
            return;
        }
        if ( _express_parent_ == child )
        {
            _express_parent_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _express_md_ == oldChild )
        {
            SetExpressMd ((PExpressMd) newChild);
            return;
        }
        if ( _times_ == oldChild )
        {
            SetTimes ((TTimes) newChild);
            return;
        }
        if ( _express_parent_ == oldChild )
        {
            SetExpressParent ((PExpressParent) newChild);
            return;
        }
    }

}
public sealed class ADivExpressMd : PExpressMd
{
    private PExpressMd _express_md_;
    private TDivide _divide_;
    private PExpressParent _express_parent_;

    public ADivExpressMd ()
    {
    }

    public ADivExpressMd (
            PExpressMd _express_md_,
            TDivide _divide_,
            PExpressParent _express_parent_
    )
    {
        SetExpressMd (_express_md_);
        SetDivide (_divide_);
        SetExpressParent (_express_parent_);
    }

    public override Object Clone()
    {
        return new ADivExpressMd (
            (PExpressMd)CloneNode (_express_md_),
            (TDivide)CloneNode (_divide_),
            (PExpressParent)CloneNode (_express_parent_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivExpressMd(this);
    }

    public PExpressMd GetExpressMd ()
    {
        return _express_md_;
    }

    public void SetExpressMd (PExpressMd node)
    {
        if(_express_md_ != null)
        {
            _express_md_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _express_md_ = node;
    }
    public TDivide GetDivide ()
    {
        return _divide_;
    }

    public void SetDivide (TDivide node)
    {
        if(_divide_ != null)
        {
            _divide_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _divide_ = node;
    }
    public PExpressParent GetExpressParent ()
    {
        return _express_parent_;
    }

    public void SetExpressParent (PExpressParent node)
    {
        if(_express_parent_ != null)
        {
            _express_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _express_parent_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_express_md_)
            + ToString (_divide_)
            + ToString (_express_parent_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _express_md_ == child )
        {
            _express_md_ = null;
            return;
        }
        if ( _divide_ == child )
        {
            _divide_ = null;
            return;
        }
        if ( _express_parent_ == child )
        {
            _express_parent_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _express_md_ == oldChild )
        {
            SetExpressMd ((PExpressMd) newChild);
            return;
        }
        if ( _divide_ == oldChild )
        {
            SetDivide ((TDivide) newChild);
            return;
        }
        if ( _express_parent_ == oldChild )
        {
            SetExpressParent ((PExpressParent) newChild);
            return;
        }
    }

}
public sealed class AParentExpressMd : PExpressMd
{
    private PExpressParent _express_parent_;

    public AParentExpressMd ()
    {
    }

    public AParentExpressMd (
            PExpressParent _express_parent_
    )
    {
        SetExpressParent (_express_parent_);
    }

    public override Object Clone()
    {
        return new AParentExpressMd (
            (PExpressParent)CloneNode (_express_parent_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParentExpressMd(this);
    }

    public PExpressParent GetExpressParent ()
    {
        return _express_parent_;
    }

    public void SetExpressParent (PExpressParent node)
    {
        if(_express_parent_ != null)
        {
            _express_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _express_parent_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_express_parent_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _express_parent_ == child )
        {
            _express_parent_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _express_parent_ == oldChild )
        {
            SetExpressParent ((PExpressParent) newChild);
            return;
        }
    }

}
public sealed class AParentExpressParent : PExpressParent
{
    private TLeftParent _left_parent_;
    private PExpressLogic _express_logic_;
    private TRightParent _right_parent_;

    public AParentExpressParent ()
    {
    }

    public AParentExpressParent (
            TLeftParent _left_parent_,
            PExpressLogic _express_logic_,
            TRightParent _right_parent_
    )
    {
        SetLeftParent (_left_parent_);
        SetExpressLogic (_express_logic_);
        SetRightParent (_right_parent_);
    }

    public override Object Clone()
    {
        return new AParentExpressParent (
            (TLeftParent)CloneNode (_left_parent_),
            (PExpressLogic)CloneNode (_express_logic_),
            (TRightParent)CloneNode (_right_parent_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParentExpressParent(this);
    }

    public TLeftParent GetLeftParent ()
    {
        return _left_parent_;
    }

    public void SetLeftParent (TLeftParent node)
    {
        if(_left_parent_ != null)
        {
            _left_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parent_ = node;
    }
    public PExpressLogic GetExpressLogic ()
    {
        return _express_logic_;
    }

    public void SetExpressLogic (PExpressLogic node)
    {
        if(_express_logic_ != null)
        {
            _express_logic_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _express_logic_ = node;
    }
    public TRightParent GetRightParent ()
    {
        return _right_parent_;
    }

    public void SetRightParent (TRightParent node)
    {
        if(_right_parent_ != null)
        {
            _right_parent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parent_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_parent_)
            + ToString (_express_logic_)
            + ToString (_right_parent_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_parent_ == child )
        {
            _left_parent_ = null;
            return;
        }
        if ( _express_logic_ == child )
        {
            _express_logic_ = null;
            return;
        }
        if ( _right_parent_ == child )
        {
            _right_parent_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_parent_ == oldChild )
        {
            SetLeftParent ((TLeftParent) newChild);
            return;
        }
        if ( _express_logic_ == oldChild )
        {
            SetExpressLogic ((PExpressLogic) newChild);
            return;
        }
        if ( _right_parent_ == oldChild )
        {
            SetRightParent ((TRightParent) newChild);
            return;
        }
    }

}
public sealed class AConstsExpressParent : PExpressParent
{
    private PExpressConsts _express_consts_;

    public AConstsExpressParent ()
    {
    }

    public AConstsExpressParent (
            PExpressConsts _express_consts_
    )
    {
        SetExpressConsts (_express_consts_);
    }

    public override Object Clone()
    {
        return new AConstsExpressParent (
            (PExpressConsts)CloneNode (_express_consts_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstsExpressParent(this);
    }

    public PExpressConsts GetExpressConsts ()
    {
        return _express_consts_;
    }

    public void SetExpressConsts (PExpressConsts node)
    {
        if(_express_consts_ != null)
        {
            _express_consts_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _express_consts_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_express_consts_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _express_consts_ == child )
        {
            _express_consts_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _express_consts_ == oldChild )
        {
            SetExpressConsts ((PExpressConsts) newChild);
            return;
        }
    }

}
public sealed class ANegvarExpressConsts : PExpressConsts
{
    private TMinus _minus_;
    private TVarNames _var_names_;

    public ANegvarExpressConsts ()
    {
    }

    public ANegvarExpressConsts (
            TMinus _minus_,
            TVarNames _var_names_
    )
    {
        SetMinus (_minus_);
        SetVarNames (_var_names_);
    }

    public override Object Clone()
    {
        return new ANegvarExpressConsts (
            (TMinus)CloneNode (_minus_),
            (TVarNames)CloneNode (_var_names_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegvarExpressConsts(this);
    }

    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public TVarNames GetVarNames ()
    {
        return _var_names_;
    }

    public void SetVarNames (TVarNames node)
    {
        if(_var_names_ != null)
        {
            _var_names_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_names_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_minus_)
            + ToString (_var_names_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _var_names_ == child )
        {
            _var_names_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _var_names_ == oldChild )
        {
            SetVarNames ((TVarNames) newChild);
            return;
        }
    }

}
public sealed class ANegintExpressConsts : PExpressConsts
{
    private TMinus _minus_;
    private TInts _ints_;

    public ANegintExpressConsts ()
    {
    }

    public ANegintExpressConsts (
            TMinus _minus_,
            TInts _ints_
    )
    {
        SetMinus (_minus_);
        SetInts (_ints_);
    }

    public override Object Clone()
    {
        return new ANegintExpressConsts (
            (TMinus)CloneNode (_minus_),
            (TInts)CloneNode (_ints_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegintExpressConsts(this);
    }

    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public TInts GetInts ()
    {
        return _ints_;
    }

    public void SetInts (TInts node)
    {
        if(_ints_ != null)
        {
            _ints_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ints_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_minus_)
            + ToString (_ints_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _ints_ == child )
        {
            _ints_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _ints_ == oldChild )
        {
            SetInts ((TInts) newChild);
            return;
        }
    }

}
public sealed class ANegfloExpressConsts : PExpressConsts
{
    private TMinus _minus_;
    private TRootbeerfloats _rootbeerfloats_;

    public ANegfloExpressConsts ()
    {
    }

    public ANegfloExpressConsts (
            TMinus _minus_,
            TRootbeerfloats _rootbeerfloats_
    )
    {
        SetMinus (_minus_);
        SetRootbeerfloats (_rootbeerfloats_);
    }

    public override Object Clone()
    {
        return new ANegfloExpressConsts (
            (TMinus)CloneNode (_minus_),
            (TRootbeerfloats)CloneNode (_rootbeerfloats_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegfloExpressConsts(this);
    }

    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public TRootbeerfloats GetRootbeerfloats ()
    {
        return _rootbeerfloats_;
    }

    public void SetRootbeerfloats (TRootbeerfloats node)
    {
        if(_rootbeerfloats_ != null)
        {
            _rootbeerfloats_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rootbeerfloats_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_minus_)
            + ToString (_rootbeerfloats_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _rootbeerfloats_ == child )
        {
            _rootbeerfloats_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _rootbeerfloats_ == oldChild )
        {
            SetRootbeerfloats ((TRootbeerfloats) newChild);
            return;
        }
    }

}
public sealed class AVarExpressConsts : PExpressConsts
{
    private TVarNames _var_names_;

    public AVarExpressConsts ()
    {
    }

    public AVarExpressConsts (
            TVarNames _var_names_
    )
    {
        SetVarNames (_var_names_);
    }

    public override Object Clone()
    {
        return new AVarExpressConsts (
            (TVarNames)CloneNode (_var_names_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVarExpressConsts(this);
    }

    public TVarNames GetVarNames ()
    {
        return _var_names_;
    }

    public void SetVarNames (TVarNames node)
    {
        if(_var_names_ != null)
        {
            _var_names_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_names_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_names_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_names_ == child )
        {
            _var_names_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_names_ == oldChild )
        {
            SetVarNames ((TVarNames) newChild);
            return;
        }
    }

}
public sealed class AIntsExpressConsts : PExpressConsts
{
    private TInts _ints_;

    public AIntsExpressConsts ()
    {
    }

    public AIntsExpressConsts (
            TInts _ints_
    )
    {
        SetInts (_ints_);
    }

    public override Object Clone()
    {
        return new AIntsExpressConsts (
            (TInts)CloneNode (_ints_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntsExpressConsts(this);
    }

    public TInts GetInts ()
    {
        return _ints_;
    }

    public void SetInts (TInts node)
    {
        if(_ints_ != null)
        {
            _ints_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ints_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_ints_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _ints_ == child )
        {
            _ints_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _ints_ == oldChild )
        {
            SetInts ((TInts) newChild);
            return;
        }
    }

}
public sealed class AFloExpressConsts : PExpressConsts
{
    private TRootbeerfloats _rootbeerfloats_;

    public AFloExpressConsts ()
    {
    }

    public AFloExpressConsts (
            TRootbeerfloats _rootbeerfloats_
    )
    {
        SetRootbeerfloats (_rootbeerfloats_);
    }

    public override Object Clone()
    {
        return new AFloExpressConsts (
            (TRootbeerfloats)CloneNode (_rootbeerfloats_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloExpressConsts(this);
    }

    public TRootbeerfloats GetRootbeerfloats ()
    {
        return _rootbeerfloats_;
    }

    public void SetRootbeerfloats (TRootbeerfloats node)
    {
        if(_rootbeerfloats_ != null)
        {
            _rootbeerfloats_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rootbeerfloats_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_rootbeerfloats_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _rootbeerfloats_ == child )
        {
            _rootbeerfloats_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _rootbeerfloats_ == oldChild )
        {
            SetRootbeerfloats ((TRootbeerfloats) newChild);
            return;
        }
    }

}
public sealed class AArrayExpressConsts : PExpressConsts
{
    private TVarNames _var_names_;
    private TLeftBracket _left_bracket_;
    private PExpressLogic _express_logic_;
    private TRightBracket _right_bracket_;

    public AArrayExpressConsts ()
    {
    }

    public AArrayExpressConsts (
            TVarNames _var_names_,
            TLeftBracket _left_bracket_,
            PExpressLogic _express_logic_,
            TRightBracket _right_bracket_
    )
    {
        SetVarNames (_var_names_);
        SetLeftBracket (_left_bracket_);
        SetExpressLogic (_express_logic_);
        SetRightBracket (_right_bracket_);
    }

    public override Object Clone()
    {
        return new AArrayExpressConsts (
            (TVarNames)CloneNode (_var_names_),
            (TLeftBracket)CloneNode (_left_bracket_),
            (PExpressLogic)CloneNode (_express_logic_),
            (TRightBracket)CloneNode (_right_bracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayExpressConsts(this);
    }

    public TVarNames GetVarNames ()
    {
        return _var_names_;
    }

    public void SetVarNames (TVarNames node)
    {
        if(_var_names_ != null)
        {
            _var_names_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_names_ = node;
    }
    public TLeftBracket GetLeftBracket ()
    {
        return _left_bracket_;
    }

    public void SetLeftBracket (TLeftBracket node)
    {
        if(_left_bracket_ != null)
        {
            _left_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_bracket_ = node;
    }
    public PExpressLogic GetExpressLogic ()
    {
        return _express_logic_;
    }

    public void SetExpressLogic (PExpressLogic node)
    {
        if(_express_logic_ != null)
        {
            _express_logic_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _express_logic_ = node;
    }
    public TRightBracket GetRightBracket ()
    {
        return _right_bracket_;
    }

    public void SetRightBracket (TRightBracket node)
    {
        if(_right_bracket_ != null)
        {
            _right_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_bracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_names_)
            + ToString (_left_bracket_)
            + ToString (_express_logic_)
            + ToString (_right_bracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_names_ == child )
        {
            _var_names_ = null;
            return;
        }
        if ( _left_bracket_ == child )
        {
            _left_bracket_ = null;
            return;
        }
        if ( _express_logic_ == child )
        {
            _express_logic_ = null;
            return;
        }
        if ( _right_bracket_ == child )
        {
            _right_bracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_names_ == oldChild )
        {
            SetVarNames ((TVarNames) newChild);
            return;
        }
        if ( _left_bracket_ == oldChild )
        {
            SetLeftBracket ((TLeftBracket) newChild);
            return;
        }
        if ( _express_logic_ == oldChild )
        {
            SetExpressLogic ((PExpressLogic) newChild);
            return;
        }
        if ( _right_bracket_ == oldChild )
        {
            SetRightBracket ((TRightBracket) newChild);
            return;
        }
    }

}
public sealed class ADeclarationsDeclarations : PDeclarations
{
    private PDeclarations _declarations_;
    private PDeclaration _declaration_;

    public ADeclarationsDeclarations ()
    {
    }

    public ADeclarationsDeclarations (
            PDeclarations _declarations_,
            PDeclaration _declaration_
    )
    {
        SetDeclarations (_declarations_);
        SetDeclaration (_declaration_);
    }

    public override Object Clone()
    {
        return new ADeclarationsDeclarations (
            (PDeclarations)CloneNode (_declarations_),
            (PDeclaration)CloneNode (_declaration_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclarationsDeclarations(this);
    }

    public PDeclarations GetDeclarations ()
    {
        return _declarations_;
    }

    public void SetDeclarations (PDeclarations node)
    {
        if(_declarations_ != null)
        {
            _declarations_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declarations_ = node;
    }
    public PDeclaration GetDeclaration ()
    {
        return _declaration_;
    }

    public void SetDeclaration (PDeclaration node)
    {
        if(_declaration_ != null)
        {
            _declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declaration_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declarations_)
            + ToString (_declaration_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declarations_ == child )
        {
            _declarations_ = null;
            return;
        }
        if ( _declaration_ == child )
        {
            _declaration_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declarations_ == oldChild )
        {
            SetDeclarations ((PDeclarations) newChild);
            return;
        }
        if ( _declaration_ == oldChild )
        {
            SetDeclaration ((PDeclaration) newChild);
            return;
        }
    }

}
public sealed class ADeclarationDeclarations : PDeclarations
{
    private PDeclaration _declaration_;

    public ADeclarationDeclarations ()
    {
    }

    public ADeclarationDeclarations (
            PDeclaration _declaration_
    )
    {
        SetDeclaration (_declaration_);
    }

    public override Object Clone()
    {
        return new ADeclarationDeclarations (
            (PDeclaration)CloneNode (_declaration_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclarationDeclarations(this);
    }

    public PDeclaration GetDeclaration ()
    {
        return _declaration_;
    }

    public void SetDeclaration (PDeclaration node)
    {
        if(_declaration_ != null)
        {
            _declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declaration_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declaration_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declaration_ == child )
        {
            _declaration_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declaration_ == oldChild )
        {
            SetDeclaration ((PDeclaration) newChild);
            return;
        }
    }

}
public sealed class AConstantsDeclaration : PDeclaration
{
    private PConstantine _constantine_;

    public AConstantsDeclaration ()
    {
    }

    public AConstantsDeclaration (
            PConstantine _constantine_
    )
    {
        SetConstantine (_constantine_);
    }

    public override Object Clone()
    {
        return new AConstantsDeclaration (
            (PConstantine)CloneNode (_constantine_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstantsDeclaration(this);
    }

    public PConstantine GetConstantine ()
    {
        return _constantine_;
    }

    public void SetConstantine (PConstantine node)
    {
        if(_constantine_ != null)
        {
            _constantine_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constantine_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constantine_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constantine_ == child )
        {
            _constantine_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constantine_ == oldChild )
        {
            SetConstantine ((PConstantine) newChild);
            return;
        }
    }

}
public sealed class AVarsDeclaration : PDeclaration
{
    private PDeclOptions _decl_options_;
    private TLineEnder _line_ender_;

    public AVarsDeclaration ()
    {
    }

    public AVarsDeclaration (
            PDeclOptions _decl_options_,
            TLineEnder _line_ender_
    )
    {
        SetDeclOptions (_decl_options_);
        SetLineEnder (_line_ender_);
    }

    public override Object Clone()
    {
        return new AVarsDeclaration (
            (PDeclOptions)CloneNode (_decl_options_),
            (TLineEnder)CloneNode (_line_ender_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVarsDeclaration(this);
    }

    public PDeclOptions GetDeclOptions ()
    {
        return _decl_options_;
    }

    public void SetDeclOptions (PDeclOptions node)
    {
        if(_decl_options_ != null)
        {
            _decl_options_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _decl_options_ = node;
    }
    public TLineEnder GetLineEnder ()
    {
        return _line_ender_;
    }

    public void SetLineEnder (TLineEnder node)
    {
        if(_line_ender_ != null)
        {
            _line_ender_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _line_ender_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_decl_options_)
            + ToString (_line_ender_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _decl_options_ == child )
        {
            _decl_options_ = null;
            return;
        }
        if ( _line_ender_ == child )
        {
            _line_ender_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _decl_options_ == oldChild )
        {
            SetDeclOptions ((PDeclOptions) newChild);
            return;
        }
        if ( _line_ender_ == oldChild )
        {
            SetLineEnder ((TLineEnder) newChild);
            return;
        }
    }

}
public sealed class AVarDeclOptions : PDeclOptions
{
    private TVarNames _type_;
    private TVarNames _var_;

    public AVarDeclOptions ()
    {
    }

    public AVarDeclOptions (
            TVarNames _type_,
            TVarNames _var_
    )
    {
        SetType (_type_);
        SetVar (_var_);
    }

    public override Object Clone()
    {
        return new AVarDeclOptions (
            (TVarNames)CloneNode (_type_),
            (TVarNames)CloneNode (_var_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVarDeclOptions(this);
    }

    public TVarNames GetType ()
    {
        return _type_;
    }

    public void SetType (TVarNames node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TVarNames GetVar ()
    {
        return _var_;
    }

    public void SetVar (TVarNames node)
    {
        if(_var_ != null)
        {
            _var_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_var_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _var_ == child )
        {
            _var_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TVarNames) newChild);
            return;
        }
        if ( _var_ == oldChild )
        {
            SetVar ((TVarNames) newChild);
            return;
        }
    }

}
public sealed class AArrDeclOptions : PDeclOptions
{
    private TVarNames _type_;
    private TVarNames _var_;
    private TLeftBracket _left_bracket_;
    private TInts _ints_;
    private TRightBracket _right_bracket_;

    public AArrDeclOptions ()
    {
    }

    public AArrDeclOptions (
            TVarNames _type_,
            TVarNames _var_,
            TLeftBracket _left_bracket_,
            TInts _ints_,
            TRightBracket _right_bracket_
    )
    {
        SetType (_type_);
        SetVar (_var_);
        SetLeftBracket (_left_bracket_);
        SetInts (_ints_);
        SetRightBracket (_right_bracket_);
    }

    public override Object Clone()
    {
        return new AArrDeclOptions (
            (TVarNames)CloneNode (_type_),
            (TVarNames)CloneNode (_var_),
            (TLeftBracket)CloneNode (_left_bracket_),
            (TInts)CloneNode (_ints_),
            (TRightBracket)CloneNode (_right_bracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrDeclOptions(this);
    }

    public TVarNames GetType ()
    {
        return _type_;
    }

    public void SetType (TVarNames node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TVarNames GetVar ()
    {
        return _var_;
    }

    public void SetVar (TVarNames node)
    {
        if(_var_ != null)
        {
            _var_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_ = node;
    }
    public TLeftBracket GetLeftBracket ()
    {
        return _left_bracket_;
    }

    public void SetLeftBracket (TLeftBracket node)
    {
        if(_left_bracket_ != null)
        {
            _left_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_bracket_ = node;
    }
    public TInts GetInts ()
    {
        return _ints_;
    }

    public void SetInts (TInts node)
    {
        if(_ints_ != null)
        {
            _ints_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ints_ = node;
    }
    public TRightBracket GetRightBracket ()
    {
        return _right_bracket_;
    }

    public void SetRightBracket (TRightBracket node)
    {
        if(_right_bracket_ != null)
        {
            _right_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_bracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_var_)
            + ToString (_left_bracket_)
            + ToString (_ints_)
            + ToString (_right_bracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _var_ == child )
        {
            _var_ = null;
            return;
        }
        if ( _left_bracket_ == child )
        {
            _left_bracket_ = null;
            return;
        }
        if ( _ints_ == child )
        {
            _ints_ = null;
            return;
        }
        if ( _right_bracket_ == child )
        {
            _right_bracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TVarNames) newChild);
            return;
        }
        if ( _var_ == oldChild )
        {
            SetVar ((TVarNames) newChild);
            return;
        }
        if ( _left_bracket_ == oldChild )
        {
            SetLeftBracket ((TLeftBracket) newChild);
            return;
        }
        if ( _ints_ == oldChild )
        {
            SetInts ((TInts) newChild);
            return;
        }
        if ( _right_bracket_ == oldChild )
        {
            SetRightBracket ((TRightBracket) newChild);
            return;
        }
    }

}
public sealed class AConstantine : PConstantine
{
    private TConstantinople _constantinople_;
    private TVarNames _id1_;
    private TVarNames _id2_;
    private TAssignments _assignments_;
    private PNumConsts _num_consts_;
    private TLineEnder _line_ender_;

    public AConstantine ()
    {
    }

    public AConstantine (
            TConstantinople _constantinople_,
            TVarNames _id1_,
            TVarNames _id2_,
            TAssignments _assignments_,
            PNumConsts _num_consts_,
            TLineEnder _line_ender_
    )
    {
        SetConstantinople (_constantinople_);
        SetId1 (_id1_);
        SetId2 (_id2_);
        SetAssignments (_assignments_);
        SetNumConsts (_num_consts_);
        SetLineEnder (_line_ender_);
    }

    public override Object Clone()
    {
        return new AConstantine (
            (TConstantinople)CloneNode (_constantinople_),
            (TVarNames)CloneNode (_id1_),
            (TVarNames)CloneNode (_id2_),
            (TAssignments)CloneNode (_assignments_),
            (PNumConsts)CloneNode (_num_consts_),
            (TLineEnder)CloneNode (_line_ender_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstantine(this);
    }

    public TConstantinople GetConstantinople ()
    {
        return _constantinople_;
    }

    public void SetConstantinople (TConstantinople node)
    {
        if(_constantinople_ != null)
        {
            _constantinople_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constantinople_ = node;
    }
    public TVarNames GetId1 ()
    {
        return _id1_;
    }

    public void SetId1 (TVarNames node)
    {
        if(_id1_ != null)
        {
            _id1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id1_ = node;
    }
    public TVarNames GetId2 ()
    {
        return _id2_;
    }

    public void SetId2 (TVarNames node)
    {
        if(_id2_ != null)
        {
            _id2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id2_ = node;
    }
    public TAssignments GetAssignments ()
    {
        return _assignments_;
    }

    public void SetAssignments (TAssignments node)
    {
        if(_assignments_ != null)
        {
            _assignments_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignments_ = node;
    }
    public PNumConsts GetNumConsts ()
    {
        return _num_consts_;
    }

    public void SetNumConsts (PNumConsts node)
    {
        if(_num_consts_ != null)
        {
            _num_consts_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _num_consts_ = node;
    }
    public TLineEnder GetLineEnder ()
    {
        return _line_ender_;
    }

    public void SetLineEnder (TLineEnder node)
    {
        if(_line_ender_ != null)
        {
            _line_ender_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _line_ender_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constantinople_)
            + ToString (_id1_)
            + ToString (_id2_)
            + ToString (_assignments_)
            + ToString (_num_consts_)
            + ToString (_line_ender_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constantinople_ == child )
        {
            _constantinople_ = null;
            return;
        }
        if ( _id1_ == child )
        {
            _id1_ = null;
            return;
        }
        if ( _id2_ == child )
        {
            _id2_ = null;
            return;
        }
        if ( _assignments_ == child )
        {
            _assignments_ = null;
            return;
        }
        if ( _num_consts_ == child )
        {
            _num_consts_ = null;
            return;
        }
        if ( _line_ender_ == child )
        {
            _line_ender_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constantinople_ == oldChild )
        {
            SetConstantinople ((TConstantinople) newChild);
            return;
        }
        if ( _id1_ == oldChild )
        {
            SetId1 ((TVarNames) newChild);
            return;
        }
        if ( _id2_ == oldChild )
        {
            SetId2 ((TVarNames) newChild);
            return;
        }
        if ( _assignments_ == oldChild )
        {
            SetAssignments ((TAssignments) newChild);
            return;
        }
        if ( _num_consts_ == oldChild )
        {
            SetNumConsts ((PNumConsts) newChild);
            return;
        }
        if ( _line_ender_ == oldChild )
        {
            SetLineEnder ((TLineEnder) newChild);
            return;
        }
    }

}
public sealed class APosintNumConsts : PNumConsts
{
    private TInts _ints_;

    public APosintNumConsts ()
    {
    }

    public APosintNumConsts (
            TInts _ints_
    )
    {
        SetInts (_ints_);
    }

    public override Object Clone()
    {
        return new APosintNumConsts (
            (TInts)CloneNode (_ints_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPosintNumConsts(this);
    }

    public TInts GetInts ()
    {
        return _ints_;
    }

    public void SetInts (TInts node)
    {
        if(_ints_ != null)
        {
            _ints_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ints_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_ints_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _ints_ == child )
        {
            _ints_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _ints_ == oldChild )
        {
            SetInts ((TInts) newChild);
            return;
        }
    }

}
public sealed class ANegintNumConsts : PNumConsts
{
    private TMinus _minus_;
    private TInts _ints_;

    public ANegintNumConsts ()
    {
    }

    public ANegintNumConsts (
            TMinus _minus_,
            TInts _ints_
    )
    {
        SetMinus (_minus_);
        SetInts (_ints_);
    }

    public override Object Clone()
    {
        return new ANegintNumConsts (
            (TMinus)CloneNode (_minus_),
            (TInts)CloneNode (_ints_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegintNumConsts(this);
    }

    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public TInts GetInts ()
    {
        return _ints_;
    }

    public void SetInts (TInts node)
    {
        if(_ints_ != null)
        {
            _ints_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ints_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_minus_)
            + ToString (_ints_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _ints_ == child )
        {
            _ints_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _ints_ == oldChild )
        {
            SetInts ((TInts) newChild);
            return;
        }
    }

}
public sealed class APosfloNumConsts : PNumConsts
{
    private TRootbeerfloats _rootbeerfloats_;

    public APosfloNumConsts ()
    {
    }

    public APosfloNumConsts (
            TRootbeerfloats _rootbeerfloats_
    )
    {
        SetRootbeerfloats (_rootbeerfloats_);
    }

    public override Object Clone()
    {
        return new APosfloNumConsts (
            (TRootbeerfloats)CloneNode (_rootbeerfloats_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPosfloNumConsts(this);
    }

    public TRootbeerfloats GetRootbeerfloats ()
    {
        return _rootbeerfloats_;
    }

    public void SetRootbeerfloats (TRootbeerfloats node)
    {
        if(_rootbeerfloats_ != null)
        {
            _rootbeerfloats_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rootbeerfloats_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_rootbeerfloats_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _rootbeerfloats_ == child )
        {
            _rootbeerfloats_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _rootbeerfloats_ == oldChild )
        {
            SetRootbeerfloats ((TRootbeerfloats) newChild);
            return;
        }
    }

}
public sealed class ANegfloNumConsts : PNumConsts
{
    private TMinus _minus_;
    private TRootbeerfloats _rootbeerfloats_;

    public ANegfloNumConsts ()
    {
    }

    public ANegfloNumConsts (
            TMinus _minus_,
            TRootbeerfloats _rootbeerfloats_
    )
    {
        SetMinus (_minus_);
        SetRootbeerfloats (_rootbeerfloats_);
    }

    public override Object Clone()
    {
        return new ANegfloNumConsts (
            (TMinus)CloneNode (_minus_),
            (TRootbeerfloats)CloneNode (_rootbeerfloats_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegfloNumConsts(this);
    }

    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public TRootbeerfloats GetRootbeerfloats ()
    {
        return _rootbeerfloats_;
    }

    public void SetRootbeerfloats (TRootbeerfloats node)
    {
        if(_rootbeerfloats_ != null)
        {
            _rootbeerfloats_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rootbeerfloats_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_minus_)
            + ToString (_rootbeerfloats_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _rootbeerfloats_ == child )
        {
            _rootbeerfloats_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _rootbeerfloats_ == oldChild )
        {
            SetRootbeerfloats ((TRootbeerfloats) newChild);
            return;
        }
    }

}
public sealed class AVarAssign : PAssign
{
    private TVarNames _var_names_;
    private TAssignments _assignments_;
    private PExpressLogic _express_logic_;
    private TLineEnder _line_ender_;

    public AVarAssign ()
    {
    }

    public AVarAssign (
            TVarNames _var_names_,
            TAssignments _assignments_,
            PExpressLogic _express_logic_,
            TLineEnder _line_ender_
    )
    {
        SetVarNames (_var_names_);
        SetAssignments (_assignments_);
        SetExpressLogic (_express_logic_);
        SetLineEnder (_line_ender_);
    }

    public override Object Clone()
    {
        return new AVarAssign (
            (TVarNames)CloneNode (_var_names_),
            (TAssignments)CloneNode (_assignments_),
            (PExpressLogic)CloneNode (_express_logic_),
            (TLineEnder)CloneNode (_line_ender_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVarAssign(this);
    }

    public TVarNames GetVarNames ()
    {
        return _var_names_;
    }

    public void SetVarNames (TVarNames node)
    {
        if(_var_names_ != null)
        {
            _var_names_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_names_ = node;
    }
    public TAssignments GetAssignments ()
    {
        return _assignments_;
    }

    public void SetAssignments (TAssignments node)
    {
        if(_assignments_ != null)
        {
            _assignments_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignments_ = node;
    }
    public PExpressLogic GetExpressLogic ()
    {
        return _express_logic_;
    }

    public void SetExpressLogic (PExpressLogic node)
    {
        if(_express_logic_ != null)
        {
            _express_logic_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _express_logic_ = node;
    }
    public TLineEnder GetLineEnder ()
    {
        return _line_ender_;
    }

    public void SetLineEnder (TLineEnder node)
    {
        if(_line_ender_ != null)
        {
            _line_ender_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _line_ender_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_names_)
            + ToString (_assignments_)
            + ToString (_express_logic_)
            + ToString (_line_ender_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_names_ == child )
        {
            _var_names_ = null;
            return;
        }
        if ( _assignments_ == child )
        {
            _assignments_ = null;
            return;
        }
        if ( _express_logic_ == child )
        {
            _express_logic_ = null;
            return;
        }
        if ( _line_ender_ == child )
        {
            _line_ender_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_names_ == oldChild )
        {
            SetVarNames ((TVarNames) newChild);
            return;
        }
        if ( _assignments_ == oldChild )
        {
            SetAssignments ((TAssignments) newChild);
            return;
        }
        if ( _express_logic_ == oldChild )
        {
            SetExpressLogic ((PExpressLogic) newChild);
            return;
        }
        if ( _line_ender_ == oldChild )
        {
            SetLineEnder ((TLineEnder) newChild);
            return;
        }
    }

}
public sealed class AArrAssign : PAssign
{
    private TVarNames _var_names_;
    private TLeftBracket _left_bracket_;
    private PExpressLogic _array_bound_;
    private TRightBracket _right_bracket_;
    private TAssignments _assignments_;
    private PExpressLogic _expression_;
    private TLineEnder _line_ender_;

    public AArrAssign ()
    {
    }

    public AArrAssign (
            TVarNames _var_names_,
            TLeftBracket _left_bracket_,
            PExpressLogic _array_bound_,
            TRightBracket _right_bracket_,
            TAssignments _assignments_,
            PExpressLogic _expression_,
            TLineEnder _line_ender_
    )
    {
        SetVarNames (_var_names_);
        SetLeftBracket (_left_bracket_);
        SetArrayBound (_array_bound_);
        SetRightBracket (_right_bracket_);
        SetAssignments (_assignments_);
        SetExpression (_expression_);
        SetLineEnder (_line_ender_);
    }

    public override Object Clone()
    {
        return new AArrAssign (
            (TVarNames)CloneNode (_var_names_),
            (TLeftBracket)CloneNode (_left_bracket_),
            (PExpressLogic)CloneNode (_array_bound_),
            (TRightBracket)CloneNode (_right_bracket_),
            (TAssignments)CloneNode (_assignments_),
            (PExpressLogic)CloneNode (_expression_),
            (TLineEnder)CloneNode (_line_ender_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrAssign(this);
    }

    public TVarNames GetVarNames ()
    {
        return _var_names_;
    }

    public void SetVarNames (TVarNames node)
    {
        if(_var_names_ != null)
        {
            _var_names_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_names_ = node;
    }
    public TLeftBracket GetLeftBracket ()
    {
        return _left_bracket_;
    }

    public void SetLeftBracket (TLeftBracket node)
    {
        if(_left_bracket_ != null)
        {
            _left_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_bracket_ = node;
    }
    public PExpressLogic GetArrayBound ()
    {
        return _array_bound_;
    }

    public void SetArrayBound (PExpressLogic node)
    {
        if(_array_bound_ != null)
        {
            _array_bound_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _array_bound_ = node;
    }
    public TRightBracket GetRightBracket ()
    {
        return _right_bracket_;
    }

    public void SetRightBracket (TRightBracket node)
    {
        if(_right_bracket_ != null)
        {
            _right_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_bracket_ = node;
    }
    public TAssignments GetAssignments ()
    {
        return _assignments_;
    }

    public void SetAssignments (TAssignments node)
    {
        if(_assignments_ != null)
        {
            _assignments_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignments_ = node;
    }
    public PExpressLogic GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpressLogic node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TLineEnder GetLineEnder ()
    {
        return _line_ender_;
    }

    public void SetLineEnder (TLineEnder node)
    {
        if(_line_ender_ != null)
        {
            _line_ender_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _line_ender_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_names_)
            + ToString (_left_bracket_)
            + ToString (_array_bound_)
            + ToString (_right_bracket_)
            + ToString (_assignments_)
            + ToString (_expression_)
            + ToString (_line_ender_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_names_ == child )
        {
            _var_names_ = null;
            return;
        }
        if ( _left_bracket_ == child )
        {
            _left_bracket_ = null;
            return;
        }
        if ( _array_bound_ == child )
        {
            _array_bound_ = null;
            return;
        }
        if ( _right_bracket_ == child )
        {
            _right_bracket_ = null;
            return;
        }
        if ( _assignments_ == child )
        {
            _assignments_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _line_ender_ == child )
        {
            _line_ender_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_names_ == oldChild )
        {
            SetVarNames ((TVarNames) newChild);
            return;
        }
        if ( _left_bracket_ == oldChild )
        {
            SetLeftBracket ((TLeftBracket) newChild);
            return;
        }
        if ( _array_bound_ == oldChild )
        {
            SetArrayBound ((PExpressLogic) newChild);
            return;
        }
        if ( _right_bracket_ == oldChild )
        {
            SetRightBracket ((TRightBracket) newChild);
            return;
        }
        if ( _assignments_ == oldChild )
        {
            SetAssignments ((TAssignments) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpressLogic) newChild);
            return;
        }
        if ( _line_ender_ == oldChild )
        {
            SetLineEnder ((TLineEnder) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
