/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  comp5210.analysis;

namespace comp5210.node {

public abstract class PProgram : Node
{
}

public abstract class PConstants : Node
{
}

public abstract class PMainProgram : Node
{
}

public abstract class PFormalParam : Node
{
}

public abstract class PStuff : Node
{
}

public abstract class PDeclarations : Node
{
}

public abstract class PDeclaration : Node
{
}

public abstract class PAssignments : Node
{
}

public abstract class PAssign : Node
{
}

public abstract class PIfState : Node
{
}

public abstract class PWhileState : Node
{
}

public abstract class PMethodCall : Node
{
}

public abstract class PMethods : Node
{
}


public sealed class AProgram : PProgram
{
    private PStuff _stuff_;

    public AProgram ()
    {
    }

    public AProgram (
            PStuff _stuff_
    )
    {
        SetStuff (_stuff_);
    }

    public override Object Clone()
    {
        return new AProgram (
            (PStuff)CloneNode (_stuff_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgram(this);
    }

    public PStuff GetStuff ()
    {
        return _stuff_;
    }

    public void SetStuff (PStuff node)
    {
        if(_stuff_ != null)
        {
            _stuff_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stuff_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_stuff_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _stuff_ == child )
        {
            _stuff_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _stuff_ == oldChild )
        {
            SetStuff ((PStuff) newChild);
            return;
        }
    }

}
public sealed class AIntegerConstants : PConstants
{
    private TVar _var_;
    private TAssignment _assignment_;
    private TInt _int_;
    private TSemicolon _semicolon_;
    private PConstants _constants_;

    public AIntegerConstants ()
    {
    }

    public AIntegerConstants (
            TVar _var_,
            TAssignment _assignment_,
            TInt _int_,
            TSemicolon _semicolon_,
            PConstants _constants_
    )
    {
        SetVar (_var_);
        SetAssignment (_assignment_);
        SetInt (_int_);
        SetSemicolon (_semicolon_);
        SetConstants (_constants_);
    }

    public override Object Clone()
    {
        return new AIntegerConstants (
            (TVar)CloneNode (_var_),
            (TAssignment)CloneNode (_assignment_),
            (TInt)CloneNode (_int_),
            (TSemicolon)CloneNode (_semicolon_),
            (PConstants)CloneNode (_constants_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntegerConstants(this);
    }

    public TVar GetVar ()
    {
        return _var_;
    }

    public void SetVar (TVar node)
    {
        if(_var_ != null)
        {
            _var_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_ = node;
    }
    public TAssignment GetAssignment ()
    {
        return _assignment_;
    }

    public void SetAssignment (TAssignment node)
    {
        if(_assignment_ != null)
        {
            _assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_ = node;
    }
    public TInt GetInt ()
    {
        return _int_;
    }

    public void SetInt (TInt node)
    {
        if(_int_ != null)
        {
            _int_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _int_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }
    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_)
            + ToString (_assignment_)
            + ToString (_int_)
            + ToString (_semicolon_)
            + ToString (_constants_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_ == child )
        {
            _var_ = null;
            return;
        }
        if ( _assignment_ == child )
        {
            _assignment_ = null;
            return;
        }
        if ( _int_ == child )
        {
            _int_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_ == oldChild )
        {
            SetVar ((TVar) newChild);
            return;
        }
        if ( _assignment_ == oldChild )
        {
            SetAssignment ((TAssignment) newChild);
            return;
        }
        if ( _int_ == oldChild )
        {
            SetInt ((TInt) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
    }

}
public sealed class AFloatConstants : PConstants
{
    private TVar _var_;
    private TAssignment _assignment_;
    private TFloat _float_;
    private TSemicolon _semicolon_;
    private PConstants _constants_;

    public AFloatConstants ()
    {
    }

    public AFloatConstants (
            TVar _var_,
            TAssignment _assignment_,
            TFloat _float_,
            TSemicolon _semicolon_,
            PConstants _constants_
    )
    {
        SetVar (_var_);
        SetAssignment (_assignment_);
        SetFloat (_float_);
        SetSemicolon (_semicolon_);
        SetConstants (_constants_);
    }

    public override Object Clone()
    {
        return new AFloatConstants (
            (TVar)CloneNode (_var_),
            (TAssignment)CloneNode (_assignment_),
            (TFloat)CloneNode (_float_),
            (TSemicolon)CloneNode (_semicolon_),
            (PConstants)CloneNode (_constants_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatConstants(this);
    }

    public TVar GetVar ()
    {
        return _var_;
    }

    public void SetVar (TVar node)
    {
        if(_var_ != null)
        {
            _var_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_ = node;
    }
    public TAssignment GetAssignment ()
    {
        return _assignment_;
    }

    public void SetAssignment (TAssignment node)
    {
        if(_assignment_ != null)
        {
            _assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_ = node;
    }
    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }
    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_)
            + ToString (_assignment_)
            + ToString (_float_)
            + ToString (_semicolon_)
            + ToString (_constants_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_ == child )
        {
            _var_ = null;
            return;
        }
        if ( _assignment_ == child )
        {
            _assignment_ = null;
            return;
        }
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_ == oldChild )
        {
            SetVar ((TVar) newChild);
            return;
        }
        if ( _assignment_ == oldChild )
        {
            SetAssignment ((TAssignment) newChild);
            return;
        }
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
    }

}
public sealed class AStringConstants : PConstants
{
    private TVar _var_;
    private TAssignment _assignment_;
    private TString _string_;
    private TSemicolon _semicolon_;
    private PConstants _constants_;

    public AStringConstants ()
    {
    }

    public AStringConstants (
            TVar _var_,
            TAssignment _assignment_,
            TString _string_,
            TSemicolon _semicolon_,
            PConstants _constants_
    )
    {
        SetVar (_var_);
        SetAssignment (_assignment_);
        SetString (_string_);
        SetSemicolon (_semicolon_);
        SetConstants (_constants_);
    }

    public override Object Clone()
    {
        return new AStringConstants (
            (TVar)CloneNode (_var_),
            (TAssignment)CloneNode (_assignment_),
            (TString)CloneNode (_string_),
            (TSemicolon)CloneNode (_semicolon_),
            (PConstants)CloneNode (_constants_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringConstants(this);
    }

    public TVar GetVar ()
    {
        return _var_;
    }

    public void SetVar (TVar node)
    {
        if(_var_ != null)
        {
            _var_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_ = node;
    }
    public TAssignment GetAssignment ()
    {
        return _assignment_;
    }

    public void SetAssignment (TAssignment node)
    {
        if(_assignment_ != null)
        {
            _assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_ = node;
    }
    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }
    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_)
            + ToString (_assignment_)
            + ToString (_string_)
            + ToString (_semicolon_)
            + ToString (_constants_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_ == child )
        {
            _var_ = null;
            return;
        }
        if ( _assignment_ == child )
        {
            _assignment_ = null;
            return;
        }
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_ == oldChild )
        {
            SetVar ((TVar) newChild);
            return;
        }
        if ( _assignment_ == oldChild )
        {
            SetAssignment ((TAssignment) newChild);
            return;
        }
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
    }

}
public sealed class ANoneConstants : PConstants
{


    public ANoneConstants (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneConstants (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneConstants(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AMainProgram : PMainProgram
{
    private TMain _main_;
    private TOpenParenthesis _open_parenthesis_;
    private PFormalParam _formal_param_;
    private TCloseParenthesis _close_parenthesis_;
    private TOpenBrace _open_brace_;
    private PStuff _stuff_;
    private TCloseBrace _close_brace_;

    public AMainProgram ()
    {
    }

    public AMainProgram (
            TMain _main_,
            TOpenParenthesis _open_parenthesis_,
            PFormalParam _formal_param_,
            TCloseParenthesis _close_parenthesis_,
            TOpenBrace _open_brace_,
            PStuff _stuff_,
            TCloseBrace _close_brace_
    )
    {
        SetMain (_main_);
        SetOpenParenthesis (_open_parenthesis_);
        SetFormalParam (_formal_param_);
        SetCloseParenthesis (_close_parenthesis_);
        SetOpenBrace (_open_brace_);
        SetStuff (_stuff_);
        SetCloseBrace (_close_brace_);
    }

    public override Object Clone()
    {
        return new AMainProgram (
            (TMain)CloneNode (_main_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (PFormalParam)CloneNode (_formal_param_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TOpenBrace)CloneNode (_open_brace_),
            (PStuff)CloneNode (_stuff_),
            (TCloseBrace)CloneNode (_close_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainProgram(this);
    }

    public TMain GetMain ()
    {
        return _main_;
    }

    public void SetMain (TMain node)
    {
        if(_main_ != null)
        {
            _main_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public PFormalParam GetFormalParam ()
    {
        return _formal_param_;
    }

    public void SetFormalParam (PFormalParam node)
    {
        if(_formal_param_ != null)
        {
            _formal_param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_param_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TOpenBrace GetOpenBrace ()
    {
        return _open_brace_;
    }

    public void SetOpenBrace (TOpenBrace node)
    {
        if(_open_brace_ != null)
        {
            _open_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_brace_ = node;
    }
    public PStuff GetStuff ()
    {
        return _stuff_;
    }

    public void SetStuff (PStuff node)
    {
        if(_stuff_ != null)
        {
            _stuff_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stuff_ = node;
    }
    public TCloseBrace GetCloseBrace ()
    {
        return _close_brace_;
    }

    public void SetCloseBrace (TCloseBrace node)
    {
        if(_close_brace_ != null)
        {
            _close_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_main_)
            + ToString (_open_parenthesis_)
            + ToString (_formal_param_)
            + ToString (_close_parenthesis_)
            + ToString (_open_brace_)
            + ToString (_stuff_)
            + ToString (_close_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _main_ == child )
        {
            _main_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _formal_param_ == child )
        {
            _formal_param_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _open_brace_ == child )
        {
            _open_brace_ = null;
            return;
        }
        if ( _stuff_ == child )
        {
            _stuff_ = null;
            return;
        }
        if ( _close_brace_ == child )
        {
            _close_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _main_ == oldChild )
        {
            SetMain ((TMain) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _formal_param_ == oldChild )
        {
            SetFormalParam ((PFormalParam) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _open_brace_ == oldChild )
        {
            SetOpenBrace ((TOpenBrace) newChild);
            return;
        }
        if ( _stuff_ == oldChild )
        {
            SetStuff ((PStuff) newChild);
            return;
        }
        if ( _close_brace_ == oldChild )
        {
            SetCloseBrace ((TCloseBrace) newChild);
            return;
        }
    }

}
public sealed class AFormalParam : PFormalParam
{
    private TVar _type_;
    private TVar _data_;
    private PFormalParam _formal_param_;

    public AFormalParam ()
    {
    }

    public AFormalParam (
            TVar _type_,
            TVar _data_,
            PFormalParam _formal_param_
    )
    {
        SetType (_type_);
        SetData (_data_);
        SetFormalParam (_formal_param_);
    }

    public override Object Clone()
    {
        return new AFormalParam (
            (TVar)CloneNode (_type_),
            (TVar)CloneNode (_data_),
            (PFormalParam)CloneNode (_formal_param_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFormalParam(this);
    }

    public TVar GetType ()
    {
        return _type_;
    }

    public void SetType (TVar node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TVar GetData ()
    {
        return _data_;
    }

    public void SetData (TVar node)
    {
        if(_data_ != null)
        {
            _data_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _data_ = node;
    }
    public PFormalParam GetFormalParam ()
    {
        return _formal_param_;
    }

    public void SetFormalParam (PFormalParam node)
    {
        if(_formal_param_ != null)
        {
            _formal_param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_param_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_data_)
            + ToString (_formal_param_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _data_ == child )
        {
            _data_ = null;
            return;
        }
        if ( _formal_param_ == child )
        {
            _formal_param_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TVar) newChild);
            return;
        }
        if ( _data_ == oldChild )
        {
            SetData ((TVar) newChild);
            return;
        }
        if ( _formal_param_ == oldChild )
        {
            SetFormalParam ((PFormalParam) newChild);
            return;
        }
    }

}
public sealed class ANoneFormalParam : PFormalParam
{


    public ANoneFormalParam (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneFormalParam (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneFormalParam(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AIfsStuff : PStuff
{
    private PIfState _if_state_;

    public AIfsStuff ()
    {
    }

    public AIfsStuff (
            PIfState _if_state_
    )
    {
        SetIfState (_if_state_);
    }

    public override Object Clone()
    {
        return new AIfsStuff (
            (PIfState)CloneNode (_if_state_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfsStuff(this);
    }

    public PIfState GetIfState ()
    {
        return _if_state_;
    }

    public void SetIfState (PIfState node)
    {
        if(_if_state_ != null)
        {
            _if_state_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_state_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_state_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_state_ == child )
        {
            _if_state_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_state_ == oldChild )
        {
            SetIfState ((PIfState) newChild);
            return;
        }
    }

}
public sealed class AWhilesStuff : PStuff
{
    private PWhileState _while_state_;

    public AWhilesStuff ()
    {
    }

    public AWhilesStuff (
            PWhileState _while_state_
    )
    {
        SetWhileState (_while_state_);
    }

    public override Object Clone()
    {
        return new AWhilesStuff (
            (PWhileState)CloneNode (_while_state_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhilesStuff(this);
    }

    public PWhileState GetWhileState ()
    {
        return _while_state_;
    }

    public void SetWhileState (PWhileState node)
    {
        if(_while_state_ != null)
        {
            _while_state_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_state_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_state_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_state_ == child )
        {
            _while_state_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_state_ == oldChild )
        {
            SetWhileState ((PWhileState) newChild);
            return;
        }
    }

}
public sealed class AMethodsStuff : PStuff
{
    private PMethodCall _method_call_;

    public AMethodsStuff ()
    {
    }

    public AMethodsStuff (
            PMethodCall _method_call_
    )
    {
        SetMethodCall (_method_call_);
    }

    public override Object Clone()
    {
        return new AMethodsStuff (
            (PMethodCall)CloneNode (_method_call_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMethodsStuff(this);
    }

    public PMethodCall GetMethodCall ()
    {
        return _method_call_;
    }

    public void SetMethodCall (PMethodCall node)
    {
        if(_method_call_ != null)
        {
            _method_call_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _method_call_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_method_call_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _method_call_ == child )
        {
            _method_call_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _method_call_ == oldChild )
        {
            SetMethodCall ((PMethodCall) newChild);
            return;
        }
    }

}
public sealed class ADeclsStuff : PStuff
{
    private PDeclarations _declarations_;

    public ADeclsStuff ()
    {
    }

    public ADeclsStuff (
            PDeclarations _declarations_
    )
    {
        SetDeclarations (_declarations_);
    }

    public override Object Clone()
    {
        return new ADeclsStuff (
            (PDeclarations)CloneNode (_declarations_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclsStuff(this);
    }

    public PDeclarations GetDeclarations ()
    {
        return _declarations_;
    }

    public void SetDeclarations (PDeclarations node)
    {
        if(_declarations_ != null)
        {
            _declarations_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declarations_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declarations_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declarations_ == child )
        {
            _declarations_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declarations_ == oldChild )
        {
            SetDeclarations ((PDeclarations) newChild);
            return;
        }
    }

}
public sealed class AAssignsStuff : PStuff
{
    private PAssignments _assignments_;

    public AAssignsStuff ()
    {
    }

    public AAssignsStuff (
            PAssignments _assignments_
    )
    {
        SetAssignments (_assignments_);
    }

    public override Object Clone()
    {
        return new AAssignsStuff (
            (PAssignments)CloneNode (_assignments_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignsStuff(this);
    }

    public PAssignments GetAssignments ()
    {
        return _assignments_;
    }

    public void SetAssignments (PAssignments node)
    {
        if(_assignments_ != null)
        {
            _assignments_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignments_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assignments_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assignments_ == child )
        {
            _assignments_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assignments_ == oldChild )
        {
            SetAssignments ((PAssignments) newChild);
            return;
        }
    }

}
public sealed class ANoneStuff : PStuff
{


    public ANoneStuff (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneStuff (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneStuff(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ARecursiveDeclarations : PDeclarations
{
    private PDeclaration _declaration_;
    private PDeclarations _declarations_;

    public ARecursiveDeclarations ()
    {
    }

    public ARecursiveDeclarations (
            PDeclaration _declaration_,
            PDeclarations _declarations_
    )
    {
        SetDeclaration (_declaration_);
        SetDeclarations (_declarations_);
    }

    public override Object Clone()
    {
        return new ARecursiveDeclarations (
            (PDeclaration)CloneNode (_declaration_),
            (PDeclarations)CloneNode (_declarations_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARecursiveDeclarations(this);
    }

    public PDeclaration GetDeclaration ()
    {
        return _declaration_;
    }

    public void SetDeclaration (PDeclaration node)
    {
        if(_declaration_ != null)
        {
            _declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declaration_ = node;
    }
    public PDeclarations GetDeclarations ()
    {
        return _declarations_;
    }

    public void SetDeclarations (PDeclarations node)
    {
        if(_declarations_ != null)
        {
            _declarations_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declarations_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declaration_)
            + ToString (_declarations_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declaration_ == child )
        {
            _declaration_ = null;
            return;
        }
        if ( _declarations_ == child )
        {
            _declarations_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declaration_ == oldChild )
        {
            SetDeclaration ((PDeclaration) newChild);
            return;
        }
        if ( _declarations_ == oldChild )
        {
            SetDeclarations ((PDeclarations) newChild);
            return;
        }
    }

}
public sealed class ANotDeclarations : PDeclarations
{
    private PDeclaration _declaration_;

    public ANotDeclarations ()
    {
    }

    public ANotDeclarations (
            PDeclaration _declaration_
    )
    {
        SetDeclaration (_declaration_);
    }

    public override Object Clone()
    {
        return new ANotDeclarations (
            (PDeclaration)CloneNode (_declaration_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotDeclarations(this);
    }

    public PDeclaration GetDeclaration ()
    {
        return _declaration_;
    }

    public void SetDeclaration (PDeclaration node)
    {
        if(_declaration_ != null)
        {
            _declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declaration_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declaration_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declaration_ == child )
        {
            _declaration_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declaration_ == oldChild )
        {
            SetDeclaration ((PDeclaration) newChild);
            return;
        }
    }

}
public sealed class ASide1Declaration : PDeclaration
{
    private TVar _data_;
    private TVar _var_;
    private TSemicolon _semicolon_;

    public ASide1Declaration ()
    {
    }

    public ASide1Declaration (
            TVar _data_,
            TVar _var_,
            TSemicolon _semicolon_
    )
    {
        SetData (_data_);
        SetVar (_var_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new ASide1Declaration (
            (TVar)CloneNode (_data_),
            (TVar)CloneNode (_var_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide1Declaration(this);
    }

    public TVar GetData ()
    {
        return _data_;
    }

    public void SetData (TVar node)
    {
        if(_data_ != null)
        {
            _data_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _data_ = node;
    }
    public TVar GetVar ()
    {
        return _var_;
    }

    public void SetVar (TVar node)
    {
        if(_var_ != null)
        {
            _var_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_data_)
            + ToString (_var_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _data_ == child )
        {
            _data_ = null;
            return;
        }
        if ( _var_ == child )
        {
            _var_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _data_ == oldChild )
        {
            SetData ((TVar) newChild);
            return;
        }
        if ( _var_ == oldChild )
        {
            SetVar ((TVar) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class ASide2Declaration : PDeclaration
{
    private TVar _data_;
    private TVar _var1_;
    private TOpenBracket _open_bracket_;
    private TInt _int_;
    private TCloseBracket _close_bracket_;
    private TSemicolon _semicolon_;

    public ASide2Declaration ()
    {
    }

    public ASide2Declaration (
            TVar _data_,
            TVar _var1_,
            TOpenBracket _open_bracket_,
            TInt _int_,
            TCloseBracket _close_bracket_,
            TSemicolon _semicolon_
    )
    {
        SetData (_data_);
        SetVar1 (_var1_);
        SetOpenBracket (_open_bracket_);
        SetInt (_int_);
        SetCloseBracket (_close_bracket_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new ASide2Declaration (
            (TVar)CloneNode (_data_),
            (TVar)CloneNode (_var1_),
            (TOpenBracket)CloneNode (_open_bracket_),
            (TInt)CloneNode (_int_),
            (TCloseBracket)CloneNode (_close_bracket_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide2Declaration(this);
    }

    public TVar GetData ()
    {
        return _data_;
    }

    public void SetData (TVar node)
    {
        if(_data_ != null)
        {
            _data_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _data_ = node;
    }
    public TVar GetVar1 ()
    {
        return _var1_;
    }

    public void SetVar1 (TVar node)
    {
        if(_var1_ != null)
        {
            _var1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var1_ = node;
    }
    public TOpenBracket GetOpenBracket ()
    {
        return _open_bracket_;
    }

    public void SetOpenBracket (TOpenBracket node)
    {
        if(_open_bracket_ != null)
        {
            _open_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_bracket_ = node;
    }
    public TInt GetInt ()
    {
        return _int_;
    }

    public void SetInt (TInt node)
    {
        if(_int_ != null)
        {
            _int_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _int_ = node;
    }
    public TCloseBracket GetCloseBracket ()
    {
        return _close_bracket_;
    }

    public void SetCloseBracket (TCloseBracket node)
    {
        if(_close_bracket_ != null)
        {
            _close_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_bracket_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_data_)
            + ToString (_var1_)
            + ToString (_open_bracket_)
            + ToString (_int_)
            + ToString (_close_bracket_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _data_ == child )
        {
            _data_ = null;
            return;
        }
        if ( _var1_ == child )
        {
            _var1_ = null;
            return;
        }
        if ( _open_bracket_ == child )
        {
            _open_bracket_ = null;
            return;
        }
        if ( _int_ == child )
        {
            _int_ = null;
            return;
        }
        if ( _close_bracket_ == child )
        {
            _close_bracket_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _data_ == oldChild )
        {
            SetData ((TVar) newChild);
            return;
        }
        if ( _var1_ == oldChild )
        {
            SetVar1 ((TVar) newChild);
            return;
        }
        if ( _open_bracket_ == oldChild )
        {
            SetOpenBracket ((TOpenBracket) newChild);
            return;
        }
        if ( _int_ == oldChild )
        {
            SetInt ((TInt) newChild);
            return;
        }
        if ( _close_bracket_ == oldChild )
        {
            SetCloseBracket ((TCloseBracket) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class ARecursiveAssignments : PAssignments
{
    private PAssign _assign_;
    private PAssignments _assignments_;

    public ARecursiveAssignments ()
    {
    }

    public ARecursiveAssignments (
            PAssign _assign_,
            PAssignments _assignments_
    )
    {
        SetAssign (_assign_);
        SetAssignments (_assignments_);
    }

    public override Object Clone()
    {
        return new ARecursiveAssignments (
            (PAssign)CloneNode (_assign_),
            (PAssignments)CloneNode (_assignments_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARecursiveAssignments(this);
    }

    public PAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (PAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PAssignments GetAssignments ()
    {
        return _assignments_;
    }

    public void SetAssignments (PAssignments node)
    {
        if(_assignments_ != null)
        {
            _assignments_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignments_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assign_)
            + ToString (_assignments_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _assignments_ == child )
        {
            _assignments_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assign_ == oldChild )
        {
            SetAssign ((PAssign) newChild);
            return;
        }
        if ( _assignments_ == oldChild )
        {
            SetAssignments ((PAssignments) newChild);
            return;
        }
    }

}
public sealed class ANotAssignments : PAssignments
{
    private PAssign _assign_;

    public ANotAssignments ()
    {
    }

    public ANotAssignments (
            PAssign _assign_
    )
    {
        SetAssign (_assign_);
    }

    public override Object Clone()
    {
        return new ANotAssignments (
            (PAssign)CloneNode (_assign_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotAssignments(this);
    }

    public PAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (PAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assign_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assign_ == oldChild )
        {
            SetAssign ((PAssign) newChild);
            return;
        }
    }

}
public sealed class AIntAssign : PAssign
{
    private TVar _var_;
    private TAssignment _assignment_;
    private TInt _int_;
    private TSemicolon _semicolon_;

    public AIntAssign ()
    {
    }

    public AIntAssign (
            TVar _var_,
            TAssignment _assignment_,
            TInt _int_,
            TSemicolon _semicolon_
    )
    {
        SetVar (_var_);
        SetAssignment (_assignment_);
        SetInt (_int_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AIntAssign (
            (TVar)CloneNode (_var_),
            (TAssignment)CloneNode (_assignment_),
            (TInt)CloneNode (_int_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntAssign(this);
    }

    public TVar GetVar ()
    {
        return _var_;
    }

    public void SetVar (TVar node)
    {
        if(_var_ != null)
        {
            _var_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_ = node;
    }
    public TAssignment GetAssignment ()
    {
        return _assignment_;
    }

    public void SetAssignment (TAssignment node)
    {
        if(_assignment_ != null)
        {
            _assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_ = node;
    }
    public TInt GetInt ()
    {
        return _int_;
    }

    public void SetInt (TInt node)
    {
        if(_int_ != null)
        {
            _int_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _int_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_)
            + ToString (_assignment_)
            + ToString (_int_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_ == child )
        {
            _var_ = null;
            return;
        }
        if ( _assignment_ == child )
        {
            _assignment_ = null;
            return;
        }
        if ( _int_ == child )
        {
            _int_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_ == oldChild )
        {
            SetVar ((TVar) newChild);
            return;
        }
        if ( _assignment_ == oldChild )
        {
            SetAssignment ((TAssignment) newChild);
            return;
        }
        if ( _int_ == oldChild )
        {
            SetInt ((TInt) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AFloatAssign : PAssign
{
    private TVar _var_;
    private TAssignment _assignment_;
    private TFloat _float_;
    private TSemicolon _semicolon_;

    public AFloatAssign ()
    {
    }

    public AFloatAssign (
            TVar _var_,
            TAssignment _assignment_,
            TFloat _float_,
            TSemicolon _semicolon_
    )
    {
        SetVar (_var_);
        SetAssignment (_assignment_);
        SetFloat (_float_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AFloatAssign (
            (TVar)CloneNode (_var_),
            (TAssignment)CloneNode (_assignment_),
            (TFloat)CloneNode (_float_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatAssign(this);
    }

    public TVar GetVar ()
    {
        return _var_;
    }

    public void SetVar (TVar node)
    {
        if(_var_ != null)
        {
            _var_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_ = node;
    }
    public TAssignment GetAssignment ()
    {
        return _assignment_;
    }

    public void SetAssignment (TAssignment node)
    {
        if(_assignment_ != null)
        {
            _assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_ = node;
    }
    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_)
            + ToString (_assignment_)
            + ToString (_float_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_ == child )
        {
            _var_ = null;
            return;
        }
        if ( _assignment_ == child )
        {
            _assignment_ = null;
            return;
        }
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_ == oldChild )
        {
            SetVar ((TVar) newChild);
            return;
        }
        if ( _assignment_ == oldChild )
        {
            SetAssignment ((TAssignment) newChild);
            return;
        }
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AStringAssign : PAssign
{
    private TVar _var_;
    private TAssignment _assignment_;
    private TString _string_;
    private TSemicolon _semicolon_;

    public AStringAssign ()
    {
    }

    public AStringAssign (
            TVar _var_,
            TAssignment _assignment_,
            TString _string_,
            TSemicolon _semicolon_
    )
    {
        SetVar (_var_);
        SetAssignment (_assignment_);
        SetString (_string_);
        SetSemicolon (_semicolon_);
    }

    public override Object Clone()
    {
        return new AStringAssign (
            (TVar)CloneNode (_var_),
            (TAssignment)CloneNode (_assignment_),
            (TString)CloneNode (_string_),
            (TSemicolon)CloneNode (_semicolon_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringAssign(this);
    }

    public TVar GetVar ()
    {
        return _var_;
    }

    public void SetVar (TVar node)
    {
        if(_var_ != null)
        {
            _var_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_ = node;
    }
    public TAssignment GetAssignment ()
    {
        return _assignment_;
    }

    public void SetAssignment (TAssignment node)
    {
        if(_assignment_ != null)
        {
            _assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_ = node;
    }
    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }
    public TSemicolon GetSemicolon ()
    {
        return _semicolon_;
    }

    public void SetSemicolon (TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _semicolon_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_)
            + ToString (_assignment_)
            + ToString (_string_)
            + ToString (_semicolon_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_ == child )
        {
            _var_ = null;
            return;
        }
        if ( _assignment_ == child )
        {
            _assignment_ = null;
            return;
        }
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
        if ( _semicolon_ == child )
        {
            _semicolon_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_ == oldChild )
        {
            SetVar ((TVar) newChild);
            return;
        }
        if ( _assignment_ == oldChild )
        {
            SetAssignment ((TAssignment) newChild);
            return;
        }
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
        if ( _semicolon_ == oldChild )
        {
            SetSemicolon ((TSemicolon) newChild);
            return;
        }
    }

}
public sealed class AIfState : PIfState
{
    private TIf _if_;
    private TOpenParenthesis _open_parenthesis_;
    private TInt _int_;
    private TCloseParenthesis _close_parenthesis_;
    private TOpenBrace _open_brace_;
    private PStuff _stuff_;
    private TCloseBrace _close_brace_;

    public AIfState ()
    {
    }

    public AIfState (
            TIf _if_,
            TOpenParenthesis _open_parenthesis_,
            TInt _int_,
            TCloseParenthesis _close_parenthesis_,
            TOpenBrace _open_brace_,
            PStuff _stuff_,
            TCloseBrace _close_brace_
    )
    {
        SetIf (_if_);
        SetOpenParenthesis (_open_parenthesis_);
        SetInt (_int_);
        SetCloseParenthesis (_close_parenthesis_);
        SetOpenBrace (_open_brace_);
        SetStuff (_stuff_);
        SetCloseBrace (_close_brace_);
    }

    public override Object Clone()
    {
        return new AIfState (
            (TIf)CloneNode (_if_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (TInt)CloneNode (_int_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TOpenBrace)CloneNode (_open_brace_),
            (PStuff)CloneNode (_stuff_),
            (TCloseBrace)CloneNode (_close_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfState(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public TInt GetInt ()
    {
        return _int_;
    }

    public void SetInt (TInt node)
    {
        if(_int_ != null)
        {
            _int_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _int_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TOpenBrace GetOpenBrace ()
    {
        return _open_brace_;
    }

    public void SetOpenBrace (TOpenBrace node)
    {
        if(_open_brace_ != null)
        {
            _open_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_brace_ = node;
    }
    public PStuff GetStuff ()
    {
        return _stuff_;
    }

    public void SetStuff (PStuff node)
    {
        if(_stuff_ != null)
        {
            _stuff_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stuff_ = node;
    }
    public TCloseBrace GetCloseBrace ()
    {
        return _close_brace_;
    }

    public void SetCloseBrace (TCloseBrace node)
    {
        if(_close_brace_ != null)
        {
            _close_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_open_parenthesis_)
            + ToString (_int_)
            + ToString (_close_parenthesis_)
            + ToString (_open_brace_)
            + ToString (_stuff_)
            + ToString (_close_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _int_ == child )
        {
            _int_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _open_brace_ == child )
        {
            _open_brace_ = null;
            return;
        }
        if ( _stuff_ == child )
        {
            _stuff_ = null;
            return;
        }
        if ( _close_brace_ == child )
        {
            _close_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _int_ == oldChild )
        {
            SetInt ((TInt) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _open_brace_ == oldChild )
        {
            SetOpenBrace ((TOpenBrace) newChild);
            return;
        }
        if ( _stuff_ == oldChild )
        {
            SetStuff ((PStuff) newChild);
            return;
        }
        if ( _close_brace_ == oldChild )
        {
            SetCloseBrace ((TCloseBrace) newChild);
            return;
        }
    }

}
public sealed class AWhileState : PWhileState
{
    private TWhile _while_;
    private TOpenParenthesis _open_parenthesis_;
    private TInt _int_;
    private TCloseParenthesis _close_parenthesis_;
    private TOpenBrace _open_brace_;
    private PStuff _stuff_;
    private TCloseBrace _close_brace_;

    public AWhileState ()
    {
    }

    public AWhileState (
            TWhile _while_,
            TOpenParenthesis _open_parenthesis_,
            TInt _int_,
            TCloseParenthesis _close_parenthesis_,
            TOpenBrace _open_brace_,
            PStuff _stuff_,
            TCloseBrace _close_brace_
    )
    {
        SetWhile (_while_);
        SetOpenParenthesis (_open_parenthesis_);
        SetInt (_int_);
        SetCloseParenthesis (_close_parenthesis_);
        SetOpenBrace (_open_brace_);
        SetStuff (_stuff_);
        SetCloseBrace (_close_brace_);
    }

    public override Object Clone()
    {
        return new AWhileState (
            (TWhile)CloneNode (_while_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (TInt)CloneNode (_int_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TOpenBrace)CloneNode (_open_brace_),
            (PStuff)CloneNode (_stuff_),
            (TCloseBrace)CloneNode (_close_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileState(this);
    }

    public TWhile GetWhile ()
    {
        return _while_;
    }

    public void SetWhile (TWhile node)
    {
        if(_while_ != null)
        {
            _while_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public TInt GetInt ()
    {
        return _int_;
    }

    public void SetInt (TInt node)
    {
        if(_int_ != null)
        {
            _int_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _int_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TOpenBrace GetOpenBrace ()
    {
        return _open_brace_;
    }

    public void SetOpenBrace (TOpenBrace node)
    {
        if(_open_brace_ != null)
        {
            _open_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_brace_ = node;
    }
    public PStuff GetStuff ()
    {
        return _stuff_;
    }

    public void SetStuff (PStuff node)
    {
        if(_stuff_ != null)
        {
            _stuff_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stuff_ = node;
    }
    public TCloseBrace GetCloseBrace ()
    {
        return _close_brace_;
    }

    public void SetCloseBrace (TCloseBrace node)
    {
        if(_close_brace_ != null)
        {
            _close_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_)
            + ToString (_open_parenthesis_)
            + ToString (_int_)
            + ToString (_close_parenthesis_)
            + ToString (_open_brace_)
            + ToString (_stuff_)
            + ToString (_close_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_ == child )
        {
            _while_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _int_ == child )
        {
            _int_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _open_brace_ == child )
        {
            _open_brace_ = null;
            return;
        }
        if ( _stuff_ == child )
        {
            _stuff_ = null;
            return;
        }
        if ( _close_brace_ == child )
        {
            _close_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_ == oldChild )
        {
            SetWhile ((TWhile) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _int_ == oldChild )
        {
            SetInt ((TInt) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _open_brace_ == oldChild )
        {
            SetOpenBrace ((TOpenBrace) newChild);
            return;
        }
        if ( _stuff_ == oldChild )
        {
            SetStuff ((PStuff) newChild);
            return;
        }
        if ( _close_brace_ == oldChild )
        {
            SetCloseBrace ((TCloseBrace) newChild);
            return;
        }
    }

}
public sealed class AMethodCall : PMethodCall
{
    private TVar _var_;
    private TOpenParenthesis _open_parenthesis_;
    private PFormalParam _formal_param_;
    private TCloseParenthesis _close_parenthesis_;
    private TOpenBrace _open_brace_;
    private PStuff _stuff_;
    private TCloseBrace _close_brace_;

    public AMethodCall ()
    {
    }

    public AMethodCall (
            TVar _var_,
            TOpenParenthesis _open_parenthesis_,
            PFormalParam _formal_param_,
            TCloseParenthesis _close_parenthesis_,
            TOpenBrace _open_brace_,
            PStuff _stuff_,
            TCloseBrace _close_brace_
    )
    {
        SetVar (_var_);
        SetOpenParenthesis (_open_parenthesis_);
        SetFormalParam (_formal_param_);
        SetCloseParenthesis (_close_parenthesis_);
        SetOpenBrace (_open_brace_);
        SetStuff (_stuff_);
        SetCloseBrace (_close_brace_);
    }

    public override Object Clone()
    {
        return new AMethodCall (
            (TVar)CloneNode (_var_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (PFormalParam)CloneNode (_formal_param_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TOpenBrace)CloneNode (_open_brace_),
            (PStuff)CloneNode (_stuff_),
            (TCloseBrace)CloneNode (_close_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMethodCall(this);
    }

    public TVar GetVar ()
    {
        return _var_;
    }

    public void SetVar (TVar node)
    {
        if(_var_ != null)
        {
            _var_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public PFormalParam GetFormalParam ()
    {
        return _formal_param_;
    }

    public void SetFormalParam (PFormalParam node)
    {
        if(_formal_param_ != null)
        {
            _formal_param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_param_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TOpenBrace GetOpenBrace ()
    {
        return _open_brace_;
    }

    public void SetOpenBrace (TOpenBrace node)
    {
        if(_open_brace_ != null)
        {
            _open_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_brace_ = node;
    }
    public PStuff GetStuff ()
    {
        return _stuff_;
    }

    public void SetStuff (PStuff node)
    {
        if(_stuff_ != null)
        {
            _stuff_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stuff_ = node;
    }
    public TCloseBrace GetCloseBrace ()
    {
        return _close_brace_;
    }

    public void SetCloseBrace (TCloseBrace node)
    {
        if(_close_brace_ != null)
        {
            _close_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var_)
            + ToString (_open_parenthesis_)
            + ToString (_formal_param_)
            + ToString (_close_parenthesis_)
            + ToString (_open_brace_)
            + ToString (_stuff_)
            + ToString (_close_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var_ == child )
        {
            _var_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _formal_param_ == child )
        {
            _formal_param_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _open_brace_ == child )
        {
            _open_brace_ = null;
            return;
        }
        if ( _stuff_ == child )
        {
            _stuff_ = null;
            return;
        }
        if ( _close_brace_ == child )
        {
            _close_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var_ == oldChild )
        {
            SetVar ((TVar) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _formal_param_ == oldChild )
        {
            SetFormalParam ((PFormalParam) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _open_brace_ == oldChild )
        {
            SetOpenBrace ((TOpenBrace) newChild);
            return;
        }
        if ( _stuff_ == oldChild )
        {
            SetStuff ((PStuff) newChild);
            return;
        }
        if ( _close_brace_ == oldChild )
        {
            SetCloseBrace ((TCloseBrace) newChild);
            return;
        }
    }

}
public sealed class ASide1Methods : PMethods
{
    private TPublic _public_;
    private TVar _var_;
    private TOpenParenthesis _open_parenthesis_;
    private PFormalParam _formal_param_;
    private TCloseParenthesis _close_parenthesis_;
    private TOpenBracket _open_bracket_;
    private PStuff _stuff_;
    private TCloseBracket _close_bracket_;

    public ASide1Methods ()
    {
    }

    public ASide1Methods (
            TPublic _public_,
            TVar _var_,
            TOpenParenthesis _open_parenthesis_,
            PFormalParam _formal_param_,
            TCloseParenthesis _close_parenthesis_,
            TOpenBracket _open_bracket_,
            PStuff _stuff_,
            TCloseBracket _close_bracket_
    )
    {
        SetPublic (_public_);
        SetVar (_var_);
        SetOpenParenthesis (_open_parenthesis_);
        SetFormalParam (_formal_param_);
        SetCloseParenthesis (_close_parenthesis_);
        SetOpenBracket (_open_bracket_);
        SetStuff (_stuff_);
        SetCloseBracket (_close_bracket_);
    }

    public override Object Clone()
    {
        return new ASide1Methods (
            (TPublic)CloneNode (_public_),
            (TVar)CloneNode (_var_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (PFormalParam)CloneNode (_formal_param_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TOpenBracket)CloneNode (_open_bracket_),
            (PStuff)CloneNode (_stuff_),
            (TCloseBracket)CloneNode (_close_bracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide1Methods(this);
    }

    public TPublic GetPublic ()
    {
        return _public_;
    }

    public void SetPublic (TPublic node)
    {
        if(_public_ != null)
        {
            _public_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _public_ = node;
    }
    public TVar GetVar ()
    {
        return _var_;
    }

    public void SetVar (TVar node)
    {
        if(_var_ != null)
        {
            _var_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public PFormalParam GetFormalParam ()
    {
        return _formal_param_;
    }

    public void SetFormalParam (PFormalParam node)
    {
        if(_formal_param_ != null)
        {
            _formal_param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_param_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TOpenBracket GetOpenBracket ()
    {
        return _open_bracket_;
    }

    public void SetOpenBracket (TOpenBracket node)
    {
        if(_open_bracket_ != null)
        {
            _open_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_bracket_ = node;
    }
    public PStuff GetStuff ()
    {
        return _stuff_;
    }

    public void SetStuff (PStuff node)
    {
        if(_stuff_ != null)
        {
            _stuff_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stuff_ = node;
    }
    public TCloseBracket GetCloseBracket ()
    {
        return _close_bracket_;
    }

    public void SetCloseBracket (TCloseBracket node)
    {
        if(_close_bracket_ != null)
        {
            _close_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_bracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_public_)
            + ToString (_var_)
            + ToString (_open_parenthesis_)
            + ToString (_formal_param_)
            + ToString (_close_parenthesis_)
            + ToString (_open_bracket_)
            + ToString (_stuff_)
            + ToString (_close_bracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _public_ == child )
        {
            _public_ = null;
            return;
        }
        if ( _var_ == child )
        {
            _var_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _formal_param_ == child )
        {
            _formal_param_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _open_bracket_ == child )
        {
            _open_bracket_ = null;
            return;
        }
        if ( _stuff_ == child )
        {
            _stuff_ = null;
            return;
        }
        if ( _close_bracket_ == child )
        {
            _close_bracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _public_ == oldChild )
        {
            SetPublic ((TPublic) newChild);
            return;
        }
        if ( _var_ == oldChild )
        {
            SetVar ((TVar) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _formal_param_ == oldChild )
        {
            SetFormalParam ((PFormalParam) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _open_bracket_ == oldChild )
        {
            SetOpenBracket ((TOpenBracket) newChild);
            return;
        }
        if ( _stuff_ == oldChild )
        {
            SetStuff ((PStuff) newChild);
            return;
        }
        if ( _close_bracket_ == oldChild )
        {
            SetCloseBracket ((TCloseBracket) newChild);
            return;
        }
    }

}
public sealed class ASide2Methods : PMethods
{
    private TPublic _public_;
    private TStatic _static_;
    private TOpenParenthesis _open_parenthesis_;
    private PFormalParam _formal_param_;
    private TCloseParenthesis _close_parenthesis_;
    private TOpenBracket _open_bracket_;
    private PStuff _stuff_;
    private TCloseBracket _close_bracket_;

    public ASide2Methods ()
    {
    }

    public ASide2Methods (
            TPublic _public_,
            TStatic _static_,
            TOpenParenthesis _open_parenthesis_,
            PFormalParam _formal_param_,
            TCloseParenthesis _close_parenthesis_,
            TOpenBracket _open_bracket_,
            PStuff _stuff_,
            TCloseBracket _close_bracket_
    )
    {
        SetPublic (_public_);
        SetStatic (_static_);
        SetOpenParenthesis (_open_parenthesis_);
        SetFormalParam (_formal_param_);
        SetCloseParenthesis (_close_parenthesis_);
        SetOpenBracket (_open_bracket_);
        SetStuff (_stuff_);
        SetCloseBracket (_close_bracket_);
    }

    public override Object Clone()
    {
        return new ASide2Methods (
            (TPublic)CloneNode (_public_),
            (TStatic)CloneNode (_static_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (PFormalParam)CloneNode (_formal_param_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TOpenBracket)CloneNode (_open_bracket_),
            (PStuff)CloneNode (_stuff_),
            (TCloseBracket)CloneNode (_close_bracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide2Methods(this);
    }

    public TPublic GetPublic ()
    {
        return _public_;
    }

    public void SetPublic (TPublic node)
    {
        if(_public_ != null)
        {
            _public_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _public_ = node;
    }
    public TStatic GetStatic ()
    {
        return _static_;
    }

    public void SetStatic (TStatic node)
    {
        if(_static_ != null)
        {
            _static_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _static_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public PFormalParam GetFormalParam ()
    {
        return _formal_param_;
    }

    public void SetFormalParam (PFormalParam node)
    {
        if(_formal_param_ != null)
        {
            _formal_param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_param_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TOpenBracket GetOpenBracket ()
    {
        return _open_bracket_;
    }

    public void SetOpenBracket (TOpenBracket node)
    {
        if(_open_bracket_ != null)
        {
            _open_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_bracket_ = node;
    }
    public PStuff GetStuff ()
    {
        return _stuff_;
    }

    public void SetStuff (PStuff node)
    {
        if(_stuff_ != null)
        {
            _stuff_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stuff_ = node;
    }
    public TCloseBracket GetCloseBracket ()
    {
        return _close_bracket_;
    }

    public void SetCloseBracket (TCloseBracket node)
    {
        if(_close_bracket_ != null)
        {
            _close_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_bracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_public_)
            + ToString (_static_)
            + ToString (_open_parenthesis_)
            + ToString (_formal_param_)
            + ToString (_close_parenthesis_)
            + ToString (_open_bracket_)
            + ToString (_stuff_)
            + ToString (_close_bracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _public_ == child )
        {
            _public_ = null;
            return;
        }
        if ( _static_ == child )
        {
            _static_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _formal_param_ == child )
        {
            _formal_param_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _open_bracket_ == child )
        {
            _open_bracket_ = null;
            return;
        }
        if ( _stuff_ == child )
        {
            _stuff_ = null;
            return;
        }
        if ( _close_bracket_ == child )
        {
            _close_bracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _public_ == oldChild )
        {
            SetPublic ((TPublic) newChild);
            return;
        }
        if ( _static_ == oldChild )
        {
            SetStatic ((TStatic) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _formal_param_ == oldChild )
        {
            SetFormalParam ((PFormalParam) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _open_bracket_ == oldChild )
        {
            SetOpenBracket ((TOpenBracket) newChild);
            return;
        }
        if ( _stuff_ == oldChild )
        {
            SetStuff ((PStuff) newChild);
            return;
        }
        if ( _close_bracket_ == oldChild )
        {
            SetCloseBracket ((TCloseBracket) newChild);
            return;
        }
    }

}
public sealed class ASide3Methods : PMethods
{
    private TPublic _public_;
    private TStatic _static_;
    private TVar _type_;
    private TOpenParenthesis _open_parenthesis_;
    private TCloseParenthesis _close_parenthesis_;
    private TOpenBracket _open_bracket_;
    private PStuff _stuff_;
    private TReturn _return_;
    private TCloseBracket _close_bracket_;

    public ASide3Methods ()
    {
    }

    public ASide3Methods (
            TPublic _public_,
            TStatic _static_,
            TVar _type_,
            TOpenParenthesis _open_parenthesis_,
            TCloseParenthesis _close_parenthesis_,
            TOpenBracket _open_bracket_,
            PStuff _stuff_,
            TReturn _return_,
            TCloseBracket _close_bracket_
    )
    {
        SetPublic (_public_);
        SetStatic (_static_);
        SetType (_type_);
        SetOpenParenthesis (_open_parenthesis_);
        SetCloseParenthesis (_close_parenthesis_);
        SetOpenBracket (_open_bracket_);
        SetStuff (_stuff_);
        SetReturn (_return_);
        SetCloseBracket (_close_bracket_);
    }

    public override Object Clone()
    {
        return new ASide3Methods (
            (TPublic)CloneNode (_public_),
            (TStatic)CloneNode (_static_),
            (TVar)CloneNode (_type_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TOpenBracket)CloneNode (_open_bracket_),
            (PStuff)CloneNode (_stuff_),
            (TReturn)CloneNode (_return_),
            (TCloseBracket)CloneNode (_close_bracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide3Methods(this);
    }

    public TPublic GetPublic ()
    {
        return _public_;
    }

    public void SetPublic (TPublic node)
    {
        if(_public_ != null)
        {
            _public_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _public_ = node;
    }
    public TStatic GetStatic ()
    {
        return _static_;
    }

    public void SetStatic (TStatic node)
    {
        if(_static_ != null)
        {
            _static_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _static_ = node;
    }
    public TVar GetType ()
    {
        return _type_;
    }

    public void SetType (TVar node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TOpenBracket GetOpenBracket ()
    {
        return _open_bracket_;
    }

    public void SetOpenBracket (TOpenBracket node)
    {
        if(_open_bracket_ != null)
        {
            _open_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_bracket_ = node;
    }
    public PStuff GetStuff ()
    {
        return _stuff_;
    }

    public void SetStuff (PStuff node)
    {
        if(_stuff_ != null)
        {
            _stuff_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stuff_ = node;
    }
    public TReturn GetReturn ()
    {
        return _return_;
    }

    public void SetReturn (TReturn node)
    {
        if(_return_ != null)
        {
            _return_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _return_ = node;
    }
    public TCloseBracket GetCloseBracket ()
    {
        return _close_bracket_;
    }

    public void SetCloseBracket (TCloseBracket node)
    {
        if(_close_bracket_ != null)
        {
            _close_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_bracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_public_)
            + ToString (_static_)
            + ToString (_type_)
            + ToString (_open_parenthesis_)
            + ToString (_close_parenthesis_)
            + ToString (_open_bracket_)
            + ToString (_stuff_)
            + ToString (_return_)
            + ToString (_close_bracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _public_ == child )
        {
            _public_ = null;
            return;
        }
        if ( _static_ == child )
        {
            _static_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _open_bracket_ == child )
        {
            _open_bracket_ = null;
            return;
        }
        if ( _stuff_ == child )
        {
            _stuff_ = null;
            return;
        }
        if ( _return_ == child )
        {
            _return_ = null;
            return;
        }
        if ( _close_bracket_ == child )
        {
            _close_bracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _public_ == oldChild )
        {
            SetPublic ((TPublic) newChild);
            return;
        }
        if ( _static_ == oldChild )
        {
            SetStatic ((TStatic) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((TVar) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _open_bracket_ == oldChild )
        {
            SetOpenBracket ((TOpenBracket) newChild);
            return;
        }
        if ( _stuff_ == oldChild )
        {
            SetStuff ((PStuff) newChild);
            return;
        }
        if ( _return_ == oldChild )
        {
            SetReturn ((TReturn) newChild);
            return;
        }
        if ( _close_bracket_ == oldChild )
        {
            SetCloseBracket ((TCloseBracket) newChild);
            return;
        }
    }

}
public sealed class ASide4Methods : PMethods
{
    private TPublic _public_;
    private TVar _type_;
    private TOpenParenthesis _open_parenthesis_;
    private TCloseParenthesis _close_parenthesis_;
    private TOpenBracket _open_bracket_;
    private PStuff _stuff_;
    private TReturn _return_;
    private TCloseBracket _close_bracket_;

    public ASide4Methods ()
    {
    }

    public ASide4Methods (
            TPublic _public_,
            TVar _type_,
            TOpenParenthesis _open_parenthesis_,
            TCloseParenthesis _close_parenthesis_,
            TOpenBracket _open_bracket_,
            PStuff _stuff_,
            TReturn _return_,
            TCloseBracket _close_bracket_
    )
    {
        SetPublic (_public_);
        SetType (_type_);
        SetOpenParenthesis (_open_parenthesis_);
        SetCloseParenthesis (_close_parenthesis_);
        SetOpenBracket (_open_bracket_);
        SetStuff (_stuff_);
        SetReturn (_return_);
        SetCloseBracket (_close_bracket_);
    }

    public override Object Clone()
    {
        return new ASide4Methods (
            (TPublic)CloneNode (_public_),
            (TVar)CloneNode (_type_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TOpenBracket)CloneNode (_open_bracket_),
            (PStuff)CloneNode (_stuff_),
            (TReturn)CloneNode (_return_),
            (TCloseBracket)CloneNode (_close_bracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASide4Methods(this);
    }

    public TPublic GetPublic ()
    {
        return _public_;
    }

    public void SetPublic (TPublic node)
    {
        if(_public_ != null)
        {
            _public_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _public_ = node;
    }
    public TVar GetType ()
    {
        return _type_;
    }

    public void SetType (TVar node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TOpenBracket GetOpenBracket ()
    {
        return _open_bracket_;
    }

    public void SetOpenBracket (TOpenBracket node)
    {
        if(_open_bracket_ != null)
        {
            _open_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_bracket_ = node;
    }
    public PStuff GetStuff ()
    {
        return _stuff_;
    }

    public void SetStuff (PStuff node)
    {
        if(_stuff_ != null)
        {
            _stuff_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stuff_ = node;
    }
    public TReturn GetReturn ()
    {
        return _return_;
    }

    public void SetReturn (TReturn node)
    {
        if(_return_ != null)
        {
            _return_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _return_ = node;
    }
    public TCloseBracket GetCloseBracket ()
    {
        return _close_bracket_;
    }

    public void SetCloseBracket (TCloseBracket node)
    {
        if(_close_bracket_ != null)
        {
            _close_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_bracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_public_)
            + ToString (_type_)
            + ToString (_open_parenthesis_)
            + ToString (_close_parenthesis_)
            + ToString (_open_bracket_)
            + ToString (_stuff_)
            + ToString (_return_)
            + ToString (_close_bracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _public_ == child )
        {
            _public_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _open_bracket_ == child )
        {
            _open_bracket_ = null;
            return;
        }
        if ( _stuff_ == child )
        {
            _stuff_ = null;
            return;
        }
        if ( _return_ == child )
        {
            _return_ = null;
            return;
        }
        if ( _close_bracket_ == child )
        {
            _close_bracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _public_ == oldChild )
        {
            SetPublic ((TPublic) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((TVar) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _open_bracket_ == oldChild )
        {
            SetOpenBracket ((TOpenBracket) newChild);
            return;
        }
        if ( _stuff_ == oldChild )
        {
            SetStuff ((PStuff) newChild);
            return;
        }
        if ( _return_ == oldChild )
        {
            SetReturn ((TReturn) newChild);
            return;
        }
        if ( _close_bracket_ == oldChild )
        {
            SetCloseBracket ((TCloseBracket) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
