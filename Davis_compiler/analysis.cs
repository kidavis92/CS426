/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using comp5210.node;

namespace comp5210.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProgram(AProgram node);
    void CaseARecursStatements(ARecursStatements node);
    void CaseAOneStatements(AOneStatements node);
    void CaseAIfsStatement(AIfsStatement node);
    void CaseAMethStatement(AMethStatement node);
    void CaseAWhilesStatement(AWhilesStatement node);
    void CaseADeclStatement(ADeclStatement node);
    void CaseAAssStatement(AAssStatement node);
    void CaseAIfsIfState(AIfsIfState node);
    void CaseAElsesIfState(AElsesIfState node);
    void CaseAWhileState(AWhileState node);
    void CaseAParamsMethodsCall(AParamsMethodsCall node);
    void CaseANoparamsMethodsCall(ANoparamsMethodsCall node);
    void CaseARecurActualParams(ARecurActualParams node);
    void CaseAOneActualParams(AOneActualParams node);
    void CaseAExpressionsActualConsts(AExpressionsActualConsts node);
    void CaseAStringsActualConsts(AStringsActualConsts node);
    void CaseARecurseMethDecs(ARecurseMethDecs node);
    void CaseAOneMethDecs(AOneMethDecs node);
    void CaseAParamsMethodsDecl(AParamsMethodsDecl node);
    void CaseANoparamsMethodsDecl(ANoparamsMethodsDecl node);
    void CaseAMainMethodsDecl(AMainMethodsDecl node);
    void CaseAEmptyparaMethodsDecl(AEmptyparaMethodsDecl node);
    void CaseAEmptynoparaMethodsDecl(AEmptynoparaMethodsDecl node);
    void CaseAEmptymainMethodsDecl(AEmptymainMethodsDecl node);
    void CaseARecurFormalParams(ARecurFormalParams node);
    void CaseAOneFormalParams(AOneFormalParams node);
    void CaseAVarsFormalConsts(AVarsFormalConsts node);
    void CaseAArrFormalConsts(AArrFormalConsts node);
    void CaseAOrExpressLogic(AOrExpressLogic node);
    void CaseAAndExpressLogic(AAndExpressLogic node);
    void CaseANotExpressLogic(ANotExpressLogic node);
    void CaseACompExpressLogic(ACompExpressLogic node);
    void CaseAGteExpressComp(AGteExpressComp node);
    void CaseALteExpressComp(ALteExpressComp node);
    void CaseALtExpressComp(ALtExpressComp node);
    void CaseAGtExpressComp(AGtExpressComp node);
    void CaseAEqsExpressComp(AEqsExpressComp node);
    void CaseANoteqsExpressComp(ANoteqsExpressComp node);
    void CaseAMathExpressComp(AMathExpressComp node);
    void CaseAAddExpressAs(AAddExpressAs node);
    void CaseASubExpressAs(ASubExpressAs node);
    void CaseAMdExpressAs(AMdExpressAs node);
    void CaseAMultExpressMd(AMultExpressMd node);
    void CaseADivExpressMd(ADivExpressMd node);
    void CaseAParentExpressMd(AParentExpressMd node);
    void CaseAParentExpressParent(AParentExpressParent node);
    void CaseAConstsExpressParent(AConstsExpressParent node);
    void CaseANegvarExpressConsts(ANegvarExpressConsts node);
    void CaseANegintExpressConsts(ANegintExpressConsts node);
    void CaseANegfloExpressConsts(ANegfloExpressConsts node);
    void CaseAVarExpressConsts(AVarExpressConsts node);
    void CaseAIntsExpressConsts(AIntsExpressConsts node);
    void CaseAFloExpressConsts(AFloExpressConsts node);
    void CaseAArrayExpressConsts(AArrayExpressConsts node);
    void CaseADeclarationsDeclarations(ADeclarationsDeclarations node);
    void CaseADeclarationDeclarations(ADeclarationDeclarations node);
    void CaseAConstantsDeclaration(AConstantsDeclaration node);
    void CaseAVarsDeclaration(AVarsDeclaration node);
    void CaseAVarDeclOptions(AVarDeclOptions node);
    void CaseAArrDeclOptions(AArrDeclOptions node);
    void CaseAConstantine(AConstantine node);
    void CaseAPosintNumConsts(APosintNumConsts node);
    void CaseANegintNumConsts(ANegintNumConsts node);
    void CaseAPosfloNumConsts(APosfloNumConsts node);
    void CaseANegfloNumConsts(ANegfloNumConsts node);
    void CaseAVarAssign(AVarAssign node);
    void CaseAArrAssign(AArrAssign node);

    void CaseTIf(TIf node);
    void CaseTElse(TElse node);
    void CaseTClass(TClass node);
    void CaseTConstantinople(TConstantinople node);
    void CaseTPublic(TPublic node);
    void CaseTPrivate(TPrivate node);
    void CaseTReturn(TReturn node);
    void CaseTWhile(TWhile node);
    void CaseTMainmeth(TMainmeth node);
    void CaseTVoidMethods(TVoidMethods node);
    void CaseTLeftParent(TLeftParent node);
    void CaseTRightParent(TRightParent node);
    void CaseTTimes(TTimes node);
    void CaseTDivide(TDivide node);
    void CaseTPlus(TPlus node);
    void CaseTMinus(TMinus node);
    void CaseTAndy(TAndy node);
    void CaseTOrNah(TOrNah node);
    void CaseTNah(TNah node);
    void CaseTEquators(TEquators node);
    void CaseTNoteqs(TNoteqs node);
    void CaseTGreatThanEq(TGreatThanEq node);
    void CaseTLessThanEq(TLessThanEq node);
    void CaseTGreater(TGreater node);
    void CaseTLesser(TLesser node);
    void CaseTAssignments(TAssignments node);
    void CaseTLineEnder(TLineEnder node);
    void CaseTLeftBracket(TLeftBracket node);
    void CaseTRightBracket(TRightBracket node);
    void CaseTLeftCurly(TLeftCurly node);
    void CaseTRightCurly(TRightCurly node);
    void CaseTComma(TComma node);
    void CaseTComment(TComment node);
    void CaseTSillystrings(TSillystrings node);
    void CaseTRootbeerfloats(TRootbeerfloats node);
    void CaseTInts(TInts node);
    void CaseTVarNames(TVarNames node);
    void CaseTWhitespace(TWhitespace node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProgram(AProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARecursStatements(ARecursStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneStatements(AOneStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfsStatement(AIfsStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMethStatement(AMethStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhilesStatement(AWhilesStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclStatement(ADeclStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssStatement(AAssStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfsIfState(AIfsIfState node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAElsesIfState(AElsesIfState node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileState(AWhileState node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParamsMethodsCall(AParamsMethodsCall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoparamsMethodsCall(ANoparamsMethodsCall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARecurActualParams(ARecurActualParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneActualParams(AOneActualParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExpressionsActualConsts(AExpressionsActualConsts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringsActualConsts(AStringsActualConsts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARecurseMethDecs(ARecurseMethDecs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneMethDecs(AOneMethDecs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParamsMethodsDecl(AParamsMethodsDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoparamsMethodsDecl(ANoparamsMethodsDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainMethodsDecl(AMainMethodsDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEmptyparaMethodsDecl(AEmptyparaMethodsDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEmptynoparaMethodsDecl(AEmptynoparaMethodsDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEmptymainMethodsDecl(AEmptymainMethodsDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARecurFormalParams(ARecurFormalParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneFormalParams(AOneFormalParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVarsFormalConsts(AVarsFormalConsts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrFormalConsts(AArrFormalConsts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOrExpressLogic(AOrExpressLogic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndExpressLogic(AAndExpressLogic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotExpressLogic(ANotExpressLogic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACompExpressLogic(ACompExpressLogic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGteExpressComp(AGteExpressComp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALteExpressComp(ALteExpressComp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALtExpressComp(ALtExpressComp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGtExpressComp(AGtExpressComp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEqsExpressComp(AEqsExpressComp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoteqsExpressComp(ANoteqsExpressComp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMathExpressComp(AMathExpressComp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAddExpressAs(AAddExpressAs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASubExpressAs(ASubExpressAs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMdExpressAs(AMdExpressAs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultExpressMd(AMultExpressMd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivExpressMd(ADivExpressMd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParentExpressMd(AParentExpressMd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParentExpressParent(AParentExpressParent node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstsExpressParent(AConstsExpressParent node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegvarExpressConsts(ANegvarExpressConsts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegintExpressConsts(ANegintExpressConsts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegfloExpressConsts(ANegfloExpressConsts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVarExpressConsts(AVarExpressConsts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntsExpressConsts(AIntsExpressConsts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloExpressConsts(AFloExpressConsts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayExpressConsts(AArrayExpressConsts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarationsDeclarations(ADeclarationsDeclarations node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarationDeclarations(ADeclarationDeclarations node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstantsDeclaration(AConstantsDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVarsDeclaration(AVarsDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVarDeclOptions(AVarDeclOptions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrDeclOptions(AArrDeclOptions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstantine(AConstantine node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPosintNumConsts(APosintNumConsts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegintNumConsts(ANegintNumConsts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPosfloNumConsts(APosfloNumConsts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegfloNumConsts(ANegfloNumConsts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVarAssign(AVarAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrAssign(AArrAssign node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTIf(TIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElse(TElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTClass(TClass node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTConstantinople(TConstantinople node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPublic(TPublic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPrivate(TPrivate node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTReturn(TReturn node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhile(TWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMainmeth(TMainmeth node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTVoidMethods(TVoidMethods node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLeftParent(TLeftParent node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRightParent(TRightParent node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTimes(TTimes node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDivide(TDivide node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAndy(TAndy node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOrNah(TOrNah node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNah(TNah node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEquators(TEquators node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNoteqs(TNoteqs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreatThanEq(TGreatThanEq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessThanEq(TLessThanEq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreater(TGreater node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLesser(TLesser node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAssignments(TAssignments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLineEnder(TLineEnder node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLeftBracket(TLeftBracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRightBracket(TRightBracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLeftCurly(TLeftCurly node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRightCurly(TRightCurly node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSillystrings(TSillystrings node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRootbeerfloats(TRootbeerfloats node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInts(TInts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTVarNames(TVarNames node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhitespace(TWhitespace node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetDeclarations() != null)
        {
            node.GetDeclarations().Apply(this);
        }
        if(node.GetMethDecs() != null)
        {
            node.GetMethDecs().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InARecursStatements(ARecursStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursStatements(ARecursStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursStatements(ARecursStatements node)
    {
        InARecursStatements(node);
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutARecursStatements(node);
    }
    public virtual void InAOneStatements(AOneStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneStatements(AOneStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneStatements(AOneStatements node)
    {
        InAOneStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAOneStatements(node);
    }
    public virtual void InAIfsStatement(AIfsStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfsStatement(AIfsStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfsStatement(AIfsStatement node)
    {
        InAIfsStatement(node);
        if(node.GetIfState() != null)
        {
            node.GetIfState().Apply(this);
        }
        OutAIfsStatement(node);
    }
    public virtual void InAMethStatement(AMethStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethStatement(AMethStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethStatement(AMethStatement node)
    {
        InAMethStatement(node);
        if(node.GetMethodsCall() != null)
        {
            node.GetMethodsCall().Apply(this);
        }
        OutAMethStatement(node);
    }
    public virtual void InAWhilesStatement(AWhilesStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhilesStatement(AWhilesStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhilesStatement(AWhilesStatement node)
    {
        InAWhilesStatement(node);
        if(node.GetWhileState() != null)
        {
            node.GetWhileState().Apply(this);
        }
        OutAWhilesStatement(node);
    }
    public virtual void InADeclStatement(ADeclStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclStatement(ADeclStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclStatement(ADeclStatement node)
    {
        InADeclStatement(node);
        if(node.GetDeclaration() != null)
        {
            node.GetDeclaration().Apply(this);
        }
        OutADeclStatement(node);
    }
    public virtual void InAAssStatement(AAssStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssStatement(AAssStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssStatement(AAssStatement node)
    {
        InAAssStatement(node);
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        OutAAssStatement(node);
    }
    public virtual void InAIfsIfState(AIfsIfState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfsIfState(AIfsIfState node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfsIfState(AIfsIfState node)
    {
        InAIfsIfState(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        if(node.GetExpressLogic() != null)
        {
            node.GetExpressLogic().Apply(this);
        }
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        OutAIfsIfState(node);
    }
    public virtual void InAElsesIfState(AElsesIfState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElsesIfState(AElsesIfState node)
    {
        DefaultOut(node);
    }

    public override void CaseAElsesIfState(AElsesIfState node)
    {
        InAElsesIfState(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        if(node.GetExpressLogic() != null)
        {
            node.GetExpressLogic().Apply(this);
        }
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        if(node.GetLcurl1() != null)
        {
            node.GetLcurl1().Apply(this);
        }
        if(node.GetIfstates() != null)
        {
            node.GetIfstates().Apply(this);
        }
        if(node.GetRcurl1() != null)
        {
            node.GetRcurl1().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetLcurl2() != null)
        {
            node.GetLcurl2().Apply(this);
        }
        if(node.GetElsestates() != null)
        {
            node.GetElsestates().Apply(this);
        }
        if(node.GetRculr2() != null)
        {
            node.GetRculr2().Apply(this);
        }
        OutAElsesIfState(node);
    }
    public virtual void InAWhileState(AWhileState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileState(AWhileState node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileState(AWhileState node)
    {
        InAWhileState(node);
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        if(node.GetExpressLogic() != null)
        {
            node.GetExpressLogic().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        OutAWhileState(node);
    }
    public virtual void InAParamsMethodsCall(AParamsMethodsCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamsMethodsCall(AParamsMethodsCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamsMethodsCall(AParamsMethodsCall node)
    {
        InAParamsMethodsCall(node);
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        if(node.GetActualParams() != null)
        {
            node.GetActualParams().Apply(this);
        }
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        if(node.GetLineEnder() != null)
        {
            node.GetLineEnder().Apply(this);
        }
        OutAParamsMethodsCall(node);
    }
    public virtual void InANoparamsMethodsCall(ANoparamsMethodsCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoparamsMethodsCall(ANoparamsMethodsCall node)
    {
        DefaultOut(node);
    }

    public override void CaseANoparamsMethodsCall(ANoparamsMethodsCall node)
    {
        InANoparamsMethodsCall(node);
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        if(node.GetLineEnder() != null)
        {
            node.GetLineEnder().Apply(this);
        }
        OutANoparamsMethodsCall(node);
    }
    public virtual void InARecurActualParams(ARecurActualParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecurActualParams(ARecurActualParams node)
    {
        DefaultOut(node);
    }

    public override void CaseARecurActualParams(ARecurActualParams node)
    {
        InARecurActualParams(node);
        if(node.GetActualParams() != null)
        {
            node.GetActualParams().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetActualConsts() != null)
        {
            node.GetActualConsts().Apply(this);
        }
        OutARecurActualParams(node);
    }
    public virtual void InAOneActualParams(AOneActualParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneActualParams(AOneActualParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneActualParams(AOneActualParams node)
    {
        InAOneActualParams(node);
        if(node.GetActualConsts() != null)
        {
            node.GetActualConsts().Apply(this);
        }
        OutAOneActualParams(node);
    }
    public virtual void InAExpressionsActualConsts(AExpressionsActualConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpressionsActualConsts(AExpressionsActualConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpressionsActualConsts(AExpressionsActualConsts node)
    {
        InAExpressionsActualConsts(node);
        if(node.GetExpressLogic() != null)
        {
            node.GetExpressLogic().Apply(this);
        }
        OutAExpressionsActualConsts(node);
    }
    public virtual void InAStringsActualConsts(AStringsActualConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringsActualConsts(AStringsActualConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringsActualConsts(AStringsActualConsts node)
    {
        InAStringsActualConsts(node);
        if(node.GetSillystrings() != null)
        {
            node.GetSillystrings().Apply(this);
        }
        OutAStringsActualConsts(node);
    }
    public virtual void InARecurseMethDecs(ARecurseMethDecs node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecurseMethDecs(ARecurseMethDecs node)
    {
        DefaultOut(node);
    }

    public override void CaseARecurseMethDecs(ARecurseMethDecs node)
    {
        InARecurseMethDecs(node);
        if(node.GetMethDecs() != null)
        {
            node.GetMethDecs().Apply(this);
        }
        if(node.GetMethodsDecl() != null)
        {
            node.GetMethodsDecl().Apply(this);
        }
        OutARecurseMethDecs(node);
    }
    public virtual void InAOneMethDecs(AOneMethDecs node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneMethDecs(AOneMethDecs node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneMethDecs(AOneMethDecs node)
    {
        InAOneMethDecs(node);
        if(node.GetMethodsDecl() != null)
        {
            node.GetMethodsDecl().Apply(this);
        }
        OutAOneMethDecs(node);
    }
    public virtual void InAParamsMethodsDecl(AParamsMethodsDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamsMethodsDecl(AParamsMethodsDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamsMethodsDecl(AParamsMethodsDecl node)
    {
        InAParamsMethodsDecl(node);
        if(node.GetVoidMethods() != null)
        {
            node.GetVoidMethods().Apply(this);
        }
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        if(node.GetFormalParams() != null)
        {
            node.GetFormalParams().Apply(this);
        }
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        OutAParamsMethodsDecl(node);
    }
    public virtual void InANoparamsMethodsDecl(ANoparamsMethodsDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoparamsMethodsDecl(ANoparamsMethodsDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseANoparamsMethodsDecl(ANoparamsMethodsDecl node)
    {
        InANoparamsMethodsDecl(node);
        if(node.GetVoidMethods() != null)
        {
            node.GetVoidMethods().Apply(this);
        }
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        OutANoparamsMethodsDecl(node);
    }
    public virtual void InAMainMethodsDecl(AMainMethodsDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainMethodsDecl(AMainMethodsDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainMethodsDecl(AMainMethodsDecl node)
    {
        InAMainMethodsDecl(node);
        if(node.GetVoidMethods() != null)
        {
            node.GetVoidMethods().Apply(this);
        }
        if(node.GetMainmeth() != null)
        {
            node.GetMainmeth().Apply(this);
        }
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        OutAMainMethodsDecl(node);
    }
    public virtual void InAEmptyparaMethodsDecl(AEmptyparaMethodsDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEmptyparaMethodsDecl(AEmptyparaMethodsDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAEmptyparaMethodsDecl(AEmptyparaMethodsDecl node)
    {
        InAEmptyparaMethodsDecl(node);
        if(node.GetVoidMethods() != null)
        {
            node.GetVoidMethods().Apply(this);
        }
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        if(node.GetFormalParams() != null)
        {
            node.GetFormalParams().Apply(this);
        }
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        OutAEmptyparaMethodsDecl(node);
    }
    public virtual void InAEmptynoparaMethodsDecl(AEmptynoparaMethodsDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEmptynoparaMethodsDecl(AEmptynoparaMethodsDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAEmptynoparaMethodsDecl(AEmptynoparaMethodsDecl node)
    {
        InAEmptynoparaMethodsDecl(node);
        if(node.GetVoidMethods() != null)
        {
            node.GetVoidMethods().Apply(this);
        }
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        OutAEmptynoparaMethodsDecl(node);
    }
    public virtual void InAEmptymainMethodsDecl(AEmptymainMethodsDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEmptymainMethodsDecl(AEmptymainMethodsDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAEmptymainMethodsDecl(AEmptymainMethodsDecl node)
    {
        InAEmptymainMethodsDecl(node);
        if(node.GetVoidMethods() != null)
        {
            node.GetVoidMethods().Apply(this);
        }
        if(node.GetMainmeth() != null)
        {
            node.GetMainmeth().Apply(this);
        }
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        OutAEmptymainMethodsDecl(node);
    }
    public virtual void InARecurFormalParams(ARecurFormalParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecurFormalParams(ARecurFormalParams node)
    {
        DefaultOut(node);
    }

    public override void CaseARecurFormalParams(ARecurFormalParams node)
    {
        InARecurFormalParams(node);
        if(node.GetFormalParams() != null)
        {
            node.GetFormalParams().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetFormalConsts() != null)
        {
            node.GetFormalConsts().Apply(this);
        }
        OutARecurFormalParams(node);
    }
    public virtual void InAOneFormalParams(AOneFormalParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneFormalParams(AOneFormalParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneFormalParams(AOneFormalParams node)
    {
        InAOneFormalParams(node);
        if(node.GetFormalConsts() != null)
        {
            node.GetFormalConsts().Apply(this);
        }
        OutAOneFormalParams(node);
    }
    public virtual void InAVarsFormalConsts(AVarsFormalConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarsFormalConsts(AVarsFormalConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarsFormalConsts(AVarsFormalConsts node)
    {
        InAVarsFormalConsts(node);
        if(node.GetId1() != null)
        {
            node.GetId1().Apply(this);
        }
        if(node.GetId2() != null)
        {
            node.GetId2().Apply(this);
        }
        OutAVarsFormalConsts(node);
    }
    public virtual void InAArrFormalConsts(AArrFormalConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrFormalConsts(AArrFormalConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrFormalConsts(AArrFormalConsts node)
    {
        InAArrFormalConsts(node);
        if(node.GetId1() != null)
        {
            node.GetId1().Apply(this);
        }
        if(node.GetId2() != null)
        {
            node.GetId2().Apply(this);
        }
        if(node.GetLeftBracket() != null)
        {
            node.GetLeftBracket().Apply(this);
        }
        if(node.GetRightBracket() != null)
        {
            node.GetRightBracket().Apply(this);
        }
        OutAArrFormalConsts(node);
    }
    public virtual void InAOrExpressLogic(AOrExpressLogic node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrExpressLogic(AOrExpressLogic node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrExpressLogic(AOrExpressLogic node)
    {
        InAOrExpressLogic(node);
        if(node.GetOps1() != null)
        {
            node.GetOps1().Apply(this);
        }
        if(node.GetOrNah() != null)
        {
            node.GetOrNah().Apply(this);
        }
        if(node.GetOps2() != null)
        {
            node.GetOps2().Apply(this);
        }
        OutAOrExpressLogic(node);
    }
    public virtual void InAAndExpressLogic(AAndExpressLogic node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndExpressLogic(AAndExpressLogic node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndExpressLogic(AAndExpressLogic node)
    {
        InAAndExpressLogic(node);
        if(node.GetOps1() != null)
        {
            node.GetOps1().Apply(this);
        }
        if(node.GetAndy() != null)
        {
            node.GetAndy().Apply(this);
        }
        if(node.GetOps2() != null)
        {
            node.GetOps2().Apply(this);
        }
        OutAAndExpressLogic(node);
    }
    public virtual void InANotExpressLogic(ANotExpressLogic node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotExpressLogic(ANotExpressLogic node)
    {
        DefaultOut(node);
    }

    public override void CaseANotExpressLogic(ANotExpressLogic node)
    {
        InANotExpressLogic(node);
        if(node.GetNah() != null)
        {
            node.GetNah().Apply(this);
        }
        if(node.GetExpressComp() != null)
        {
            node.GetExpressComp().Apply(this);
        }
        OutANotExpressLogic(node);
    }
    public virtual void InACompExpressLogic(ACompExpressLogic node)
    {
        DefaultIn(node);
    }

    public virtual void OutACompExpressLogic(ACompExpressLogic node)
    {
        DefaultOut(node);
    }

    public override void CaseACompExpressLogic(ACompExpressLogic node)
    {
        InACompExpressLogic(node);
        if(node.GetExpressComp() != null)
        {
            node.GetExpressComp().Apply(this);
        }
        OutACompExpressLogic(node);
    }
    public virtual void InAGteExpressComp(AGteExpressComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGteExpressComp(AGteExpressComp node)
    {
        DefaultOut(node);
    }

    public override void CaseAGteExpressComp(AGteExpressComp node)
    {
        InAGteExpressComp(node);
        if(node.GetOps1() != null)
        {
            node.GetOps1().Apply(this);
        }
        if(node.GetGreatThanEq() != null)
        {
            node.GetGreatThanEq().Apply(this);
        }
        if(node.GetOps2() != null)
        {
            node.GetOps2().Apply(this);
        }
        OutAGteExpressComp(node);
    }
    public virtual void InALteExpressComp(ALteExpressComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutALteExpressComp(ALteExpressComp node)
    {
        DefaultOut(node);
    }

    public override void CaseALteExpressComp(ALteExpressComp node)
    {
        InALteExpressComp(node);
        if(node.GetOps1() != null)
        {
            node.GetOps1().Apply(this);
        }
        if(node.GetLessThanEq() != null)
        {
            node.GetLessThanEq().Apply(this);
        }
        if(node.GetOps2() != null)
        {
            node.GetOps2().Apply(this);
        }
        OutALteExpressComp(node);
    }
    public virtual void InALtExpressComp(ALtExpressComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutALtExpressComp(ALtExpressComp node)
    {
        DefaultOut(node);
    }

    public override void CaseALtExpressComp(ALtExpressComp node)
    {
        InALtExpressComp(node);
        if(node.GetOps1() != null)
        {
            node.GetOps1().Apply(this);
        }
        if(node.GetLesser() != null)
        {
            node.GetLesser().Apply(this);
        }
        if(node.GetOps2() != null)
        {
            node.GetOps2().Apply(this);
        }
        OutALtExpressComp(node);
    }
    public virtual void InAGtExpressComp(AGtExpressComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGtExpressComp(AGtExpressComp node)
    {
        DefaultOut(node);
    }

    public override void CaseAGtExpressComp(AGtExpressComp node)
    {
        InAGtExpressComp(node);
        if(node.GetOps1() != null)
        {
            node.GetOps1().Apply(this);
        }
        if(node.GetGreater() != null)
        {
            node.GetGreater().Apply(this);
        }
        if(node.GetOps2() != null)
        {
            node.GetOps2().Apply(this);
        }
        OutAGtExpressComp(node);
    }
    public virtual void InAEqsExpressComp(AEqsExpressComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqsExpressComp(AEqsExpressComp node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqsExpressComp(AEqsExpressComp node)
    {
        InAEqsExpressComp(node);
        if(node.GetOps1() != null)
        {
            node.GetOps1().Apply(this);
        }
        if(node.GetEquators() != null)
        {
            node.GetEquators().Apply(this);
        }
        if(node.GetOps2() != null)
        {
            node.GetOps2().Apply(this);
        }
        OutAEqsExpressComp(node);
    }
    public virtual void InANoteqsExpressComp(ANoteqsExpressComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoteqsExpressComp(ANoteqsExpressComp node)
    {
        DefaultOut(node);
    }

    public override void CaseANoteqsExpressComp(ANoteqsExpressComp node)
    {
        InANoteqsExpressComp(node);
        if(node.GetOps1() != null)
        {
            node.GetOps1().Apply(this);
        }
        if(node.GetNoteqs() != null)
        {
            node.GetNoteqs().Apply(this);
        }
        if(node.GetOps2() != null)
        {
            node.GetOps2().Apply(this);
        }
        OutANoteqsExpressComp(node);
    }
    public virtual void InAMathExpressComp(AMathExpressComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpressComp(AMathExpressComp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpressComp(AMathExpressComp node)
    {
        InAMathExpressComp(node);
        if(node.GetExpressAs() != null)
        {
            node.GetExpressAs().Apply(this);
        }
        OutAMathExpressComp(node);
    }
    public virtual void InAAddExpressAs(AAddExpressAs node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpressAs(AAddExpressAs node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpressAs(AAddExpressAs node)
    {
        InAAddExpressAs(node);
        if(node.GetExpressAs() != null)
        {
            node.GetExpressAs().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpressMd() != null)
        {
            node.GetExpressMd().Apply(this);
        }
        OutAAddExpressAs(node);
    }
    public virtual void InASubExpressAs(ASubExpressAs node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubExpressAs(ASubExpressAs node)
    {
        DefaultOut(node);
    }

    public override void CaseASubExpressAs(ASubExpressAs node)
    {
        InASubExpressAs(node);
        if(node.GetExpressAs() != null)
        {
            node.GetExpressAs().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpressMd() != null)
        {
            node.GetExpressMd().Apply(this);
        }
        OutASubExpressAs(node);
    }
    public virtual void InAMdExpressAs(AMdExpressAs node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMdExpressAs(AMdExpressAs node)
    {
        DefaultOut(node);
    }

    public override void CaseAMdExpressAs(AMdExpressAs node)
    {
        InAMdExpressAs(node);
        if(node.GetExpressMd() != null)
        {
            node.GetExpressMd().Apply(this);
        }
        OutAMdExpressAs(node);
    }
    public virtual void InAMultExpressMd(AMultExpressMd node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultExpressMd(AMultExpressMd node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultExpressMd(AMultExpressMd node)
    {
        InAMultExpressMd(node);
        if(node.GetExpressMd() != null)
        {
            node.GetExpressMd().Apply(this);
        }
        if(node.GetTimes() != null)
        {
            node.GetTimes().Apply(this);
        }
        if(node.GetExpressParent() != null)
        {
            node.GetExpressParent().Apply(this);
        }
        OutAMultExpressMd(node);
    }
    public virtual void InADivExpressMd(ADivExpressMd node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivExpressMd(ADivExpressMd node)
    {
        DefaultOut(node);
    }

    public override void CaseADivExpressMd(ADivExpressMd node)
    {
        InADivExpressMd(node);
        if(node.GetExpressMd() != null)
        {
            node.GetExpressMd().Apply(this);
        }
        if(node.GetDivide() != null)
        {
            node.GetDivide().Apply(this);
        }
        if(node.GetExpressParent() != null)
        {
            node.GetExpressParent().Apply(this);
        }
        OutADivExpressMd(node);
    }
    public virtual void InAParentExpressMd(AParentExpressMd node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParentExpressMd(AParentExpressMd node)
    {
        DefaultOut(node);
    }

    public override void CaseAParentExpressMd(AParentExpressMd node)
    {
        InAParentExpressMd(node);
        if(node.GetExpressParent() != null)
        {
            node.GetExpressParent().Apply(this);
        }
        OutAParentExpressMd(node);
    }
    public virtual void InAParentExpressParent(AParentExpressParent node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParentExpressParent(AParentExpressParent node)
    {
        DefaultOut(node);
    }

    public override void CaseAParentExpressParent(AParentExpressParent node)
    {
        InAParentExpressParent(node);
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        if(node.GetExpressLogic() != null)
        {
            node.GetExpressLogic().Apply(this);
        }
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        OutAParentExpressParent(node);
    }
    public virtual void InAConstsExpressParent(AConstsExpressParent node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstsExpressParent(AConstsExpressParent node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstsExpressParent(AConstsExpressParent node)
    {
        InAConstsExpressParent(node);
        if(node.GetExpressConsts() != null)
        {
            node.GetExpressConsts().Apply(this);
        }
        OutAConstsExpressParent(node);
    }
    public virtual void InANegvarExpressConsts(ANegvarExpressConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegvarExpressConsts(ANegvarExpressConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseANegvarExpressConsts(ANegvarExpressConsts node)
    {
        InANegvarExpressConsts(node);
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        OutANegvarExpressConsts(node);
    }
    public virtual void InANegintExpressConsts(ANegintExpressConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegintExpressConsts(ANegintExpressConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseANegintExpressConsts(ANegintExpressConsts node)
    {
        InANegintExpressConsts(node);
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetInts() != null)
        {
            node.GetInts().Apply(this);
        }
        OutANegintExpressConsts(node);
    }
    public virtual void InANegfloExpressConsts(ANegfloExpressConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegfloExpressConsts(ANegfloExpressConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseANegfloExpressConsts(ANegfloExpressConsts node)
    {
        InANegfloExpressConsts(node);
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetRootbeerfloats() != null)
        {
            node.GetRootbeerfloats().Apply(this);
        }
        OutANegfloExpressConsts(node);
    }
    public virtual void InAVarExpressConsts(AVarExpressConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarExpressConsts(AVarExpressConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarExpressConsts(AVarExpressConsts node)
    {
        InAVarExpressConsts(node);
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        OutAVarExpressConsts(node);
    }
    public virtual void InAIntsExpressConsts(AIntsExpressConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntsExpressConsts(AIntsExpressConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntsExpressConsts(AIntsExpressConsts node)
    {
        InAIntsExpressConsts(node);
        if(node.GetInts() != null)
        {
            node.GetInts().Apply(this);
        }
        OutAIntsExpressConsts(node);
    }
    public virtual void InAFloExpressConsts(AFloExpressConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloExpressConsts(AFloExpressConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloExpressConsts(AFloExpressConsts node)
    {
        InAFloExpressConsts(node);
        if(node.GetRootbeerfloats() != null)
        {
            node.GetRootbeerfloats().Apply(this);
        }
        OutAFloExpressConsts(node);
    }
    public virtual void InAArrayExpressConsts(AArrayExpressConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayExpressConsts(AArrayExpressConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayExpressConsts(AArrayExpressConsts node)
    {
        InAArrayExpressConsts(node);
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        if(node.GetLeftBracket() != null)
        {
            node.GetLeftBracket().Apply(this);
        }
        if(node.GetExpressLogic() != null)
        {
            node.GetExpressLogic().Apply(this);
        }
        if(node.GetRightBracket() != null)
        {
            node.GetRightBracket().Apply(this);
        }
        OutAArrayExpressConsts(node);
    }
    public virtual void InADeclarationsDeclarations(ADeclarationsDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationsDeclarations(ADeclarationsDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationsDeclarations(ADeclarationsDeclarations node)
    {
        InADeclarationsDeclarations(node);
        if(node.GetDeclarations() != null)
        {
            node.GetDeclarations().Apply(this);
        }
        if(node.GetDeclaration() != null)
        {
            node.GetDeclaration().Apply(this);
        }
        OutADeclarationsDeclarations(node);
    }
    public virtual void InADeclarationDeclarations(ADeclarationDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationDeclarations(ADeclarationDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationDeclarations(ADeclarationDeclarations node)
    {
        InADeclarationDeclarations(node);
        if(node.GetDeclaration() != null)
        {
            node.GetDeclaration().Apply(this);
        }
        OutADeclarationDeclarations(node);
    }
    public virtual void InAConstantsDeclaration(AConstantsDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantsDeclaration(AConstantsDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantsDeclaration(AConstantsDeclaration node)
    {
        InAConstantsDeclaration(node);
        if(node.GetConstantine() != null)
        {
            node.GetConstantine().Apply(this);
        }
        OutAConstantsDeclaration(node);
    }
    public virtual void InAVarsDeclaration(AVarsDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarsDeclaration(AVarsDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarsDeclaration(AVarsDeclaration node)
    {
        InAVarsDeclaration(node);
        if(node.GetDeclOptions() != null)
        {
            node.GetDeclOptions().Apply(this);
        }
        if(node.GetLineEnder() != null)
        {
            node.GetLineEnder().Apply(this);
        }
        OutAVarsDeclaration(node);
    }
    public virtual void InAVarDeclOptions(AVarDeclOptions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarDeclOptions(AVarDeclOptions node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarDeclOptions(AVarDeclOptions node)
    {
        InAVarDeclOptions(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        OutAVarDeclOptions(node);
    }
    public virtual void InAArrDeclOptions(AArrDeclOptions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrDeclOptions(AArrDeclOptions node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrDeclOptions(AArrDeclOptions node)
    {
        InAArrDeclOptions(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetLeftBracket() != null)
        {
            node.GetLeftBracket().Apply(this);
        }
        if(node.GetInts() != null)
        {
            node.GetInts().Apply(this);
        }
        if(node.GetRightBracket() != null)
        {
            node.GetRightBracket().Apply(this);
        }
        OutAArrDeclOptions(node);
    }
    public virtual void InAConstantine(AConstantine node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantine(AConstantine node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantine(AConstantine node)
    {
        InAConstantine(node);
        if(node.GetConstantinople() != null)
        {
            node.GetConstantinople().Apply(this);
        }
        if(node.GetId1() != null)
        {
            node.GetId1().Apply(this);
        }
        if(node.GetId2() != null)
        {
            node.GetId2().Apply(this);
        }
        if(node.GetAssignments() != null)
        {
            node.GetAssignments().Apply(this);
        }
        if(node.GetNumConsts() != null)
        {
            node.GetNumConsts().Apply(this);
        }
        if(node.GetLineEnder() != null)
        {
            node.GetLineEnder().Apply(this);
        }
        OutAConstantine(node);
    }
    public virtual void InAPosintNumConsts(APosintNumConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPosintNumConsts(APosintNumConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseAPosintNumConsts(APosintNumConsts node)
    {
        InAPosintNumConsts(node);
        if(node.GetInts() != null)
        {
            node.GetInts().Apply(this);
        }
        OutAPosintNumConsts(node);
    }
    public virtual void InANegintNumConsts(ANegintNumConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegintNumConsts(ANegintNumConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseANegintNumConsts(ANegintNumConsts node)
    {
        InANegintNumConsts(node);
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetInts() != null)
        {
            node.GetInts().Apply(this);
        }
        OutANegintNumConsts(node);
    }
    public virtual void InAPosfloNumConsts(APosfloNumConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPosfloNumConsts(APosfloNumConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseAPosfloNumConsts(APosfloNumConsts node)
    {
        InAPosfloNumConsts(node);
        if(node.GetRootbeerfloats() != null)
        {
            node.GetRootbeerfloats().Apply(this);
        }
        OutAPosfloNumConsts(node);
    }
    public virtual void InANegfloNumConsts(ANegfloNumConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegfloNumConsts(ANegfloNumConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseANegfloNumConsts(ANegfloNumConsts node)
    {
        InANegfloNumConsts(node);
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetRootbeerfloats() != null)
        {
            node.GetRootbeerfloats().Apply(this);
        }
        OutANegfloNumConsts(node);
    }
    public virtual void InAVarAssign(AVarAssign node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarAssign(AVarAssign node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarAssign(AVarAssign node)
    {
        InAVarAssign(node);
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        if(node.GetAssignments() != null)
        {
            node.GetAssignments().Apply(this);
        }
        if(node.GetExpressLogic() != null)
        {
            node.GetExpressLogic().Apply(this);
        }
        if(node.GetLineEnder() != null)
        {
            node.GetLineEnder().Apply(this);
        }
        OutAVarAssign(node);
    }
    public virtual void InAArrAssign(AArrAssign node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrAssign(AArrAssign node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrAssign(AArrAssign node)
    {
        InAArrAssign(node);
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        if(node.GetLeftBracket() != null)
        {
            node.GetLeftBracket().Apply(this);
        }
        if(node.GetArrayBound() != null)
        {
            node.GetArrayBound().Apply(this);
        }
        if(node.GetRightBracket() != null)
        {
            node.GetRightBracket().Apply(this);
        }
        if(node.GetAssignments() != null)
        {
            node.GetAssignments().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetLineEnder() != null)
        {
            node.GetLineEnder().Apply(this);
        }
        OutAArrAssign(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetMethDecs() != null)
        {
            node.GetMethDecs().Apply(this);
        }
        if(node.GetDeclarations() != null)
        {
            node.GetDeclarations().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InARecursStatements(ARecursStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursStatements(ARecursStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursStatements(ARecursStatements node)
    {
        InARecursStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        OutARecursStatements(node);
    }
    public virtual void InAOneStatements(AOneStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneStatements(AOneStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneStatements(AOneStatements node)
    {
        InAOneStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAOneStatements(node);
    }
    public virtual void InAIfsStatement(AIfsStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfsStatement(AIfsStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfsStatement(AIfsStatement node)
    {
        InAIfsStatement(node);
        if(node.GetIfState() != null)
        {
            node.GetIfState().Apply(this);
        }
        OutAIfsStatement(node);
    }
    public virtual void InAMethStatement(AMethStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethStatement(AMethStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethStatement(AMethStatement node)
    {
        InAMethStatement(node);
        if(node.GetMethodsCall() != null)
        {
            node.GetMethodsCall().Apply(this);
        }
        OutAMethStatement(node);
    }
    public virtual void InAWhilesStatement(AWhilesStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhilesStatement(AWhilesStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhilesStatement(AWhilesStatement node)
    {
        InAWhilesStatement(node);
        if(node.GetWhileState() != null)
        {
            node.GetWhileState().Apply(this);
        }
        OutAWhilesStatement(node);
    }
    public virtual void InADeclStatement(ADeclStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclStatement(ADeclStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclStatement(ADeclStatement node)
    {
        InADeclStatement(node);
        if(node.GetDeclaration() != null)
        {
            node.GetDeclaration().Apply(this);
        }
        OutADeclStatement(node);
    }
    public virtual void InAAssStatement(AAssStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssStatement(AAssStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssStatement(AAssStatement node)
    {
        InAAssStatement(node);
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        OutAAssStatement(node);
    }
    public virtual void InAIfsIfState(AIfsIfState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfsIfState(AIfsIfState node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfsIfState(AIfsIfState node)
    {
        InAIfsIfState(node);
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        if(node.GetExpressLogic() != null)
        {
            node.GetExpressLogic().Apply(this);
        }
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutAIfsIfState(node);
    }
    public virtual void InAElsesIfState(AElsesIfState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElsesIfState(AElsesIfState node)
    {
        DefaultOut(node);
    }

    public override void CaseAElsesIfState(AElsesIfState node)
    {
        InAElsesIfState(node);
        if(node.GetRculr2() != null)
        {
            node.GetRculr2().Apply(this);
        }
        if(node.GetElsestates() != null)
        {
            node.GetElsestates().Apply(this);
        }
        if(node.GetLcurl2() != null)
        {
            node.GetLcurl2().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetRcurl1() != null)
        {
            node.GetRcurl1().Apply(this);
        }
        if(node.GetIfstates() != null)
        {
            node.GetIfstates().Apply(this);
        }
        if(node.GetLcurl1() != null)
        {
            node.GetLcurl1().Apply(this);
        }
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        if(node.GetExpressLogic() != null)
        {
            node.GetExpressLogic().Apply(this);
        }
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutAElsesIfState(node);
    }
    public virtual void InAWhileState(AWhileState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileState(AWhileState node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileState(AWhileState node)
    {
        InAWhileState(node);
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetExpressLogic() != null)
        {
            node.GetExpressLogic().Apply(this);
        }
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        OutAWhileState(node);
    }
    public virtual void InAParamsMethodsCall(AParamsMethodsCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamsMethodsCall(AParamsMethodsCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamsMethodsCall(AParamsMethodsCall node)
    {
        InAParamsMethodsCall(node);
        if(node.GetLineEnder() != null)
        {
            node.GetLineEnder().Apply(this);
        }
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        if(node.GetActualParams() != null)
        {
            node.GetActualParams().Apply(this);
        }
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        OutAParamsMethodsCall(node);
    }
    public virtual void InANoparamsMethodsCall(ANoparamsMethodsCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoparamsMethodsCall(ANoparamsMethodsCall node)
    {
        DefaultOut(node);
    }

    public override void CaseANoparamsMethodsCall(ANoparamsMethodsCall node)
    {
        InANoparamsMethodsCall(node);
        if(node.GetLineEnder() != null)
        {
            node.GetLineEnder().Apply(this);
        }
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        OutANoparamsMethodsCall(node);
    }
    public virtual void InARecurActualParams(ARecurActualParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecurActualParams(ARecurActualParams node)
    {
        DefaultOut(node);
    }

    public override void CaseARecurActualParams(ARecurActualParams node)
    {
        InARecurActualParams(node);
        if(node.GetActualConsts() != null)
        {
            node.GetActualConsts().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetActualParams() != null)
        {
            node.GetActualParams().Apply(this);
        }
        OutARecurActualParams(node);
    }
    public virtual void InAOneActualParams(AOneActualParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneActualParams(AOneActualParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneActualParams(AOneActualParams node)
    {
        InAOneActualParams(node);
        if(node.GetActualConsts() != null)
        {
            node.GetActualConsts().Apply(this);
        }
        OutAOneActualParams(node);
    }
    public virtual void InAExpressionsActualConsts(AExpressionsActualConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpressionsActualConsts(AExpressionsActualConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpressionsActualConsts(AExpressionsActualConsts node)
    {
        InAExpressionsActualConsts(node);
        if(node.GetExpressLogic() != null)
        {
            node.GetExpressLogic().Apply(this);
        }
        OutAExpressionsActualConsts(node);
    }
    public virtual void InAStringsActualConsts(AStringsActualConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringsActualConsts(AStringsActualConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringsActualConsts(AStringsActualConsts node)
    {
        InAStringsActualConsts(node);
        if(node.GetSillystrings() != null)
        {
            node.GetSillystrings().Apply(this);
        }
        OutAStringsActualConsts(node);
    }
    public virtual void InARecurseMethDecs(ARecurseMethDecs node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecurseMethDecs(ARecurseMethDecs node)
    {
        DefaultOut(node);
    }

    public override void CaseARecurseMethDecs(ARecurseMethDecs node)
    {
        InARecurseMethDecs(node);
        if(node.GetMethodsDecl() != null)
        {
            node.GetMethodsDecl().Apply(this);
        }
        if(node.GetMethDecs() != null)
        {
            node.GetMethDecs().Apply(this);
        }
        OutARecurseMethDecs(node);
    }
    public virtual void InAOneMethDecs(AOneMethDecs node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneMethDecs(AOneMethDecs node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneMethDecs(AOneMethDecs node)
    {
        InAOneMethDecs(node);
        if(node.GetMethodsDecl() != null)
        {
            node.GetMethodsDecl().Apply(this);
        }
        OutAOneMethDecs(node);
    }
    public virtual void InAParamsMethodsDecl(AParamsMethodsDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamsMethodsDecl(AParamsMethodsDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamsMethodsDecl(AParamsMethodsDecl node)
    {
        InAParamsMethodsDecl(node);
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        if(node.GetFormalParams() != null)
        {
            node.GetFormalParams().Apply(this);
        }
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        if(node.GetVoidMethods() != null)
        {
            node.GetVoidMethods().Apply(this);
        }
        OutAParamsMethodsDecl(node);
    }
    public virtual void InANoparamsMethodsDecl(ANoparamsMethodsDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoparamsMethodsDecl(ANoparamsMethodsDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseANoparamsMethodsDecl(ANoparamsMethodsDecl node)
    {
        InANoparamsMethodsDecl(node);
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        if(node.GetVoidMethods() != null)
        {
            node.GetVoidMethods().Apply(this);
        }
        OutANoparamsMethodsDecl(node);
    }
    public virtual void InAMainMethodsDecl(AMainMethodsDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainMethodsDecl(AMainMethodsDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainMethodsDecl(AMainMethodsDecl node)
    {
        InAMainMethodsDecl(node);
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        if(node.GetMainmeth() != null)
        {
            node.GetMainmeth().Apply(this);
        }
        if(node.GetVoidMethods() != null)
        {
            node.GetVoidMethods().Apply(this);
        }
        OutAMainMethodsDecl(node);
    }
    public virtual void InAEmptyparaMethodsDecl(AEmptyparaMethodsDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEmptyparaMethodsDecl(AEmptyparaMethodsDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAEmptyparaMethodsDecl(AEmptyparaMethodsDecl node)
    {
        InAEmptyparaMethodsDecl(node);
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        if(node.GetFormalParams() != null)
        {
            node.GetFormalParams().Apply(this);
        }
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        if(node.GetVoidMethods() != null)
        {
            node.GetVoidMethods().Apply(this);
        }
        OutAEmptyparaMethodsDecl(node);
    }
    public virtual void InAEmptynoparaMethodsDecl(AEmptynoparaMethodsDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEmptynoparaMethodsDecl(AEmptynoparaMethodsDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAEmptynoparaMethodsDecl(AEmptynoparaMethodsDecl node)
    {
        InAEmptynoparaMethodsDecl(node);
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        if(node.GetVoidMethods() != null)
        {
            node.GetVoidMethods().Apply(this);
        }
        OutAEmptynoparaMethodsDecl(node);
    }
    public virtual void InAEmptymainMethodsDecl(AEmptymainMethodsDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEmptymainMethodsDecl(AEmptymainMethodsDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAEmptymainMethodsDecl(AEmptymainMethodsDecl node)
    {
        InAEmptymainMethodsDecl(node);
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        if(node.GetMainmeth() != null)
        {
            node.GetMainmeth().Apply(this);
        }
        if(node.GetVoidMethods() != null)
        {
            node.GetVoidMethods().Apply(this);
        }
        OutAEmptymainMethodsDecl(node);
    }
    public virtual void InARecurFormalParams(ARecurFormalParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecurFormalParams(ARecurFormalParams node)
    {
        DefaultOut(node);
    }

    public override void CaseARecurFormalParams(ARecurFormalParams node)
    {
        InARecurFormalParams(node);
        if(node.GetFormalConsts() != null)
        {
            node.GetFormalConsts().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetFormalParams() != null)
        {
            node.GetFormalParams().Apply(this);
        }
        OutARecurFormalParams(node);
    }
    public virtual void InAOneFormalParams(AOneFormalParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneFormalParams(AOneFormalParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneFormalParams(AOneFormalParams node)
    {
        InAOneFormalParams(node);
        if(node.GetFormalConsts() != null)
        {
            node.GetFormalConsts().Apply(this);
        }
        OutAOneFormalParams(node);
    }
    public virtual void InAVarsFormalConsts(AVarsFormalConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarsFormalConsts(AVarsFormalConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarsFormalConsts(AVarsFormalConsts node)
    {
        InAVarsFormalConsts(node);
        if(node.GetId2() != null)
        {
            node.GetId2().Apply(this);
        }
        if(node.GetId1() != null)
        {
            node.GetId1().Apply(this);
        }
        OutAVarsFormalConsts(node);
    }
    public virtual void InAArrFormalConsts(AArrFormalConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrFormalConsts(AArrFormalConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrFormalConsts(AArrFormalConsts node)
    {
        InAArrFormalConsts(node);
        if(node.GetRightBracket() != null)
        {
            node.GetRightBracket().Apply(this);
        }
        if(node.GetLeftBracket() != null)
        {
            node.GetLeftBracket().Apply(this);
        }
        if(node.GetId2() != null)
        {
            node.GetId2().Apply(this);
        }
        if(node.GetId1() != null)
        {
            node.GetId1().Apply(this);
        }
        OutAArrFormalConsts(node);
    }
    public virtual void InAOrExpressLogic(AOrExpressLogic node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrExpressLogic(AOrExpressLogic node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrExpressLogic(AOrExpressLogic node)
    {
        InAOrExpressLogic(node);
        if(node.GetOps2() != null)
        {
            node.GetOps2().Apply(this);
        }
        if(node.GetOrNah() != null)
        {
            node.GetOrNah().Apply(this);
        }
        if(node.GetOps1() != null)
        {
            node.GetOps1().Apply(this);
        }
        OutAOrExpressLogic(node);
    }
    public virtual void InAAndExpressLogic(AAndExpressLogic node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndExpressLogic(AAndExpressLogic node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndExpressLogic(AAndExpressLogic node)
    {
        InAAndExpressLogic(node);
        if(node.GetOps2() != null)
        {
            node.GetOps2().Apply(this);
        }
        if(node.GetAndy() != null)
        {
            node.GetAndy().Apply(this);
        }
        if(node.GetOps1() != null)
        {
            node.GetOps1().Apply(this);
        }
        OutAAndExpressLogic(node);
    }
    public virtual void InANotExpressLogic(ANotExpressLogic node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotExpressLogic(ANotExpressLogic node)
    {
        DefaultOut(node);
    }

    public override void CaseANotExpressLogic(ANotExpressLogic node)
    {
        InANotExpressLogic(node);
        if(node.GetExpressComp() != null)
        {
            node.GetExpressComp().Apply(this);
        }
        if(node.GetNah() != null)
        {
            node.GetNah().Apply(this);
        }
        OutANotExpressLogic(node);
    }
    public virtual void InACompExpressLogic(ACompExpressLogic node)
    {
        DefaultIn(node);
    }

    public virtual void OutACompExpressLogic(ACompExpressLogic node)
    {
        DefaultOut(node);
    }

    public override void CaseACompExpressLogic(ACompExpressLogic node)
    {
        InACompExpressLogic(node);
        if(node.GetExpressComp() != null)
        {
            node.GetExpressComp().Apply(this);
        }
        OutACompExpressLogic(node);
    }
    public virtual void InAGteExpressComp(AGteExpressComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGteExpressComp(AGteExpressComp node)
    {
        DefaultOut(node);
    }

    public override void CaseAGteExpressComp(AGteExpressComp node)
    {
        InAGteExpressComp(node);
        if(node.GetOps2() != null)
        {
            node.GetOps2().Apply(this);
        }
        if(node.GetGreatThanEq() != null)
        {
            node.GetGreatThanEq().Apply(this);
        }
        if(node.GetOps1() != null)
        {
            node.GetOps1().Apply(this);
        }
        OutAGteExpressComp(node);
    }
    public virtual void InALteExpressComp(ALteExpressComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutALteExpressComp(ALteExpressComp node)
    {
        DefaultOut(node);
    }

    public override void CaseALteExpressComp(ALteExpressComp node)
    {
        InALteExpressComp(node);
        if(node.GetOps2() != null)
        {
            node.GetOps2().Apply(this);
        }
        if(node.GetLessThanEq() != null)
        {
            node.GetLessThanEq().Apply(this);
        }
        if(node.GetOps1() != null)
        {
            node.GetOps1().Apply(this);
        }
        OutALteExpressComp(node);
    }
    public virtual void InALtExpressComp(ALtExpressComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutALtExpressComp(ALtExpressComp node)
    {
        DefaultOut(node);
    }

    public override void CaseALtExpressComp(ALtExpressComp node)
    {
        InALtExpressComp(node);
        if(node.GetOps2() != null)
        {
            node.GetOps2().Apply(this);
        }
        if(node.GetLesser() != null)
        {
            node.GetLesser().Apply(this);
        }
        if(node.GetOps1() != null)
        {
            node.GetOps1().Apply(this);
        }
        OutALtExpressComp(node);
    }
    public virtual void InAGtExpressComp(AGtExpressComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGtExpressComp(AGtExpressComp node)
    {
        DefaultOut(node);
    }

    public override void CaseAGtExpressComp(AGtExpressComp node)
    {
        InAGtExpressComp(node);
        if(node.GetOps2() != null)
        {
            node.GetOps2().Apply(this);
        }
        if(node.GetGreater() != null)
        {
            node.GetGreater().Apply(this);
        }
        if(node.GetOps1() != null)
        {
            node.GetOps1().Apply(this);
        }
        OutAGtExpressComp(node);
    }
    public virtual void InAEqsExpressComp(AEqsExpressComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqsExpressComp(AEqsExpressComp node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqsExpressComp(AEqsExpressComp node)
    {
        InAEqsExpressComp(node);
        if(node.GetOps2() != null)
        {
            node.GetOps2().Apply(this);
        }
        if(node.GetEquators() != null)
        {
            node.GetEquators().Apply(this);
        }
        if(node.GetOps1() != null)
        {
            node.GetOps1().Apply(this);
        }
        OutAEqsExpressComp(node);
    }
    public virtual void InANoteqsExpressComp(ANoteqsExpressComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoteqsExpressComp(ANoteqsExpressComp node)
    {
        DefaultOut(node);
    }

    public override void CaseANoteqsExpressComp(ANoteqsExpressComp node)
    {
        InANoteqsExpressComp(node);
        if(node.GetOps2() != null)
        {
            node.GetOps2().Apply(this);
        }
        if(node.GetNoteqs() != null)
        {
            node.GetNoteqs().Apply(this);
        }
        if(node.GetOps1() != null)
        {
            node.GetOps1().Apply(this);
        }
        OutANoteqsExpressComp(node);
    }
    public virtual void InAMathExpressComp(AMathExpressComp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathExpressComp(AMathExpressComp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathExpressComp(AMathExpressComp node)
    {
        InAMathExpressComp(node);
        if(node.GetExpressAs() != null)
        {
            node.GetExpressAs().Apply(this);
        }
        OutAMathExpressComp(node);
    }
    public virtual void InAAddExpressAs(AAddExpressAs node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpressAs(AAddExpressAs node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpressAs(AAddExpressAs node)
    {
        InAAddExpressAs(node);
        if(node.GetExpressMd() != null)
        {
            node.GetExpressMd().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpressAs() != null)
        {
            node.GetExpressAs().Apply(this);
        }
        OutAAddExpressAs(node);
    }
    public virtual void InASubExpressAs(ASubExpressAs node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubExpressAs(ASubExpressAs node)
    {
        DefaultOut(node);
    }

    public override void CaseASubExpressAs(ASubExpressAs node)
    {
        InASubExpressAs(node);
        if(node.GetExpressMd() != null)
        {
            node.GetExpressMd().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpressAs() != null)
        {
            node.GetExpressAs().Apply(this);
        }
        OutASubExpressAs(node);
    }
    public virtual void InAMdExpressAs(AMdExpressAs node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMdExpressAs(AMdExpressAs node)
    {
        DefaultOut(node);
    }

    public override void CaseAMdExpressAs(AMdExpressAs node)
    {
        InAMdExpressAs(node);
        if(node.GetExpressMd() != null)
        {
            node.GetExpressMd().Apply(this);
        }
        OutAMdExpressAs(node);
    }
    public virtual void InAMultExpressMd(AMultExpressMd node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultExpressMd(AMultExpressMd node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultExpressMd(AMultExpressMd node)
    {
        InAMultExpressMd(node);
        if(node.GetExpressParent() != null)
        {
            node.GetExpressParent().Apply(this);
        }
        if(node.GetTimes() != null)
        {
            node.GetTimes().Apply(this);
        }
        if(node.GetExpressMd() != null)
        {
            node.GetExpressMd().Apply(this);
        }
        OutAMultExpressMd(node);
    }
    public virtual void InADivExpressMd(ADivExpressMd node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivExpressMd(ADivExpressMd node)
    {
        DefaultOut(node);
    }

    public override void CaseADivExpressMd(ADivExpressMd node)
    {
        InADivExpressMd(node);
        if(node.GetExpressParent() != null)
        {
            node.GetExpressParent().Apply(this);
        }
        if(node.GetDivide() != null)
        {
            node.GetDivide().Apply(this);
        }
        if(node.GetExpressMd() != null)
        {
            node.GetExpressMd().Apply(this);
        }
        OutADivExpressMd(node);
    }
    public virtual void InAParentExpressMd(AParentExpressMd node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParentExpressMd(AParentExpressMd node)
    {
        DefaultOut(node);
    }

    public override void CaseAParentExpressMd(AParentExpressMd node)
    {
        InAParentExpressMd(node);
        if(node.GetExpressParent() != null)
        {
            node.GetExpressParent().Apply(this);
        }
        OutAParentExpressMd(node);
    }
    public virtual void InAParentExpressParent(AParentExpressParent node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParentExpressParent(AParentExpressParent node)
    {
        DefaultOut(node);
    }

    public override void CaseAParentExpressParent(AParentExpressParent node)
    {
        InAParentExpressParent(node);
        if(node.GetRightParent() != null)
        {
            node.GetRightParent().Apply(this);
        }
        if(node.GetExpressLogic() != null)
        {
            node.GetExpressLogic().Apply(this);
        }
        if(node.GetLeftParent() != null)
        {
            node.GetLeftParent().Apply(this);
        }
        OutAParentExpressParent(node);
    }
    public virtual void InAConstsExpressParent(AConstsExpressParent node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstsExpressParent(AConstsExpressParent node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstsExpressParent(AConstsExpressParent node)
    {
        InAConstsExpressParent(node);
        if(node.GetExpressConsts() != null)
        {
            node.GetExpressConsts().Apply(this);
        }
        OutAConstsExpressParent(node);
    }
    public virtual void InANegvarExpressConsts(ANegvarExpressConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegvarExpressConsts(ANegvarExpressConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseANegvarExpressConsts(ANegvarExpressConsts node)
    {
        InANegvarExpressConsts(node);
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        OutANegvarExpressConsts(node);
    }
    public virtual void InANegintExpressConsts(ANegintExpressConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegintExpressConsts(ANegintExpressConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseANegintExpressConsts(ANegintExpressConsts node)
    {
        InANegintExpressConsts(node);
        if(node.GetInts() != null)
        {
            node.GetInts().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        OutANegintExpressConsts(node);
    }
    public virtual void InANegfloExpressConsts(ANegfloExpressConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegfloExpressConsts(ANegfloExpressConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseANegfloExpressConsts(ANegfloExpressConsts node)
    {
        InANegfloExpressConsts(node);
        if(node.GetRootbeerfloats() != null)
        {
            node.GetRootbeerfloats().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        OutANegfloExpressConsts(node);
    }
    public virtual void InAVarExpressConsts(AVarExpressConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarExpressConsts(AVarExpressConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarExpressConsts(AVarExpressConsts node)
    {
        InAVarExpressConsts(node);
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        OutAVarExpressConsts(node);
    }
    public virtual void InAIntsExpressConsts(AIntsExpressConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntsExpressConsts(AIntsExpressConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntsExpressConsts(AIntsExpressConsts node)
    {
        InAIntsExpressConsts(node);
        if(node.GetInts() != null)
        {
            node.GetInts().Apply(this);
        }
        OutAIntsExpressConsts(node);
    }
    public virtual void InAFloExpressConsts(AFloExpressConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloExpressConsts(AFloExpressConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloExpressConsts(AFloExpressConsts node)
    {
        InAFloExpressConsts(node);
        if(node.GetRootbeerfloats() != null)
        {
            node.GetRootbeerfloats().Apply(this);
        }
        OutAFloExpressConsts(node);
    }
    public virtual void InAArrayExpressConsts(AArrayExpressConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayExpressConsts(AArrayExpressConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayExpressConsts(AArrayExpressConsts node)
    {
        InAArrayExpressConsts(node);
        if(node.GetRightBracket() != null)
        {
            node.GetRightBracket().Apply(this);
        }
        if(node.GetExpressLogic() != null)
        {
            node.GetExpressLogic().Apply(this);
        }
        if(node.GetLeftBracket() != null)
        {
            node.GetLeftBracket().Apply(this);
        }
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        OutAArrayExpressConsts(node);
    }
    public virtual void InADeclarationsDeclarations(ADeclarationsDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationsDeclarations(ADeclarationsDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationsDeclarations(ADeclarationsDeclarations node)
    {
        InADeclarationsDeclarations(node);
        if(node.GetDeclaration() != null)
        {
            node.GetDeclaration().Apply(this);
        }
        if(node.GetDeclarations() != null)
        {
            node.GetDeclarations().Apply(this);
        }
        OutADeclarationsDeclarations(node);
    }
    public virtual void InADeclarationDeclarations(ADeclarationDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationDeclarations(ADeclarationDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationDeclarations(ADeclarationDeclarations node)
    {
        InADeclarationDeclarations(node);
        if(node.GetDeclaration() != null)
        {
            node.GetDeclaration().Apply(this);
        }
        OutADeclarationDeclarations(node);
    }
    public virtual void InAConstantsDeclaration(AConstantsDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantsDeclaration(AConstantsDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantsDeclaration(AConstantsDeclaration node)
    {
        InAConstantsDeclaration(node);
        if(node.GetConstantine() != null)
        {
            node.GetConstantine().Apply(this);
        }
        OutAConstantsDeclaration(node);
    }
    public virtual void InAVarsDeclaration(AVarsDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarsDeclaration(AVarsDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarsDeclaration(AVarsDeclaration node)
    {
        InAVarsDeclaration(node);
        if(node.GetLineEnder() != null)
        {
            node.GetLineEnder().Apply(this);
        }
        if(node.GetDeclOptions() != null)
        {
            node.GetDeclOptions().Apply(this);
        }
        OutAVarsDeclaration(node);
    }
    public virtual void InAVarDeclOptions(AVarDeclOptions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarDeclOptions(AVarDeclOptions node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarDeclOptions(AVarDeclOptions node)
    {
        InAVarDeclOptions(node);
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAVarDeclOptions(node);
    }
    public virtual void InAArrDeclOptions(AArrDeclOptions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrDeclOptions(AArrDeclOptions node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrDeclOptions(AArrDeclOptions node)
    {
        InAArrDeclOptions(node);
        if(node.GetRightBracket() != null)
        {
            node.GetRightBracket().Apply(this);
        }
        if(node.GetInts() != null)
        {
            node.GetInts().Apply(this);
        }
        if(node.GetLeftBracket() != null)
        {
            node.GetLeftBracket().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAArrDeclOptions(node);
    }
    public virtual void InAConstantine(AConstantine node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantine(AConstantine node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantine(AConstantine node)
    {
        InAConstantine(node);
        if(node.GetLineEnder() != null)
        {
            node.GetLineEnder().Apply(this);
        }
        if(node.GetNumConsts() != null)
        {
            node.GetNumConsts().Apply(this);
        }
        if(node.GetAssignments() != null)
        {
            node.GetAssignments().Apply(this);
        }
        if(node.GetId2() != null)
        {
            node.GetId2().Apply(this);
        }
        if(node.GetId1() != null)
        {
            node.GetId1().Apply(this);
        }
        if(node.GetConstantinople() != null)
        {
            node.GetConstantinople().Apply(this);
        }
        OutAConstantine(node);
    }
    public virtual void InAPosintNumConsts(APosintNumConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPosintNumConsts(APosintNumConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseAPosintNumConsts(APosintNumConsts node)
    {
        InAPosintNumConsts(node);
        if(node.GetInts() != null)
        {
            node.GetInts().Apply(this);
        }
        OutAPosintNumConsts(node);
    }
    public virtual void InANegintNumConsts(ANegintNumConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegintNumConsts(ANegintNumConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseANegintNumConsts(ANegintNumConsts node)
    {
        InANegintNumConsts(node);
        if(node.GetInts() != null)
        {
            node.GetInts().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        OutANegintNumConsts(node);
    }
    public virtual void InAPosfloNumConsts(APosfloNumConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPosfloNumConsts(APosfloNumConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseAPosfloNumConsts(APosfloNumConsts node)
    {
        InAPosfloNumConsts(node);
        if(node.GetRootbeerfloats() != null)
        {
            node.GetRootbeerfloats().Apply(this);
        }
        OutAPosfloNumConsts(node);
    }
    public virtual void InANegfloNumConsts(ANegfloNumConsts node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegfloNumConsts(ANegfloNumConsts node)
    {
        DefaultOut(node);
    }

    public override void CaseANegfloNumConsts(ANegfloNumConsts node)
    {
        InANegfloNumConsts(node);
        if(node.GetRootbeerfloats() != null)
        {
            node.GetRootbeerfloats().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        OutANegfloNumConsts(node);
    }
    public virtual void InAVarAssign(AVarAssign node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarAssign(AVarAssign node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarAssign(AVarAssign node)
    {
        InAVarAssign(node);
        if(node.GetLineEnder() != null)
        {
            node.GetLineEnder().Apply(this);
        }
        if(node.GetExpressLogic() != null)
        {
            node.GetExpressLogic().Apply(this);
        }
        if(node.GetAssignments() != null)
        {
            node.GetAssignments().Apply(this);
        }
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        OutAVarAssign(node);
    }
    public virtual void InAArrAssign(AArrAssign node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrAssign(AArrAssign node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrAssign(AArrAssign node)
    {
        InAArrAssign(node);
        if(node.GetLineEnder() != null)
        {
            node.GetLineEnder().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetAssignments() != null)
        {
            node.GetAssignments().Apply(this);
        }
        if(node.GetRightBracket() != null)
        {
            node.GetRightBracket().Apply(this);
        }
        if(node.GetArrayBound() != null)
        {
            node.GetArrayBound().Apply(this);
        }
        if(node.GetLeftBracket() != null)
        {
            node.GetLeftBracket().Apply(this);
        }
        if(node.GetVarNames() != null)
        {
            node.GetVarNames().Apply(this);
        }
        OutAArrAssign(node);
    }
}
} // namespace comp5210.analysis
