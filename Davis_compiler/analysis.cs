/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using comp5210.node;

namespace comp5210.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProgram(AProgram node);
    void CaseAIntegerConstants(AIntegerConstants node);
    void CaseAFloatConstants(AFloatConstants node);
    void CaseAStringConstants(AStringConstants node);
    void CaseANoneConstants(ANoneConstants node);
    void CaseAMainProgram(AMainProgram node);
    void CaseAFormalParam(AFormalParam node);
    void CaseANoneFormalParam(ANoneFormalParam node);
    void CaseAIfsStuff(AIfsStuff node);
    void CaseAWhilesStuff(AWhilesStuff node);
    void CaseAMethodsStuff(AMethodsStuff node);
    void CaseADeclsStuff(ADeclsStuff node);
    void CaseAAssignsStuff(AAssignsStuff node);
    void CaseANoneStuff(ANoneStuff node);
    void CaseARecursiveDeclarations(ARecursiveDeclarations node);
    void CaseANotDeclarations(ANotDeclarations node);
    void CaseASide1Declaration(ASide1Declaration node);
    void CaseASide2Declaration(ASide2Declaration node);
    void CaseARecursiveAssignments(ARecursiveAssignments node);
    void CaseANotAssignments(ANotAssignments node);
    void CaseAIntAssign(AIntAssign node);
    void CaseAFloatAssign(AFloatAssign node);
    void CaseAStringAssign(AStringAssign node);
    void CaseAIfState(AIfState node);
    void CaseAWhileState(AWhileState node);
    void CaseAMethodCall(AMethodCall node);
    void CaseASide1Methods(ASide1Methods node);
    void CaseASide2Methods(ASide2Methods node);
    void CaseASide3Methods(ASide3Methods node);
    void CaseASide4Methods(ASide4Methods node);

    void CaseTBang(TBang node);
    void CaseTWhitespace(TWhitespace node);
    void CaseTComment(TComment node);
    void CaseTOp(TOp node);
    void CaseTClass(TClass node);
    void CaseTPublic(TPublic node);
    void CaseTPrivate(TPrivate node);
    void CaseTStatic(TStatic node);
    void CaseTMain(TMain node);
    void CaseTReturn(TReturn node);
    void CaseTAssignment(TAssignment node);
    void CaseTString(TString node);
    void CaseTVar(TVar node);
    void CaseTIf(TIf node);
    void CaseTElse(TElse node);
    void CaseTWhile(TWhile node);
    void CaseTOpenParenthesis(TOpenParenthesis node);
    void CaseTCloseParenthesis(TCloseParenthesis node);
    void CaseTOpenBracket(TOpenBracket node);
    void CaseTCloseBracket(TCloseBracket node);
    void CaseTOpenBrace(TOpenBrace node);
    void CaseTCloseBrace(TCloseBrace node);
    void CaseTMultiply(TMultiply node);
    void CaseTDivide(TDivide node);
    void CaseTAdd(TAdd node);
    void CaseTSubtract(TSubtract node);
    void CaseTAnd(TAnd node);
    void CaseTOr(TOr node);
    void CaseTEquals(TEquals node);
    void CaseTGreater(TGreater node);
    void CaseTLess(TLess node);
    void CaseTGreaterEqual(TGreaterEqual node);
    void CaseTLessEqual(TLessEqual node);
    void CaseTNotEqual(TNotEqual node);
    void CaseTNot(TNot node);
    void CaseTFloat(TFloat node);
    void CaseTInt(TInt node);
    void CaseTSemicolon(TSemicolon node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProgram(AProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntegerConstants(AIntegerConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatConstants(AFloatConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringConstants(AStringConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneConstants(ANoneConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainProgram(AMainProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFormalParam(AFormalParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneFormalParam(ANoneFormalParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfsStuff(AIfsStuff node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhilesStuff(AWhilesStuff node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMethodsStuff(AMethodsStuff node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclsStuff(ADeclsStuff node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignsStuff(AAssignsStuff node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneStuff(ANoneStuff node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARecursiveDeclarations(ARecursiveDeclarations node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotDeclarations(ANotDeclarations node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide1Declaration(ASide1Declaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide2Declaration(ASide2Declaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARecursiveAssignments(ARecursiveAssignments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotAssignments(ANotAssignments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntAssign(AIntAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatAssign(AFloatAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringAssign(AStringAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfState(AIfState node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileState(AWhileState node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMethodCall(AMethodCall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide1Methods(ASide1Methods node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide2Methods(ASide2Methods node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide3Methods(ASide3Methods node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASide4Methods(ASide4Methods node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTBang(TBang node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhitespace(TWhitespace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOp(TOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTClass(TClass node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPublic(TPublic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPrivate(TPrivate node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTStatic(TStatic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMain(TMain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTReturn(TReturn node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAssignment(TAssignment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTVar(TVar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIf(TIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElse(TElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhile(TWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenParenthesis(TOpenParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCloseParenthesis(TCloseParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenBracket(TOpenBracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCloseBracket(TCloseBracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenBrace(TOpenBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCloseBrace(TCloseBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMultiply(TMultiply node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDivide(TDivide node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAdd(TAdd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSubtract(TSubtract node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAnd(TAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOr(TOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEquals(TEquals node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreater(TGreater node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLess(TLess node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreaterEqual(TGreaterEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessEqual(TLessEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNotEqual(TNotEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNot(TNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloat(TFloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInt(TInt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSemicolon(TSemicolon node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAIntegerConstants(AIntegerConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntegerConstants(AIntegerConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntegerConstants(AIntegerConstants node)
    {
        InAIntegerConstants(node);
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAIntegerConstants(node);
    }
    public virtual void InAFloatConstants(AFloatConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatConstants(AFloatConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatConstants(AFloatConstants node)
    {
        InAFloatConstants(node);
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAFloatConstants(node);
    }
    public virtual void InAStringConstants(AStringConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringConstants(AStringConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringConstants(AStringConstants node)
    {
        InAStringConstants(node);
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAStringConstants(node);
    }
    public virtual void InANoneConstants(ANoneConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneConstants(ANoneConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneConstants(ANoneConstants node)
    {
        InANoneConstants(node);
        OutANoneConstants(node);
    }
    public virtual void InAMainProgram(AMainProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainProgram(AMainProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainProgram(AMainProgram node)
    {
        InAMainProgram(node);
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetFormalParam() != null)
        {
            node.GetFormalParam().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        OutAMainProgram(node);
    }
    public virtual void InAFormalParam(AFormalParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFormalParam(AFormalParam node)
    {
        DefaultOut(node);
    }

    public override void CaseAFormalParam(AFormalParam node)
    {
        InAFormalParam(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetData() != null)
        {
            node.GetData().Apply(this);
        }
        if(node.GetFormalParam() != null)
        {
            node.GetFormalParam().Apply(this);
        }
        OutAFormalParam(node);
    }
    public virtual void InANoneFormalParam(ANoneFormalParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneFormalParam(ANoneFormalParam node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneFormalParam(ANoneFormalParam node)
    {
        InANoneFormalParam(node);
        OutANoneFormalParam(node);
    }
    public virtual void InAIfsStuff(AIfsStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfsStuff(AIfsStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfsStuff(AIfsStuff node)
    {
        InAIfsStuff(node);
        if(node.GetIfState() != null)
        {
            node.GetIfState().Apply(this);
        }
        OutAIfsStuff(node);
    }
    public virtual void InAWhilesStuff(AWhilesStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhilesStuff(AWhilesStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhilesStuff(AWhilesStuff node)
    {
        InAWhilesStuff(node);
        if(node.GetWhileState() != null)
        {
            node.GetWhileState().Apply(this);
        }
        OutAWhilesStuff(node);
    }
    public virtual void InAMethodsStuff(AMethodsStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodsStuff(AMethodsStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodsStuff(AMethodsStuff node)
    {
        InAMethodsStuff(node);
        if(node.GetMethodCall() != null)
        {
            node.GetMethodCall().Apply(this);
        }
        OutAMethodsStuff(node);
    }
    public virtual void InADeclsStuff(ADeclsStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclsStuff(ADeclsStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclsStuff(ADeclsStuff node)
    {
        InADeclsStuff(node);
        if(node.GetDeclarations() != null)
        {
            node.GetDeclarations().Apply(this);
        }
        OutADeclsStuff(node);
    }
    public virtual void InAAssignsStuff(AAssignsStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignsStuff(AAssignsStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignsStuff(AAssignsStuff node)
    {
        InAAssignsStuff(node);
        if(node.GetAssignments() != null)
        {
            node.GetAssignments().Apply(this);
        }
        OutAAssignsStuff(node);
    }
    public virtual void InANoneStuff(ANoneStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneStuff(ANoneStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneStuff(ANoneStuff node)
    {
        InANoneStuff(node);
        OutANoneStuff(node);
    }
    public virtual void InARecursiveDeclarations(ARecursiveDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursiveDeclarations(ARecursiveDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursiveDeclarations(ARecursiveDeclarations node)
    {
        InARecursiveDeclarations(node);
        if(node.GetDeclaration() != null)
        {
            node.GetDeclaration().Apply(this);
        }
        if(node.GetDeclarations() != null)
        {
            node.GetDeclarations().Apply(this);
        }
        OutARecursiveDeclarations(node);
    }
    public virtual void InANotDeclarations(ANotDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotDeclarations(ANotDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseANotDeclarations(ANotDeclarations node)
    {
        InANotDeclarations(node);
        if(node.GetDeclaration() != null)
        {
            node.GetDeclaration().Apply(this);
        }
        OutANotDeclarations(node);
    }
    public virtual void InASide1Declaration(ASide1Declaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide1Declaration(ASide1Declaration node)
    {
        DefaultOut(node);
    }

    public override void CaseASide1Declaration(ASide1Declaration node)
    {
        InASide1Declaration(node);
        if(node.GetData() != null)
        {
            node.GetData().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutASide1Declaration(node);
    }
    public virtual void InASide2Declaration(ASide2Declaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide2Declaration(ASide2Declaration node)
    {
        DefaultOut(node);
    }

    public override void CaseASide2Declaration(ASide2Declaration node)
    {
        InASide2Declaration(node);
        if(node.GetData() != null)
        {
            node.GetData().Apply(this);
        }
        if(node.GetVar1() != null)
        {
            node.GetVar1().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutASide2Declaration(node);
    }
    public virtual void InARecursiveAssignments(ARecursiveAssignments node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursiveAssignments(ARecursiveAssignments node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursiveAssignments(ARecursiveAssignments node)
    {
        InARecursiveAssignments(node);
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetAssignments() != null)
        {
            node.GetAssignments().Apply(this);
        }
        OutARecursiveAssignments(node);
    }
    public virtual void InANotAssignments(ANotAssignments node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotAssignments(ANotAssignments node)
    {
        DefaultOut(node);
    }

    public override void CaseANotAssignments(ANotAssignments node)
    {
        InANotAssignments(node);
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        OutANotAssignments(node);
    }
    public virtual void InAIntAssign(AIntAssign node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntAssign(AIntAssign node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntAssign(AIntAssign node)
    {
        InAIntAssign(node);
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAIntAssign(node);
    }
    public virtual void InAFloatAssign(AFloatAssign node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatAssign(AFloatAssign node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatAssign(AFloatAssign node)
    {
        InAFloatAssign(node);
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAFloatAssign(node);
    }
    public virtual void InAStringAssign(AStringAssign node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringAssign(AStringAssign node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringAssign(AStringAssign node)
    {
        InAStringAssign(node);
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        OutAStringAssign(node);
    }
    public virtual void InAIfState(AIfState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfState(AIfState node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfState(AIfState node)
    {
        InAIfState(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        OutAIfState(node);
    }
    public virtual void InAWhileState(AWhileState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileState(AWhileState node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileState(AWhileState node)
    {
        InAWhileState(node);
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        OutAWhileState(node);
    }
    public virtual void InAMethodCall(AMethodCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodCall(AMethodCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodCall(AMethodCall node)
    {
        InAMethodCall(node);
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetFormalParam() != null)
        {
            node.GetFormalParam().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        OutAMethodCall(node);
    }
    public virtual void InASide1Methods(ASide1Methods node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide1Methods(ASide1Methods node)
    {
        DefaultOut(node);
    }

    public override void CaseASide1Methods(ASide1Methods node)
    {
        InASide1Methods(node);
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetFormalParam() != null)
        {
            node.GetFormalParam().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        OutASide1Methods(node);
    }
    public virtual void InASide2Methods(ASide2Methods node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide2Methods(ASide2Methods node)
    {
        DefaultOut(node);
    }

    public override void CaseASide2Methods(ASide2Methods node)
    {
        InASide2Methods(node);
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetFormalParam() != null)
        {
            node.GetFormalParam().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        OutASide2Methods(node);
    }
    public virtual void InASide3Methods(ASide3Methods node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide3Methods(ASide3Methods node)
    {
        DefaultOut(node);
    }

    public override void CaseASide3Methods(ASide3Methods node)
    {
        InASide3Methods(node);
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetReturn() != null)
        {
            node.GetReturn().Apply(this);
        }
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        OutASide3Methods(node);
    }
    public virtual void InASide4Methods(ASide4Methods node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide4Methods(ASide4Methods node)
    {
        DefaultOut(node);
    }

    public override void CaseASide4Methods(ASide4Methods node)
    {
        InASide4Methods(node);
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetReturn() != null)
        {
            node.GetReturn().Apply(this);
        }
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        OutASide4Methods(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAIntegerConstants(AIntegerConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntegerConstants(AIntegerConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntegerConstants(AIntegerConstants node)
    {
        InAIntegerConstants(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        OutAIntegerConstants(node);
    }
    public virtual void InAFloatConstants(AFloatConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatConstants(AFloatConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatConstants(AFloatConstants node)
    {
        InAFloatConstants(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        OutAFloatConstants(node);
    }
    public virtual void InAStringConstants(AStringConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringConstants(AStringConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringConstants(AStringConstants node)
    {
        InAStringConstants(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        OutAStringConstants(node);
    }
    public virtual void InANoneConstants(ANoneConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneConstants(ANoneConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneConstants(ANoneConstants node)
    {
        InANoneConstants(node);
        OutANoneConstants(node);
    }
    public virtual void InAMainProgram(AMainProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainProgram(AMainProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainProgram(AMainProgram node)
    {
        InAMainProgram(node);
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetFormalParam() != null)
        {
            node.GetFormalParam().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        OutAMainProgram(node);
    }
    public virtual void InAFormalParam(AFormalParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFormalParam(AFormalParam node)
    {
        DefaultOut(node);
    }

    public override void CaseAFormalParam(AFormalParam node)
    {
        InAFormalParam(node);
        if(node.GetFormalParam() != null)
        {
            node.GetFormalParam().Apply(this);
        }
        if(node.GetData() != null)
        {
            node.GetData().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAFormalParam(node);
    }
    public virtual void InANoneFormalParam(ANoneFormalParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneFormalParam(ANoneFormalParam node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneFormalParam(ANoneFormalParam node)
    {
        InANoneFormalParam(node);
        OutANoneFormalParam(node);
    }
    public virtual void InAIfsStuff(AIfsStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfsStuff(AIfsStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfsStuff(AIfsStuff node)
    {
        InAIfsStuff(node);
        if(node.GetIfState() != null)
        {
            node.GetIfState().Apply(this);
        }
        OutAIfsStuff(node);
    }
    public virtual void InAWhilesStuff(AWhilesStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhilesStuff(AWhilesStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhilesStuff(AWhilesStuff node)
    {
        InAWhilesStuff(node);
        if(node.GetWhileState() != null)
        {
            node.GetWhileState().Apply(this);
        }
        OutAWhilesStuff(node);
    }
    public virtual void InAMethodsStuff(AMethodsStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodsStuff(AMethodsStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodsStuff(AMethodsStuff node)
    {
        InAMethodsStuff(node);
        if(node.GetMethodCall() != null)
        {
            node.GetMethodCall().Apply(this);
        }
        OutAMethodsStuff(node);
    }
    public virtual void InADeclsStuff(ADeclsStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclsStuff(ADeclsStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclsStuff(ADeclsStuff node)
    {
        InADeclsStuff(node);
        if(node.GetDeclarations() != null)
        {
            node.GetDeclarations().Apply(this);
        }
        OutADeclsStuff(node);
    }
    public virtual void InAAssignsStuff(AAssignsStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignsStuff(AAssignsStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignsStuff(AAssignsStuff node)
    {
        InAAssignsStuff(node);
        if(node.GetAssignments() != null)
        {
            node.GetAssignments().Apply(this);
        }
        OutAAssignsStuff(node);
    }
    public virtual void InANoneStuff(ANoneStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneStuff(ANoneStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneStuff(ANoneStuff node)
    {
        InANoneStuff(node);
        OutANoneStuff(node);
    }
    public virtual void InARecursiveDeclarations(ARecursiveDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursiveDeclarations(ARecursiveDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursiveDeclarations(ARecursiveDeclarations node)
    {
        InARecursiveDeclarations(node);
        if(node.GetDeclarations() != null)
        {
            node.GetDeclarations().Apply(this);
        }
        if(node.GetDeclaration() != null)
        {
            node.GetDeclaration().Apply(this);
        }
        OutARecursiveDeclarations(node);
    }
    public virtual void InANotDeclarations(ANotDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotDeclarations(ANotDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseANotDeclarations(ANotDeclarations node)
    {
        InANotDeclarations(node);
        if(node.GetDeclaration() != null)
        {
            node.GetDeclaration().Apply(this);
        }
        OutANotDeclarations(node);
    }
    public virtual void InASide1Declaration(ASide1Declaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide1Declaration(ASide1Declaration node)
    {
        DefaultOut(node);
    }

    public override void CaseASide1Declaration(ASide1Declaration node)
    {
        InASide1Declaration(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetData() != null)
        {
            node.GetData().Apply(this);
        }
        OutASide1Declaration(node);
    }
    public virtual void InASide2Declaration(ASide2Declaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide2Declaration(ASide2Declaration node)
    {
        DefaultOut(node);
    }

    public override void CaseASide2Declaration(ASide2Declaration node)
    {
        InASide2Declaration(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetVar1() != null)
        {
            node.GetVar1().Apply(this);
        }
        if(node.GetData() != null)
        {
            node.GetData().Apply(this);
        }
        OutASide2Declaration(node);
    }
    public virtual void InARecursiveAssignments(ARecursiveAssignments node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursiveAssignments(ARecursiveAssignments node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursiveAssignments(ARecursiveAssignments node)
    {
        InARecursiveAssignments(node);
        if(node.GetAssignments() != null)
        {
            node.GetAssignments().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        OutARecursiveAssignments(node);
    }
    public virtual void InANotAssignments(ANotAssignments node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotAssignments(ANotAssignments node)
    {
        DefaultOut(node);
    }

    public override void CaseANotAssignments(ANotAssignments node)
    {
        InANotAssignments(node);
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        OutANotAssignments(node);
    }
    public virtual void InAIntAssign(AIntAssign node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntAssign(AIntAssign node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntAssign(AIntAssign node)
    {
        InAIntAssign(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        OutAIntAssign(node);
    }
    public virtual void InAFloatAssign(AFloatAssign node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatAssign(AFloatAssign node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatAssign(AFloatAssign node)
    {
        InAFloatAssign(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        OutAFloatAssign(node);
    }
    public virtual void InAStringAssign(AStringAssign node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringAssign(AStringAssign node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringAssign(AStringAssign node)
    {
        InAStringAssign(node);
        if(node.GetSemicolon() != null)
        {
            node.GetSemicolon().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        OutAStringAssign(node);
    }
    public virtual void InAIfState(AIfState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfState(AIfState node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfState(AIfState node)
    {
        InAIfState(node);
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutAIfState(node);
    }
    public virtual void InAWhileState(AWhileState node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileState(AWhileState node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileState(AWhileState node)
    {
        InAWhileState(node);
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        OutAWhileState(node);
    }
    public virtual void InAMethodCall(AMethodCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodCall(AMethodCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodCall(AMethodCall node)
    {
        InAMethodCall(node);
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetFormalParam() != null)
        {
            node.GetFormalParam().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        OutAMethodCall(node);
    }
    public virtual void InASide1Methods(ASide1Methods node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide1Methods(ASide1Methods node)
    {
        DefaultOut(node);
    }

    public override void CaseASide1Methods(ASide1Methods node)
    {
        InASide1Methods(node);
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetFormalParam() != null)
        {
            node.GetFormalParam().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetVar() != null)
        {
            node.GetVar().Apply(this);
        }
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        OutASide1Methods(node);
    }
    public virtual void InASide2Methods(ASide2Methods node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide2Methods(ASide2Methods node)
    {
        DefaultOut(node);
    }

    public override void CaseASide2Methods(ASide2Methods node)
    {
        InASide2Methods(node);
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetFormalParam() != null)
        {
            node.GetFormalParam().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        OutASide2Methods(node);
    }
    public virtual void InASide3Methods(ASide3Methods node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide3Methods(ASide3Methods node)
    {
        DefaultOut(node);
    }

    public override void CaseASide3Methods(ASide3Methods node)
    {
        InASide3Methods(node);
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        if(node.GetReturn() != null)
        {
            node.GetReturn().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetStatic() != null)
        {
            node.GetStatic().Apply(this);
        }
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        OutASide3Methods(node);
    }
    public virtual void InASide4Methods(ASide4Methods node)
    {
        DefaultIn(node);
    }

    public virtual void OutASide4Methods(ASide4Methods node)
    {
        DefaultOut(node);
    }

    public override void CaseASide4Methods(ASide4Methods node)
    {
        InASide4Methods(node);
        if(node.GetCloseBracket() != null)
        {
            node.GetCloseBracket().Apply(this);
        }
        if(node.GetReturn() != null)
        {
            node.GetReturn().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetOpenBracket() != null)
        {
            node.GetOpenBracket().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        OutASide4Methods(node);
    }
}
} // namespace comp5210.analysis
