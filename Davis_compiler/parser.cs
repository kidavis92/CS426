/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using comp5210.node;
using comp5210.lexer;
using comp5210.analysis;

namespace comp5210.parser {

public class ParserException : ApplicationException
{
    Token token;

    public ParserException(Token token, String  message) : base(message)
    {
        this.token = token;
    }

    public Token Token
    {
      get { return token; }
    }
}

internal class State
{
    internal int state;
    internal ArrayList nodes;

    internal State(int state, ArrayList nodes)
    {
        this.state = state;
        this.nodes = nodes;
    }
}

internal class TokenIndex : AnalysisAdapter
{
    internal int index;

    public override void CaseTIf(TIf node)
    {
        index = 0;
    }

    public override void CaseTElse(TElse node)
    {
        index = 1;
    }

    public override void CaseTClass(TClass node)
    {
        index = 2;
    }

    public override void CaseTConstantinople(TConstantinople node)
    {
        index = 3;
    }

    public override void CaseTPublic(TPublic node)
    {
        index = 4;
    }

    public override void CaseTPrivate(TPrivate node)
    {
        index = 5;
    }

    public override void CaseTReturn(TReturn node)
    {
        index = 6;
    }

    public override void CaseTWhile(TWhile node)
    {
        index = 7;
    }

    public override void CaseTMainmeth(TMainmeth node)
    {
        index = 8;
    }

    public override void CaseTVoidMethods(TVoidMethods node)
    {
        index = 9;
    }

    public override void CaseTLeftParent(TLeftParent node)
    {
        index = 10;
    }

    public override void CaseTRightParent(TRightParent node)
    {
        index = 11;
    }

    public override void CaseTTimes(TTimes node)
    {
        index = 12;
    }

    public override void CaseTDivide(TDivide node)
    {
        index = 13;
    }

    public override void CaseTPlus(TPlus node)
    {
        index = 14;
    }

    public override void CaseTMinus(TMinus node)
    {
        index = 15;
    }

    public override void CaseTAndy(TAndy node)
    {
        index = 16;
    }

    public override void CaseTOrNah(TOrNah node)
    {
        index = 17;
    }

    public override void CaseTNah(TNah node)
    {
        index = 18;
    }

    public override void CaseTEquators(TEquators node)
    {
        index = 19;
    }

    public override void CaseTNoteqs(TNoteqs node)
    {
        index = 20;
    }

    public override void CaseTGreatThanEq(TGreatThanEq node)
    {
        index = 21;
    }

    public override void CaseTLessThanEq(TLessThanEq node)
    {
        index = 22;
    }

    public override void CaseTGreater(TGreater node)
    {
        index = 23;
    }

    public override void CaseTLesser(TLesser node)
    {
        index = 24;
    }

    public override void CaseTAssignments(TAssignments node)
    {
        index = 25;
    }

    public override void CaseTLineEnder(TLineEnder node)
    {
        index = 26;
    }

    public override void CaseTLeftBracket(TLeftBracket node)
    {
        index = 27;
    }

    public override void CaseTRightBracket(TRightBracket node)
    {
        index = 28;
    }

    public override void CaseTLeftCurly(TLeftCurly node)
    {
        index = 29;
    }

    public override void CaseTRightCurly(TRightCurly node)
    {
        index = 30;
    }

    public override void CaseTComma(TComma node)
    {
        index = 31;
    }

    public override void CaseTSillystrings(TSillystrings node)
    {
        index = 32;
    }

    public override void CaseTRootbeerfloats(TRootbeerfloats node)
    {
        index = 33;
    }

    public override void CaseTInts(TInts node)
    {
        index = 34;
    }

    public override void CaseTVarNames(TVarNames node)
    {
        index = 35;
    }

    public override void CaseEOF(EOF node)
    {
        index = 36;
    }
}

public class Parser
{
    private Analysis ignoredTokens = new AnalysisAdapter();
    public Analysis IgnoredTokens
    {
      get { return ignoredTokens; }
    }

    protected ArrayList nodeList;

    private Lexer lexer;
    private Stack stack = new Stack();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private TokenIndex converter = new TokenIndex();
    private int[] action = new int[2];

    private const int SHIFT = 0;
    private const int REDUCE = 1;
    private const int ACCEPT = 2;
    private const int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private int GoTo(int index)
    {
        int state = State();
        int low = 1;
        int high = gotoTable[index].Length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void Push(int numstate, ArrayList listNode)
    {
        this.nodeList = listNode;

        stack.Push(new State(numstate, this.nodeList));
    }

    private int State()
    {
        State s = (State) stack.Peek();
        return s.state;
    }

    private ArrayList Pop()
    {
        return (ArrayList) ((State) stack.Pop()).nodes;
    }

    private int Index(Switchable token)
    {
        converter.index = -1;
        token.Apply(converter);
        return converter.index;
    }

    public Start Parse()
    {
        Push(0, null);

        IList ign = null;
        while(true)
        {
            while(Index(lexer.Peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedList(NodeCast.Instance);
                }

                ign.Add(lexer.Next());
            }

            if(ign != null)
            {
                ignoredTokens.SetIn(lexer.Peek(), ign);
                ign = null;
            }

            last_pos = lexer.Peek().Pos;
            last_line = lexer.Peek().Line;
            last_token = lexer.Peek();

            int index = Index(lexer.Peek());
            action[0] = actionTable[State()][0][1];
            action[1] = actionTable[State()][0][2];

            int low = 1;
            int high = actionTable[State()].Length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[State()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[State()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[State()][middle][1];
                    action[1] = actionTable[State()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
        {
            ArrayList list = new ArrayList();
            list.Add(lexer.Next());
                        Push(action[1], list);
                        last_shift = action[1];
                    }
        break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0:
        {
      ArrayList list = New0();
      Push(GoTo(0), list);
        }
        break;
                    case 1:
        {
      ArrayList list = New1();
      Push(GoTo(1), list);
        }
        break;
                    case 2:
        {
      ArrayList list = New2();
      Push(GoTo(1), list);
        }
        break;
                    case 3:
        {
      ArrayList list = New3();
      Push(GoTo(2), list);
        }
        break;
                    case 4:
        {
      ArrayList list = New4();
      Push(GoTo(2), list);
        }
        break;
                    case 5:
        {
      ArrayList list = New5();
      Push(GoTo(2), list);
        }
        break;
                    case 6:
        {
      ArrayList list = New6();
      Push(GoTo(2), list);
        }
        break;
                    case 7:
        {
      ArrayList list = New7();
      Push(GoTo(2), list);
        }
        break;
                    case 8:
        {
      ArrayList list = New8();
      Push(GoTo(3), list);
        }
        break;
                    case 9:
        {
      ArrayList list = New9();
      Push(GoTo(3), list);
        }
        break;
                    case 10:
        {
      ArrayList list = New10();
      Push(GoTo(4), list);
        }
        break;
                    case 11:
        {
      ArrayList list = New11();
      Push(GoTo(5), list);
        }
        break;
                    case 12:
        {
      ArrayList list = New12();
      Push(GoTo(5), list);
        }
        break;
                    case 13:
        {
      ArrayList list = New13();
      Push(GoTo(6), list);
        }
        break;
                    case 14:
        {
      ArrayList list = New14();
      Push(GoTo(6), list);
        }
        break;
                    case 15:
        {
      ArrayList list = New15();
      Push(GoTo(7), list);
        }
        break;
                    case 16:
        {
      ArrayList list = New16();
      Push(GoTo(7), list);
        }
        break;
                    case 17:
        {
      ArrayList list = New17();
      Push(GoTo(8), list);
        }
        break;
                    case 18:
        {
      ArrayList list = New18();
      Push(GoTo(8), list);
        }
        break;
                    case 19:
        {
      ArrayList list = New19();
      Push(GoTo(9), list);
        }
        break;
                    case 20:
        {
      ArrayList list = New20();
      Push(GoTo(9), list);
        }
        break;
                    case 21:
        {
      ArrayList list = New21();
      Push(GoTo(9), list);
        }
        break;
                    case 22:
        {
      ArrayList list = New22();
      Push(GoTo(9), list);
        }
        break;
                    case 23:
        {
      ArrayList list = New23();
      Push(GoTo(9), list);
        }
        break;
                    case 24:
        {
      ArrayList list = New24();
      Push(GoTo(9), list);
        }
        break;
                    case 25:
        {
      ArrayList list = New25();
      Push(GoTo(10), list);
        }
        break;
                    case 26:
        {
      ArrayList list = New26();
      Push(GoTo(10), list);
        }
        break;
                    case 27:
        {
      ArrayList list = New27();
      Push(GoTo(11), list);
        }
        break;
                    case 28:
        {
      ArrayList list = New28();
      Push(GoTo(11), list);
        }
        break;
                    case 29:
        {
      ArrayList list = New29();
      Push(GoTo(12), list);
        }
        break;
                    case 30:
        {
      ArrayList list = New30();
      Push(GoTo(12), list);
        }
        break;
                    case 31:
        {
      ArrayList list = New31();
      Push(GoTo(12), list);
        }
        break;
                    case 32:
        {
      ArrayList list = New32();
      Push(GoTo(12), list);
        }
        break;
                    case 33:
        {
      ArrayList list = New33();
      Push(GoTo(13), list);
        }
        break;
                    case 34:
        {
      ArrayList list = New34();
      Push(GoTo(13), list);
        }
        break;
                    case 35:
        {
      ArrayList list = New35();
      Push(GoTo(13), list);
        }
        break;
                    case 36:
        {
      ArrayList list = New36();
      Push(GoTo(13), list);
        }
        break;
                    case 37:
        {
      ArrayList list = New37();
      Push(GoTo(13), list);
        }
        break;
                    case 38:
        {
      ArrayList list = New38();
      Push(GoTo(13), list);
        }
        break;
                    case 39:
        {
      ArrayList list = New39();
      Push(GoTo(13), list);
        }
        break;
                    case 40:
        {
      ArrayList list = New40();
      Push(GoTo(14), list);
        }
        break;
                    case 41:
        {
      ArrayList list = New41();
      Push(GoTo(14), list);
        }
        break;
                    case 42:
        {
      ArrayList list = New42();
      Push(GoTo(14), list);
        }
        break;
                    case 43:
        {
      ArrayList list = New43();
      Push(GoTo(15), list);
        }
        break;
                    case 44:
        {
      ArrayList list = New44();
      Push(GoTo(15), list);
        }
        break;
                    case 45:
        {
      ArrayList list = New45();
      Push(GoTo(15), list);
        }
        break;
                    case 46:
        {
      ArrayList list = New46();
      Push(GoTo(16), list);
        }
        break;
                    case 47:
        {
      ArrayList list = New47();
      Push(GoTo(16), list);
        }
        break;
                    case 48:
        {
      ArrayList list = New48();
      Push(GoTo(17), list);
        }
        break;
                    case 49:
        {
      ArrayList list = New49();
      Push(GoTo(17), list);
        }
        break;
                    case 50:
        {
      ArrayList list = New50();
      Push(GoTo(17), list);
        }
        break;
                    case 51:
        {
      ArrayList list = New51();
      Push(GoTo(17), list);
        }
        break;
                    case 52:
        {
      ArrayList list = New52();
      Push(GoTo(17), list);
        }
        break;
                    case 53:
        {
      ArrayList list = New53();
      Push(GoTo(17), list);
        }
        break;
                    case 54:
        {
      ArrayList list = New54();
      Push(GoTo(17), list);
        }
        break;
                    case 55:
        {
      ArrayList list = New55();
      Push(GoTo(18), list);
        }
        break;
                    case 56:
        {
      ArrayList list = New56();
      Push(GoTo(18), list);
        }
        break;
                    case 57:
        {
      ArrayList list = New57();
      Push(GoTo(19), list);
        }
        break;
                    case 58:
        {
      ArrayList list = New58();
      Push(GoTo(19), list);
        }
        break;
                    case 59:
        {
      ArrayList list = New59();
      Push(GoTo(20), list);
        }
        break;
                    case 60:
        {
      ArrayList list = New60();
      Push(GoTo(20), list);
        }
        break;
                    case 61:
        {
      ArrayList list = New61();
      Push(GoTo(21), list);
        }
        break;
                    case 62:
        {
      ArrayList list = New62();
      Push(GoTo(22), list);
        }
        break;
                    case 63:
        {
      ArrayList list = New63();
      Push(GoTo(22), list);
        }
        break;
                    case 64:
        {
      ArrayList list = New64();
      Push(GoTo(22), list);
        }
        break;
                    case 65:
        {
      ArrayList list = New65();
      Push(GoTo(22), list);
        }
        break;
                    case 66:
        {
      ArrayList list = New66();
      Push(GoTo(23), list);
        }
        break;
                    case 67:
        {
      ArrayList list = New67();
      Push(GoTo(23), list);
        }
        break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.Next();
                        PProgram node1 = (PProgram) ((ArrayList)Pop())[0];
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList New0()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDeclarations pdeclarationsNode2 = (PDeclarations)nodeArrayList1[0];
        PMethDecs pmethdecsNode3 = (PMethDecs)nodeArrayList2[0];
        AProgram pprogramNode1 = new AProgram (
              pdeclarationsNode2,
              pmethdecsNode3
        );
        nodeList.Add(pprogramNode1);
        return nodeList;
    }
    ArrayList New1()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PStatements pstatementsNode2 = (PStatements)nodeArrayList1[0];
        PStatement pstatementNode3 = (PStatement)nodeArrayList2[0];
        ARecursStatements pstatementsNode1 = new ARecursStatements (
              pstatementsNode2,
              pstatementNode3
        );
        nodeList.Add(pstatementsNode1);
        return nodeList;
    }
    ArrayList New2()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PStatement pstatementNode2 = (PStatement)nodeArrayList1[0];
        AOneStatements pstatementsNode1 = new AOneStatements (
              pstatementNode2
        );
        nodeList.Add(pstatementsNode1);
        return nodeList;
    }
    ArrayList New3()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PIfState pifstateNode2 = (PIfState)nodeArrayList1[0];
        AIfsStatement pstatementNode1 = new AIfsStatement (
              pifstateNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New4()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PMethodsCall pmethodscallNode2 = (PMethodsCall)nodeArrayList1[0];
        AMethStatement pstatementNode1 = new AMethStatement (
              pmethodscallNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New5()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PWhileState pwhilestateNode2 = (PWhileState)nodeArrayList1[0];
        AWhilesStatement pstatementNode1 = new AWhilesStatement (
              pwhilestateNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New6()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDeclaration pdeclarationNode2 = (PDeclaration)nodeArrayList1[0];
        ADeclStatement pstatementNode1 = new ADeclStatement (
              pdeclarationNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New7()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAssign passignNode2 = (PAssign)nodeArrayList1[0];
        AAssStatement pstatementNode1 = new AAssStatement (
              passignNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New8()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIf tifNode2 = (TIf)nodeArrayList1[0];
        TLeftParent tleftparentNode3 = (TLeftParent)nodeArrayList2[0];
        PExpressLogic pexpresslogicNode4 = (PExpressLogic)nodeArrayList3[0];
        TRightParent trightparentNode5 = (TRightParent)nodeArrayList4[0];
        TLeftCurly tleftcurlyNode6 = (TLeftCurly)nodeArrayList5[0];
        PStatements pstatementsNode7 = (PStatements)nodeArrayList6[0];
        TRightCurly trightcurlyNode8 = (TRightCurly)nodeArrayList7[0];
        AIfsIfState pifstateNode1 = new AIfsIfState (
              tifNode2,
              tleftparentNode3,
              pexpresslogicNode4,
              trightparentNode5,
              tleftcurlyNode6,
              pstatementsNode7,
              trightcurlyNode8
        );
        nodeList.Add(pifstateNode1);
        return nodeList;
    }
    ArrayList New9()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList11 = (ArrayList) Pop();
        ArrayList nodeArrayList10 = (ArrayList) Pop();
        ArrayList nodeArrayList9 = (ArrayList) Pop();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIf tifNode2 = (TIf)nodeArrayList1[0];
        TLeftParent tleftparentNode3 = (TLeftParent)nodeArrayList2[0];
        PExpressLogic pexpresslogicNode4 = (PExpressLogic)nodeArrayList3[0];
        TRightParent trightparentNode5 = (TRightParent)nodeArrayList4[0];
        TLeftCurly tleftcurlyNode6 = (TLeftCurly)nodeArrayList5[0];
        PStatements pstatementsNode7 = (PStatements)nodeArrayList6[0];
        TRightCurly trightcurlyNode8 = (TRightCurly)nodeArrayList7[0];
        TElse telseNode9 = (TElse)nodeArrayList8[0];
        TLeftCurly tleftcurlyNode10 = (TLeftCurly)nodeArrayList9[0];
        PStatements pstatementsNode11 = (PStatements)nodeArrayList10[0];
        TRightCurly trightcurlyNode12 = (TRightCurly)nodeArrayList11[0];
        AElsesIfState pifstateNode1 = new AElsesIfState (
              tifNode2,
              tleftparentNode3,
              pexpresslogicNode4,
              trightparentNode5,
              tleftcurlyNode6,
              pstatementsNode7,
              trightcurlyNode8,
              telseNode9,
              tleftcurlyNode10,
              pstatementsNode11,
              trightcurlyNode12
        );
        nodeList.Add(pifstateNode1);
        return nodeList;
    }
    ArrayList New10()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TWhile twhileNode2 = (TWhile)nodeArrayList1[0];
        PExpressLogic pexpresslogicNode3 = (PExpressLogic)nodeArrayList2[0];
        TLeftCurly tleftcurlyNode4 = (TLeftCurly)nodeArrayList3[0];
        PStatements pstatementsNode5 = (PStatements)nodeArrayList4[0];
        TRightCurly trightcurlyNode6 = (TRightCurly)nodeArrayList5[0];
        AWhileState pwhilestateNode1 = new AWhileState (
              twhileNode2,
              pexpresslogicNode3,
              tleftcurlyNode4,
              pstatementsNode5,
              trightcurlyNode6
        );
        nodeList.Add(pwhilestateNode1);
        return nodeList;
    }
    ArrayList New11()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVarNames tvarnamesNode2 = (TVarNames)nodeArrayList1[0];
        TLeftParent tleftparentNode3 = (TLeftParent)nodeArrayList2[0];
        PActualParams pactualparamsNode4 = (PActualParams)nodeArrayList3[0];
        TRightParent trightparentNode5 = (TRightParent)nodeArrayList4[0];
        TLineEnder tlineenderNode6 = (TLineEnder)nodeArrayList5[0];
        AParamsMethodsCall pmethodscallNode1 = new AParamsMethodsCall (
              tvarnamesNode2,
              tleftparentNode3,
              pactualparamsNode4,
              trightparentNode5,
              tlineenderNode6
        );
        nodeList.Add(pmethodscallNode1);
        return nodeList;
    }
    ArrayList New12()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVarNames tvarnamesNode2 = (TVarNames)nodeArrayList1[0];
        TLeftParent tleftparentNode3 = (TLeftParent)nodeArrayList2[0];
        TRightParent trightparentNode4 = (TRightParent)nodeArrayList3[0];
        TLineEnder tlineenderNode5 = (TLineEnder)nodeArrayList4[0];
        ANoparamsMethodsCall pmethodscallNode1 = new ANoparamsMethodsCall (
              tvarnamesNode2,
              tleftparentNode3,
              trightparentNode4,
              tlineenderNode5
        );
        nodeList.Add(pmethodscallNode1);
        return nodeList;
    }
    ArrayList New13()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PActualParams pactualparamsNode2 = (PActualParams)nodeArrayList1[0];
        TComma tcommaNode3 = (TComma)nodeArrayList2[0];
        PActualConsts pactualconstsNode4 = (PActualConsts)nodeArrayList3[0];
        ARecurActualParams pactualparamsNode1 = new ARecurActualParams (
              pactualparamsNode2,
              tcommaNode3,
              pactualconstsNode4
        );
        nodeList.Add(pactualparamsNode1);
        return nodeList;
    }
    ArrayList New14()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PActualConsts pactualconstsNode2 = (PActualConsts)nodeArrayList1[0];
        AOneActualParams pactualparamsNode1 = new AOneActualParams (
              pactualconstsNode2
        );
        nodeList.Add(pactualparamsNode1);
        return nodeList;
    }
    ArrayList New15()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressLogic pexpresslogicNode2 = (PExpressLogic)nodeArrayList1[0];
        AExpressionsActualConsts pactualconstsNode1 = new AExpressionsActualConsts (
              pexpresslogicNode2
        );
        nodeList.Add(pactualconstsNode1);
        return nodeList;
    }
    ArrayList New16()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TSillystrings tsillystringsNode2 = (TSillystrings)nodeArrayList1[0];
        AStringsActualConsts pactualconstsNode1 = new AStringsActualConsts (
              tsillystringsNode2
        );
        nodeList.Add(pactualconstsNode1);
        return nodeList;
    }
    ArrayList New17()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PMethDecs pmethdecsNode2 = (PMethDecs)nodeArrayList1[0];
        PMethodsDecl pmethodsdeclNode3 = (PMethodsDecl)nodeArrayList2[0];
        ARecurseMethDecs pmethdecsNode1 = new ARecurseMethDecs (
              pmethdecsNode2,
              pmethodsdeclNode3
        );
        nodeList.Add(pmethdecsNode1);
        return nodeList;
    }
    ArrayList New18()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PMethodsDecl pmethodsdeclNode2 = (PMethodsDecl)nodeArrayList1[0];
        AOneMethDecs pmethdecsNode1 = new AOneMethDecs (
              pmethodsdeclNode2
        );
        nodeList.Add(pmethdecsNode1);
        return nodeList;
    }
    ArrayList New19()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVoidMethods tvoidmethodsNode2 = (TVoidMethods)nodeArrayList1[0];
        TVarNames tvarnamesNode3 = (TVarNames)nodeArrayList2[0];
        TLeftParent tleftparentNode4 = (TLeftParent)nodeArrayList3[0];
        PFormalParams pformalparamsNode5 = (PFormalParams)nodeArrayList4[0];
        TRightParent trightparentNode6 = (TRightParent)nodeArrayList5[0];
        TLeftCurly tleftcurlyNode7 = (TLeftCurly)nodeArrayList6[0];
        PStatements pstatementsNode8 = (PStatements)nodeArrayList7[0];
        TRightCurly trightcurlyNode9 = (TRightCurly)nodeArrayList8[0];
        AParamsMethodsDecl pmethodsdeclNode1 = new AParamsMethodsDecl (
              tvoidmethodsNode2,
              tvarnamesNode3,
              tleftparentNode4,
              pformalparamsNode5,
              trightparentNode6,
              tleftcurlyNode7,
              pstatementsNode8,
              trightcurlyNode9
        );
        nodeList.Add(pmethodsdeclNode1);
        return nodeList;
    }
    ArrayList New20()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVoidMethods tvoidmethodsNode2 = (TVoidMethods)nodeArrayList1[0];
        TVarNames tvarnamesNode3 = (TVarNames)nodeArrayList2[0];
        TLeftParent tleftparentNode4 = (TLeftParent)nodeArrayList3[0];
        TRightParent trightparentNode5 = (TRightParent)nodeArrayList4[0];
        TLeftCurly tleftcurlyNode6 = (TLeftCurly)nodeArrayList5[0];
        PStatements pstatementsNode7 = (PStatements)nodeArrayList6[0];
        TRightCurly trightcurlyNode8 = (TRightCurly)nodeArrayList7[0];
        ANoparamsMethodsDecl pmethodsdeclNode1 = new ANoparamsMethodsDecl (
              tvoidmethodsNode2,
              tvarnamesNode3,
              tleftparentNode4,
              trightparentNode5,
              tleftcurlyNode6,
              pstatementsNode7,
              trightcurlyNode8
        );
        nodeList.Add(pmethodsdeclNode1);
        return nodeList;
    }
    ArrayList New21()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVoidMethods tvoidmethodsNode2 = (TVoidMethods)nodeArrayList1[0];
        TMainmeth tmainmethNode3 = (TMainmeth)nodeArrayList2[0];
        TLeftParent tleftparentNode4 = (TLeftParent)nodeArrayList3[0];
        TRightParent trightparentNode5 = (TRightParent)nodeArrayList4[0];
        TLeftCurly tleftcurlyNode6 = (TLeftCurly)nodeArrayList5[0];
        PStatements pstatementsNode7 = (PStatements)nodeArrayList6[0];
        TRightCurly trightcurlyNode8 = (TRightCurly)nodeArrayList7[0];
        AMainMethodsDecl pmethodsdeclNode1 = new AMainMethodsDecl (
              tvoidmethodsNode2,
              tmainmethNode3,
              tleftparentNode4,
              trightparentNode5,
              tleftcurlyNode6,
              pstatementsNode7,
              trightcurlyNode8
        );
        nodeList.Add(pmethodsdeclNode1);
        return nodeList;
    }
    ArrayList New22()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVoidMethods tvoidmethodsNode2 = (TVoidMethods)nodeArrayList1[0];
        TVarNames tvarnamesNode3 = (TVarNames)nodeArrayList2[0];
        TLeftParent tleftparentNode4 = (TLeftParent)nodeArrayList3[0];
        PFormalParams pformalparamsNode5 = (PFormalParams)nodeArrayList4[0];
        TRightParent trightparentNode6 = (TRightParent)nodeArrayList5[0];
        TLeftCurly tleftcurlyNode7 = (TLeftCurly)nodeArrayList6[0];
        TRightCurly trightcurlyNode8 = (TRightCurly)nodeArrayList7[0];
        AEmptyparaMethodsDecl pmethodsdeclNode1 = new AEmptyparaMethodsDecl (
              tvoidmethodsNode2,
              tvarnamesNode3,
              tleftparentNode4,
              pformalparamsNode5,
              trightparentNode6,
              tleftcurlyNode7,
              trightcurlyNode8
        );
        nodeList.Add(pmethodsdeclNode1);
        return nodeList;
    }
    ArrayList New23()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVoidMethods tvoidmethodsNode2 = (TVoidMethods)nodeArrayList1[0];
        TVarNames tvarnamesNode3 = (TVarNames)nodeArrayList2[0];
        TLeftParent tleftparentNode4 = (TLeftParent)nodeArrayList3[0];
        TRightParent trightparentNode5 = (TRightParent)nodeArrayList4[0];
        TLeftCurly tleftcurlyNode6 = (TLeftCurly)nodeArrayList5[0];
        TRightCurly trightcurlyNode7 = (TRightCurly)nodeArrayList6[0];
        AEmptynoparaMethodsDecl pmethodsdeclNode1 = new AEmptynoparaMethodsDecl (
              tvoidmethodsNode2,
              tvarnamesNode3,
              tleftparentNode4,
              trightparentNode5,
              tleftcurlyNode6,
              trightcurlyNode7
        );
        nodeList.Add(pmethodsdeclNode1);
        return nodeList;
    }
    ArrayList New24()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVoidMethods tvoidmethodsNode2 = (TVoidMethods)nodeArrayList1[0];
        TMainmeth tmainmethNode3 = (TMainmeth)nodeArrayList2[0];
        TLeftParent tleftparentNode4 = (TLeftParent)nodeArrayList3[0];
        TRightParent trightparentNode5 = (TRightParent)nodeArrayList4[0];
        TLeftCurly tleftcurlyNode6 = (TLeftCurly)nodeArrayList5[0];
        TRightCurly trightcurlyNode7 = (TRightCurly)nodeArrayList6[0];
        AEmptymainMethodsDecl pmethodsdeclNode1 = new AEmptymainMethodsDecl (
              tvoidmethodsNode2,
              tmainmethNode3,
              tleftparentNode4,
              trightparentNode5,
              tleftcurlyNode6,
              trightcurlyNode7
        );
        nodeList.Add(pmethodsdeclNode1);
        return nodeList;
    }
    ArrayList New25()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFormalParams pformalparamsNode2 = (PFormalParams)nodeArrayList1[0];
        TComma tcommaNode3 = (TComma)nodeArrayList2[0];
        PFormalConsts pformalconstsNode4 = (PFormalConsts)nodeArrayList3[0];
        ARecurFormalParams pformalparamsNode1 = new ARecurFormalParams (
              pformalparamsNode2,
              tcommaNode3,
              pformalconstsNode4
        );
        nodeList.Add(pformalparamsNode1);
        return nodeList;
    }
    ArrayList New26()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFormalConsts pformalconstsNode2 = (PFormalConsts)nodeArrayList1[0];
        AOneFormalParams pformalparamsNode1 = new AOneFormalParams (
              pformalconstsNode2
        );
        nodeList.Add(pformalparamsNode1);
        return nodeList;
    }
    ArrayList New27()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVarNames tvarnamesNode2 = (TVarNames)nodeArrayList1[0];
        TVarNames tvarnamesNode3 = (TVarNames)nodeArrayList2[0];
        AVarsFormalConsts pformalconstsNode1 = new AVarsFormalConsts (
              tvarnamesNode2,
              tvarnamesNode3
        );
        nodeList.Add(pformalconstsNode1);
        return nodeList;
    }
    ArrayList New28()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVarNames tvarnamesNode2 = (TVarNames)nodeArrayList1[0];
        TVarNames tvarnamesNode3 = (TVarNames)nodeArrayList2[0];
        TLeftBracket tleftbracketNode4 = (TLeftBracket)nodeArrayList3[0];
        TRightBracket trightbracketNode5 = (TRightBracket)nodeArrayList4[0];
        AArrFormalConsts pformalconstsNode1 = new AArrFormalConsts (
              tvarnamesNode2,
              tvarnamesNode3,
              tleftbracketNode4,
              trightbracketNode5
        );
        nodeList.Add(pformalconstsNode1);
        return nodeList;
    }
    ArrayList New29()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressComp pexpresscompNode2 = (PExpressComp)nodeArrayList1[0];
        TOrNah tornahNode3 = (TOrNah)nodeArrayList2[0];
        PExpressComp pexpresscompNode4 = (PExpressComp)nodeArrayList3[0];
        AOrExpressLogic pexpresslogicNode1 = new AOrExpressLogic (
              pexpresscompNode2,
              tornahNode3,
              pexpresscompNode4
        );
        nodeList.Add(pexpresslogicNode1);
        return nodeList;
    }
    ArrayList New30()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressComp pexpresscompNode2 = (PExpressComp)nodeArrayList1[0];
        TAndy tandyNode3 = (TAndy)nodeArrayList2[0];
        PExpressComp pexpresscompNode4 = (PExpressComp)nodeArrayList3[0];
        AAndExpressLogic pexpresslogicNode1 = new AAndExpressLogic (
              pexpresscompNode2,
              tandyNode3,
              pexpresscompNode4
        );
        nodeList.Add(pexpresslogicNode1);
        return nodeList;
    }
    ArrayList New31()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TNah tnahNode2 = (TNah)nodeArrayList1[0];
        PExpressComp pexpresscompNode3 = (PExpressComp)nodeArrayList2[0];
        ANotExpressLogic pexpresslogicNode1 = new ANotExpressLogic (
              tnahNode2,
              pexpresscompNode3
        );
        nodeList.Add(pexpresslogicNode1);
        return nodeList;
    }
    ArrayList New32()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressComp pexpresscompNode2 = (PExpressComp)nodeArrayList1[0];
        ACompExpressLogic pexpresslogicNode1 = new ACompExpressLogic (
              pexpresscompNode2
        );
        nodeList.Add(pexpresslogicNode1);
        return nodeList;
    }
    ArrayList New33()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressAs pexpressasNode2 = (PExpressAs)nodeArrayList1[0];
        TGreatThanEq tgreatthaneqNode3 = (TGreatThanEq)nodeArrayList2[0];
        PExpressAs pexpressasNode4 = (PExpressAs)nodeArrayList3[0];
        AGteExpressComp pexpresscompNode1 = new AGteExpressComp (
              pexpressasNode2,
              tgreatthaneqNode3,
              pexpressasNode4
        );
        nodeList.Add(pexpresscompNode1);
        return nodeList;
    }
    ArrayList New34()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressAs pexpressasNode2 = (PExpressAs)nodeArrayList1[0];
        TLessThanEq tlessthaneqNode3 = (TLessThanEq)nodeArrayList2[0];
        PExpressAs pexpressasNode4 = (PExpressAs)nodeArrayList3[0];
        ALteExpressComp pexpresscompNode1 = new ALteExpressComp (
              pexpressasNode2,
              tlessthaneqNode3,
              pexpressasNode4
        );
        nodeList.Add(pexpresscompNode1);
        return nodeList;
    }
    ArrayList New35()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressAs pexpressasNode2 = (PExpressAs)nodeArrayList1[0];
        TLesser tlesserNode3 = (TLesser)nodeArrayList2[0];
        PExpressAs pexpressasNode4 = (PExpressAs)nodeArrayList3[0];
        ALtExpressComp pexpresscompNode1 = new ALtExpressComp (
              pexpressasNode2,
              tlesserNode3,
              pexpressasNode4
        );
        nodeList.Add(pexpresscompNode1);
        return nodeList;
    }
    ArrayList New36()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressAs pexpressasNode2 = (PExpressAs)nodeArrayList1[0];
        TGreater tgreaterNode3 = (TGreater)nodeArrayList2[0];
        PExpressAs pexpressasNode4 = (PExpressAs)nodeArrayList3[0];
        AGtExpressComp pexpresscompNode1 = new AGtExpressComp (
              pexpressasNode2,
              tgreaterNode3,
              pexpressasNode4
        );
        nodeList.Add(pexpresscompNode1);
        return nodeList;
    }
    ArrayList New37()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressAs pexpressasNode2 = (PExpressAs)nodeArrayList1[0];
        TEquators tequatorsNode3 = (TEquators)nodeArrayList2[0];
        PExpressAs pexpressasNode4 = (PExpressAs)nodeArrayList3[0];
        AEqsExpressComp pexpresscompNode1 = new AEqsExpressComp (
              pexpressasNode2,
              tequatorsNode3,
              pexpressasNode4
        );
        nodeList.Add(pexpresscompNode1);
        return nodeList;
    }
    ArrayList New38()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressAs pexpressasNode2 = (PExpressAs)nodeArrayList1[0];
        TNoteqs tnoteqsNode3 = (TNoteqs)nodeArrayList2[0];
        PExpressAs pexpressasNode4 = (PExpressAs)nodeArrayList3[0];
        ANoteqsExpressComp pexpresscompNode1 = new ANoteqsExpressComp (
              pexpressasNode2,
              tnoteqsNode3,
              pexpressasNode4
        );
        nodeList.Add(pexpresscompNode1);
        return nodeList;
    }
    ArrayList New39()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressAs pexpressasNode2 = (PExpressAs)nodeArrayList1[0];
        AMathExpressComp pexpresscompNode1 = new AMathExpressComp (
              pexpressasNode2
        );
        nodeList.Add(pexpresscompNode1);
        return nodeList;
    }
    ArrayList New40()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressAs pexpressasNode2 = (PExpressAs)nodeArrayList1[0];
        TPlus tplusNode3 = (TPlus)nodeArrayList2[0];
        PExpressMd pexpressmdNode4 = (PExpressMd)nodeArrayList3[0];
        AAddExpressAs pexpressasNode1 = new AAddExpressAs (
              pexpressasNode2,
              tplusNode3,
              pexpressmdNode4
        );
        nodeList.Add(pexpressasNode1);
        return nodeList;
    }
    ArrayList New41()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressAs pexpressasNode2 = (PExpressAs)nodeArrayList1[0];
        TMinus tminusNode3 = (TMinus)nodeArrayList2[0];
        PExpressMd pexpressmdNode4 = (PExpressMd)nodeArrayList3[0];
        ASubExpressAs pexpressasNode1 = new ASubExpressAs (
              pexpressasNode2,
              tminusNode3,
              pexpressmdNode4
        );
        nodeList.Add(pexpressasNode1);
        return nodeList;
    }
    ArrayList New42()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressMd pexpressmdNode2 = (PExpressMd)nodeArrayList1[0];
        AMdExpressAs pexpressasNode1 = new AMdExpressAs (
              pexpressmdNode2
        );
        nodeList.Add(pexpressasNode1);
        return nodeList;
    }
    ArrayList New43()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressMd pexpressmdNode2 = (PExpressMd)nodeArrayList1[0];
        TTimes ttimesNode3 = (TTimes)nodeArrayList2[0];
        PExpressParent pexpressparentNode4 = (PExpressParent)nodeArrayList3[0];
        AMultExpressMd pexpressmdNode1 = new AMultExpressMd (
              pexpressmdNode2,
              ttimesNode3,
              pexpressparentNode4
        );
        nodeList.Add(pexpressmdNode1);
        return nodeList;
    }
    ArrayList New44()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressMd pexpressmdNode2 = (PExpressMd)nodeArrayList1[0];
        TDivide tdivideNode3 = (TDivide)nodeArrayList2[0];
        PExpressParent pexpressparentNode4 = (PExpressParent)nodeArrayList3[0];
        ADivExpressMd pexpressmdNode1 = new ADivExpressMd (
              pexpressmdNode2,
              tdivideNode3,
              pexpressparentNode4
        );
        nodeList.Add(pexpressmdNode1);
        return nodeList;
    }
    ArrayList New45()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressParent pexpressparentNode2 = (PExpressParent)nodeArrayList1[0];
        AParentExpressMd pexpressmdNode1 = new AParentExpressMd (
              pexpressparentNode2
        );
        nodeList.Add(pexpressmdNode1);
        return nodeList;
    }
    ArrayList New46()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLeftParent tleftparentNode2 = (TLeftParent)nodeArrayList1[0];
        PExpressLogic pexpresslogicNode3 = (PExpressLogic)nodeArrayList2[0];
        TRightParent trightparentNode4 = (TRightParent)nodeArrayList3[0];
        AParentExpressParent pexpressparentNode1 = new AParentExpressParent (
              tleftparentNode2,
              pexpresslogicNode3,
              trightparentNode4
        );
        nodeList.Add(pexpressparentNode1);
        return nodeList;
    }
    ArrayList New47()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpressConsts pexpressconstsNode2 = (PExpressConsts)nodeArrayList1[0];
        AConstsExpressParent pexpressparentNode1 = new AConstsExpressParent (
              pexpressconstsNode2
        );
        nodeList.Add(pexpressparentNode1);
        return nodeList;
    }
    ArrayList New48()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMinus tminusNode2 = (TMinus)nodeArrayList1[0];
        TVarNames tvarnamesNode3 = (TVarNames)nodeArrayList2[0];
        ANegvarExpressConsts pexpressconstsNode1 = new ANegvarExpressConsts (
              tminusNode2,
              tvarnamesNode3
        );
        nodeList.Add(pexpressconstsNode1);
        return nodeList;
    }
    ArrayList New49()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMinus tminusNode2 = (TMinus)nodeArrayList1[0];
        TInts tintsNode3 = (TInts)nodeArrayList2[0];
        ANegintExpressConsts pexpressconstsNode1 = new ANegintExpressConsts (
              tminusNode2,
              tintsNode3
        );
        nodeList.Add(pexpressconstsNode1);
        return nodeList;
    }
    ArrayList New50()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMinus tminusNode2 = (TMinus)nodeArrayList1[0];
        TRootbeerfloats trootbeerfloatsNode3 = (TRootbeerfloats)nodeArrayList2[0];
        ANegfloExpressConsts pexpressconstsNode1 = new ANegfloExpressConsts (
              tminusNode2,
              trootbeerfloatsNode3
        );
        nodeList.Add(pexpressconstsNode1);
        return nodeList;
    }
    ArrayList New51()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVarNames tvarnamesNode2 = (TVarNames)nodeArrayList1[0];
        AVarExpressConsts pexpressconstsNode1 = new AVarExpressConsts (
              tvarnamesNode2
        );
        nodeList.Add(pexpressconstsNode1);
        return nodeList;
    }
    ArrayList New52()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TInts tintsNode2 = (TInts)nodeArrayList1[0];
        AIntsExpressConsts pexpressconstsNode1 = new AIntsExpressConsts (
              tintsNode2
        );
        nodeList.Add(pexpressconstsNode1);
        return nodeList;
    }
    ArrayList New53()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TRootbeerfloats trootbeerfloatsNode2 = (TRootbeerfloats)nodeArrayList1[0];
        AFloExpressConsts pexpressconstsNode1 = new AFloExpressConsts (
              trootbeerfloatsNode2
        );
        nodeList.Add(pexpressconstsNode1);
        return nodeList;
    }
    ArrayList New54()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVarNames tvarnamesNode2 = (TVarNames)nodeArrayList1[0];
        TLeftBracket tleftbracketNode3 = (TLeftBracket)nodeArrayList2[0];
        PExpressLogic pexpresslogicNode4 = (PExpressLogic)nodeArrayList3[0];
        TRightBracket trightbracketNode5 = (TRightBracket)nodeArrayList4[0];
        AArrayExpressConsts pexpressconstsNode1 = new AArrayExpressConsts (
              tvarnamesNode2,
              tleftbracketNode3,
              pexpresslogicNode4,
              trightbracketNode5
        );
        nodeList.Add(pexpressconstsNode1);
        return nodeList;
    }
    ArrayList New55()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDeclarations pdeclarationsNode2 = (PDeclarations)nodeArrayList1[0];
        PDeclaration pdeclarationNode3 = (PDeclaration)nodeArrayList2[0];
        ADeclarationsDeclarations pdeclarationsNode1 = new ADeclarationsDeclarations (
              pdeclarationsNode2,
              pdeclarationNode3
        );
        nodeList.Add(pdeclarationsNode1);
        return nodeList;
    }
    ArrayList New56()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDeclaration pdeclarationNode2 = (PDeclaration)nodeArrayList1[0];
        ADeclarationDeclarations pdeclarationsNode1 = new ADeclarationDeclarations (
              pdeclarationNode2
        );
        nodeList.Add(pdeclarationsNode1);
        return nodeList;
    }
    ArrayList New57()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PConstantine pconstantineNode2 = (PConstantine)nodeArrayList1[0];
        AConstantsDeclaration pdeclarationNode1 = new AConstantsDeclaration (
              pconstantineNode2
        );
        nodeList.Add(pdeclarationNode1);
        return nodeList;
    }
    ArrayList New58()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDeclOptions pdecloptionsNode2 = (PDeclOptions)nodeArrayList1[0];
        TLineEnder tlineenderNode3 = (TLineEnder)nodeArrayList2[0];
        AVarsDeclaration pdeclarationNode1 = new AVarsDeclaration (
              pdecloptionsNode2,
              tlineenderNode3
        );
        nodeList.Add(pdeclarationNode1);
        return nodeList;
    }
    ArrayList New59()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVarNames tvarnamesNode2 = (TVarNames)nodeArrayList1[0];
        TVarNames tvarnamesNode3 = (TVarNames)nodeArrayList2[0];
        AVarDeclOptions pdecloptionsNode1 = new AVarDeclOptions (
              tvarnamesNode2,
              tvarnamesNode3
        );
        nodeList.Add(pdecloptionsNode1);
        return nodeList;
    }
    ArrayList New60()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVarNames tvarnamesNode2 = (TVarNames)nodeArrayList1[0];
        TVarNames tvarnamesNode3 = (TVarNames)nodeArrayList2[0];
        TLeftBracket tleftbracketNode4 = (TLeftBracket)nodeArrayList3[0];
        TInts tintsNode5 = (TInts)nodeArrayList4[0];
        TRightBracket trightbracketNode6 = (TRightBracket)nodeArrayList5[0];
        AArrDeclOptions pdecloptionsNode1 = new AArrDeclOptions (
              tvarnamesNode2,
              tvarnamesNode3,
              tleftbracketNode4,
              tintsNode5,
              trightbracketNode6
        );
        nodeList.Add(pdecloptionsNode1);
        return nodeList;
    }
    ArrayList New61()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TConstantinople tconstantinopleNode2 = (TConstantinople)nodeArrayList1[0];
        TVarNames tvarnamesNode3 = (TVarNames)nodeArrayList2[0];
        TVarNames tvarnamesNode4 = (TVarNames)nodeArrayList3[0];
        TAssignments tassignmentsNode5 = (TAssignments)nodeArrayList4[0];
        PNumConsts pnumconstsNode6 = (PNumConsts)nodeArrayList5[0];
        TLineEnder tlineenderNode7 = (TLineEnder)nodeArrayList6[0];
        AConstantine pconstantineNode1 = new AConstantine (
              tconstantinopleNode2,
              tvarnamesNode3,
              tvarnamesNode4,
              tassignmentsNode5,
              pnumconstsNode6,
              tlineenderNode7
        );
        nodeList.Add(pconstantineNode1);
        return nodeList;
    }
    ArrayList New62()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TInts tintsNode2 = (TInts)nodeArrayList1[0];
        APosintNumConsts pnumconstsNode1 = new APosintNumConsts (
              tintsNode2
        );
        nodeList.Add(pnumconstsNode1);
        return nodeList;
    }
    ArrayList New63()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMinus tminusNode2 = (TMinus)nodeArrayList1[0];
        TInts tintsNode3 = (TInts)nodeArrayList2[0];
        ANegintNumConsts pnumconstsNode1 = new ANegintNumConsts (
              tminusNode2,
              tintsNode3
        );
        nodeList.Add(pnumconstsNode1);
        return nodeList;
    }
    ArrayList New64()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TRootbeerfloats trootbeerfloatsNode2 = (TRootbeerfloats)nodeArrayList1[0];
        APosfloNumConsts pnumconstsNode1 = new APosfloNumConsts (
              trootbeerfloatsNode2
        );
        nodeList.Add(pnumconstsNode1);
        return nodeList;
    }
    ArrayList New65()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMinus tminusNode2 = (TMinus)nodeArrayList1[0];
        TRootbeerfloats trootbeerfloatsNode3 = (TRootbeerfloats)nodeArrayList2[0];
        ANegfloNumConsts pnumconstsNode1 = new ANegfloNumConsts (
              tminusNode2,
              trootbeerfloatsNode3
        );
        nodeList.Add(pnumconstsNode1);
        return nodeList;
    }
    ArrayList New66()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVarNames tvarnamesNode2 = (TVarNames)nodeArrayList1[0];
        TAssignments tassignmentsNode3 = (TAssignments)nodeArrayList2[0];
        PExpressLogic pexpresslogicNode4 = (PExpressLogic)nodeArrayList3[0];
        TLineEnder tlineenderNode5 = (TLineEnder)nodeArrayList4[0];
        AVarAssign passignNode1 = new AVarAssign (
              tvarnamesNode2,
              tassignmentsNode3,
              pexpresslogicNode4,
              tlineenderNode5
        );
        nodeList.Add(passignNode1);
        return nodeList;
    }
    ArrayList New67()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVarNames tvarnamesNode2 = (TVarNames)nodeArrayList1[0];
        TLeftBracket tleftbracketNode3 = (TLeftBracket)nodeArrayList2[0];
        PExpressLogic pexpresslogicNode4 = (PExpressLogic)nodeArrayList3[0];
        TRightBracket trightbracketNode5 = (TRightBracket)nodeArrayList4[0];
        TAssignments tassignmentsNode6 = (TAssignments)nodeArrayList5[0];
        PExpressLogic pexpresslogicNode7 = (PExpressLogic)nodeArrayList6[0];
        TLineEnder tlineenderNode8 = (TLineEnder)nodeArrayList7[0];
        AArrAssign passignNode1 = new AArrAssign (
              tvarnamesNode2,
              tleftbracketNode3,
              pexpresslogicNode4,
              trightbracketNode5,
              tassignmentsNode6,
              pexpresslogicNode7,
              tlineenderNode8
        );
        nodeList.Add(passignNode1);
        return nodeList;
    }

    private static int[][][] actionTable = {
      new int[][] {
        new int[] {-1, 3, 0},
        new int[] {3, 0, 1},
        new int[] {35, 0, 2},
      },
      new int[][] {
        new int[] {-1, 3, 1},
        new int[] {35, 0, 8},
      },
      new int[][] {
        new int[] {-1, 3, 2},
        new int[] {35, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 3},
        new int[] {36, 2, -1},
      },
      new int[][] {
        new int[] {-1, 3, 4},
        new int[] {3, 0, 1},
        new int[] {9, 0, 10},
        new int[] {35, 0, 2},
      },
      new int[][] {
        new int[] {-1, 1, 56},
      },
      new int[][] {
        new int[] {-1, 3, 6},
        new int[] {26, 0, 14},
      },
      new int[][] {
        new int[] {-1, 1, 57},
      },
      new int[][] {
        new int[] {-1, 3, 8},
        new int[] {35, 0, 15},
      },
      new int[][] {
        new int[] {-1, 1, 59},
        new int[] {27, 0, 16},
      },
      new int[][] {
        new int[] {-1, 3, 10},
        new int[] {8, 0, 17},
        new int[] {35, 0, 18},
      },
      new int[][] {
        new int[] {-1, 1, 0},
        new int[] {9, 0, 10},
      },
      new int[][] {
        new int[] {-1, 1, 18},
      },
      new int[][] {
        new int[] {-1, 1, 55},
      },
      new int[][] {
        new int[] {-1, 1, 58},
      },
      new int[][] {
        new int[] {-1, 3, 15},
        new int[] {25, 0, 20},
      },
      new int[][] {
        new int[] {-1, 3, 16},
        new int[] {34, 0, 21},
      },
      new int[][] {
        new int[] {-1, 3, 17},
        new int[] {10, 0, 22},
      },
      new int[][] {
        new int[] {-1, 3, 18},
        new int[] {10, 0, 23},
      },
      new int[][] {
        new int[] {-1, 1, 17},
      },
      new int[][] {
        new int[] {-1, 3, 20},
        new int[] {15, 0, 24},
        new int[] {33, 0, 25},
        new int[] {34, 0, 26},
      },
      new int[][] {
        new int[] {-1, 3, 21},
        new int[] {28, 0, 28},
      },
      new int[][] {
        new int[] {-1, 3, 22},
        new int[] {11, 0, 29},
      },
      new int[][] {
        new int[] {-1, 3, 23},
        new int[] {11, 0, 30},
        new int[] {35, 0, 31},
      },
      new int[][] {
        new int[] {-1, 3, 24},
        new int[] {33, 0, 34},
        new int[] {34, 0, 35},
      },
      new int[][] {
        new int[] {-1, 1, 64},
      },
      new int[][] {
        new int[] {-1, 1, 62},
      },
      new int[][] {
        new int[] {-1, 3, 27},
        new int[] {26, 0, 36},
      },
      new int[][] {
        new int[] {-1, 1, 60},
      },
      new int[][] {
        new int[] {-1, 3, 29},
        new int[] {29, 0, 37},
      },
      new int[][] {
        new int[] {-1, 3, 30},
        new int[] {29, 0, 38},
      },
      new int[][] {
        new int[] {-1, 3, 31},
        new int[] {35, 0, 39},
      },
      new int[][] {
        new int[] {-1, 3, 32},
        new int[] {11, 0, 40},
        new int[] {31, 0, 41},
      },
      new int[][] {
        new int[] {-1, 1, 26},
      },
      new int[][] {
        new int[] {-1, 1, 65},
      },
      new int[][] {
        new int[] {-1, 1, 63},
      },
      new int[][] {
        new int[] {-1, 1, 61},
      },
      new int[][] {
        new int[] {-1, 3, 37},
        new int[] {0, 0, 42},
        new int[] {3, 0, 1},
        new int[] {7, 0, 43},
        new int[] {30, 0, 44},
        new int[] {35, 0, 45},
      },
      new int[][] {
        new int[] {-1, 3, 38},
        new int[] {0, 0, 42},
        new int[] {3, 0, 1},
        new int[] {7, 0, 43},
        new int[] {30, 0, 53},
        new int[] {35, 0, 45},
      },
      new int[][] {
        new int[] {-1, 1, 27},
        new int[] {27, 0, 55},
      },
      new int[][] {
        new int[] {-1, 3, 40},
        new int[] {29, 0, 56},
      },
      new int[][] {
        new int[] {-1, 3, 41},
        new int[] {35, 0, 31},
      },
      new int[][] {
        new int[] {-1, 3, 42},
        new int[] {10, 0, 58},
      },
      new int[][] {
        new int[] {-1, 3, 43},
        new int[] {10, 0, 59},
        new int[] {15, 0, 60},
        new int[] {18, 0, 61},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 1, 24},
      },
      new int[][] {
        new int[] {-1, 3, 45},
        new int[] {10, 0, 71},
        new int[] {25, 0, 72},
        new int[] {27, 0, 73},
        new int[] {35, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 46},
        new int[] {0, 0, 42},
        new int[] {3, 0, 1},
        new int[] {7, 0, 43},
        new int[] {30, 0, 74},
        new int[] {35, 0, 45},
      },
      new int[][] {
        new int[] {-1, 1, 2},
      },
      new int[][] {
        new int[] {-1, 1, 3},
      },
      new int[][] {
        new int[] {-1, 1, 5},
      },
      new int[][] {
        new int[] {-1, 1, 4},
      },
      new int[][] {
        new int[] {-1, 1, 6},
      },
      new int[][] {
        new int[] {-1, 1, 7},
      },
      new int[][] {
        new int[] {-1, 1, 23},
      },
      new int[][] {
        new int[] {-1, 3, 54},
        new int[] {0, 0, 42},
        new int[] {3, 0, 1},
        new int[] {7, 0, 43},
        new int[] {30, 0, 76},
        new int[] {35, 0, 45},
      },
      new int[][] {
        new int[] {-1, 3, 55},
        new int[] {28, 0, 77},
      },
      new int[][] {
        new int[] {-1, 3, 56},
        new int[] {0, 0, 42},
        new int[] {3, 0, 1},
        new int[] {7, 0, 43},
        new int[] {30, 0, 78},
        new int[] {35, 0, 45},
      },
      new int[][] {
        new int[] {-1, 1, 25},
      },
      new int[][] {
        new int[] {-1, 3, 58},
        new int[] {10, 0, 59},
        new int[] {15, 0, 60},
        new int[] {18, 0, 61},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 3, 59},
        new int[] {10, 0, 59},
        new int[] {15, 0, 60},
        new int[] {18, 0, 61},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 3, 60},
        new int[] {33, 0, 82},
        new int[] {34, 0, 83},
        new int[] {35, 0, 84},
      },
      new int[][] {
        new int[] {-1, 3, 61},
        new int[] {10, 0, 59},
        new int[] {15, 0, 60},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 1, 53},
      },
      new int[][] {
        new int[] {-1, 1, 52},
      },
      new int[][] {
        new int[] {-1, 1, 51},
        new int[] {27, 0, 86},
      },
      new int[][] {
        new int[] {-1, 3, 65},
        new int[] {29, 0, 87},
      },
      new int[][] {
        new int[] {-1, 1, 32},
        new int[] {16, 0, 88},
        new int[] {17, 0, 89},
      },
      new int[][] {
        new int[] {-1, 1, 39},
        new int[] {14, 0, 90},
        new int[] {15, 0, 91},
        new int[] {19, 0, 92},
        new int[] {20, 0, 93},
        new int[] {21, 0, 94},
        new int[] {22, 0, 95},
        new int[] {23, 0, 96},
        new int[] {24, 0, 97},
      },
      new int[][] {
        new int[] {-1, 1, 42},
        new int[] {12, 0, 98},
        new int[] {13, 0, 99},
      },
      new int[][] {
        new int[] {-1, 1, 45},
      },
      new int[][] {
        new int[] {-1, 1, 47},
      },
      new int[][] {
        new int[] {-1, 3, 71},
        new int[] {10, 0, 59},
        new int[] {11, 0, 100},
        new int[] {15, 0, 60},
        new int[] {18, 0, 61},
        new int[] {32, 0, 101},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 3, 72},
        new int[] {10, 0, 59},
        new int[] {15, 0, 60},
        new int[] {18, 0, 61},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 3, 73},
        new int[] {10, 0, 59},
        new int[] {15, 0, 60},
        new int[] {18, 0, 61},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 1, 21},
      },
      new int[][] {
        new int[] {-1, 1, 1},
      },
      new int[][] {
        new int[] {-1, 1, 20},
      },
      new int[][] {
        new int[] {-1, 1, 28},
      },
      new int[][] {
        new int[] {-1, 1, 22},
      },
      new int[][] {
        new int[] {-1, 3, 79},
        new int[] {0, 0, 42},
        new int[] {3, 0, 1},
        new int[] {7, 0, 43},
        new int[] {30, 0, 107},
        new int[] {35, 0, 45},
      },
      new int[][] {
        new int[] {-1, 3, 80},
        new int[] {11, 0, 108},
      },
      new int[][] {
        new int[] {-1, 3, 81},
        new int[] {11, 0, 109},
      },
      new int[][] {
        new int[] {-1, 1, 50},
      },
      new int[][] {
        new int[] {-1, 1, 49},
      },
      new int[][] {
        new int[] {-1, 1, 48},
      },
      new int[][] {
        new int[] {-1, 1, 31},
      },
      new int[][] {
        new int[] {-1, 3, 86},
        new int[] {10, 0, 59},
        new int[] {15, 0, 60},
        new int[] {18, 0, 61},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 3, 87},
        new int[] {0, 0, 42},
        new int[] {3, 0, 1},
        new int[] {7, 0, 43},
        new int[] {35, 0, 45},
      },
      new int[][] {
        new int[] {-1, 3, 88},
        new int[] {10, 0, 59},
        new int[] {15, 0, 60},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 3, 89},
        new int[] {10, 0, 59},
        new int[] {15, 0, 60},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 3, 90},
        new int[] {10, 0, 59},
        new int[] {15, 0, 60},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 3, 91},
        new int[] {10, 0, 59},
        new int[] {15, 0, 60},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 3, 92},
        new int[] {10, 0, 59},
        new int[] {15, 0, 60},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 3, 93},
        new int[] {10, 0, 59},
        new int[] {15, 0, 60},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 3, 94},
        new int[] {10, 0, 59},
        new int[] {15, 0, 60},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 3, 95},
        new int[] {10, 0, 59},
        new int[] {15, 0, 60},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 3, 96},
        new int[] {10, 0, 59},
        new int[] {15, 0, 60},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 3, 97},
        new int[] {10, 0, 59},
        new int[] {15, 0, 60},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 3, 98},
        new int[] {10, 0, 59},
        new int[] {15, 0, 60},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 3, 99},
        new int[] {10, 0, 59},
        new int[] {15, 0, 60},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 3, 100},
        new int[] {26, 0, 124},
      },
      new int[][] {
        new int[] {-1, 1, 16},
      },
      new int[][] {
        new int[] {-1, 3, 102},
        new int[] {11, 0, 125},
        new int[] {31, 0, 126},
      },
      new int[][] {
        new int[] {-1, 1, 14},
      },
      new int[][] {
        new int[] {-1, 1, 15},
      },
      new int[][] {
        new int[] {-1, 3, 105},
        new int[] {26, 0, 127},
      },
      new int[][] {
        new int[] {-1, 3, 106},
        new int[] {28, 0, 128},
      },
      new int[][] {
        new int[] {-1, 1, 19},
      },
      new int[][] {
        new int[] {-1, 3, 108},
        new int[] {29, 0, 129},
      },
      new int[][] {
        new int[] {-1, 1, 46},
      },
      new int[][] {
        new int[] {-1, 3, 110},
        new int[] {28, 0, 130},
      },
      new int[][] {
        new int[] {-1, 3, 111},
        new int[] {0, 0, 42},
        new int[] {3, 0, 1},
        new int[] {7, 0, 43},
        new int[] {30, 0, 131},
        new int[] {35, 0, 45},
      },
      new int[][] {
        new int[] {-1, 1, 30},
      },
      new int[][] {
        new int[] {-1, 1, 29},
      },
      new int[][] {
        new int[] {-1, 1, 40},
        new int[] {12, 0, 98},
        new int[] {13, 0, 99},
      },
      new int[][] {
        new int[] {-1, 1, 41},
        new int[] {12, 0, 98},
        new int[] {13, 0, 99},
      },
      new int[][] {
        new int[] {-1, 1, 37},
        new int[] {14, 0, 90},
        new int[] {15, 0, 91},
      },
      new int[][] {
        new int[] {-1, 1, 38},
        new int[] {14, 0, 90},
        new int[] {15, 0, 91},
      },
      new int[][] {
        new int[] {-1, 1, 33},
        new int[] {14, 0, 90},
        new int[] {15, 0, 91},
      },
      new int[][] {
        new int[] {-1, 1, 34},
        new int[] {14, 0, 90},
        new int[] {15, 0, 91},
      },
      new int[][] {
        new int[] {-1, 1, 36},
        new int[] {14, 0, 90},
        new int[] {15, 0, 91},
      },
      new int[][] {
        new int[] {-1, 1, 35},
        new int[] {14, 0, 90},
        new int[] {15, 0, 91},
      },
      new int[][] {
        new int[] {-1, 1, 43},
      },
      new int[][] {
        new int[] {-1, 1, 44},
      },
      new int[][] {
        new int[] {-1, 1, 12},
      },
      new int[][] {
        new int[] {-1, 3, 125},
        new int[] {26, 0, 132},
      },
      new int[][] {
        new int[] {-1, 3, 126},
        new int[] {10, 0, 59},
        new int[] {15, 0, 60},
        new int[] {18, 0, 61},
        new int[] {32, 0, 101},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 1, 66},
      },
      new int[][] {
        new int[] {-1, 3, 128},
        new int[] {25, 0, 134},
      },
      new int[][] {
        new int[] {-1, 3, 129},
        new int[] {0, 0, 42},
        new int[] {3, 0, 1},
        new int[] {7, 0, 43},
        new int[] {35, 0, 45},
      },
      new int[][] {
        new int[] {-1, 1, 54},
      },
      new int[][] {
        new int[] {-1, 1, 10},
      },
      new int[][] {
        new int[] {-1, 1, 11},
      },
      new int[][] {
        new int[] {-1, 1, 13},
      },
      new int[][] {
        new int[] {-1, 3, 134},
        new int[] {10, 0, 59},
        new int[] {15, 0, 60},
        new int[] {18, 0, 61},
        new int[] {33, 0, 62},
        new int[] {34, 0, 63},
        new int[] {35, 0, 64},
      },
      new int[][] {
        new int[] {-1, 3, 135},
        new int[] {0, 0, 42},
        new int[] {3, 0, 1},
        new int[] {7, 0, 43},
        new int[] {30, 0, 137},
        new int[] {35, 0, 45},
      },
      new int[][] {
        new int[] {-1, 3, 136},
        new int[] {26, 0, 138},
      },
      new int[][] {
        new int[] {-1, 1, 8},
        new int[] {1, 0, 139},
      },
      new int[][] {
        new int[] {-1, 1, 67},
      },
      new int[][] {
        new int[] {-1, 3, 139},
        new int[] {29, 0, 140},
      },
      new int[][] {
        new int[] {-1, 3, 140},
        new int[] {0, 0, 42},
        new int[] {3, 0, 1},
        new int[] {7, 0, 43},
        new int[] {35, 0, 45},
      },
      new int[][] {
        new int[] {-1, 3, 141},
        new int[] {0, 0, 42},
        new int[] {3, 0, 1},
        new int[] {7, 0, 43},
        new int[] {30, 0, 142},
        new int[] {35, 0, 45},
      },
      new int[][] {
        new int[] {-1, 1, 9},
      },
    };

    private static int[][][] gotoTable  = {
      new int[][] {
        new int[] {-1, 3},
      },
      new int[][] {
        new int[] {-1, 46},
        new int[] {38, 54},
        new int[] {56, 79},
        new int[] {87, 111},
        new int[] {129, 135},
        new int[] {140, 141},
      },
      new int[][] {
        new int[] {-1, 47},
        new int[] {46, 75},
        new int[] {54, 75},
        new int[] {79, 75},
        new int[] {111, 75},
        new int[] {135, 75},
        new int[] {141, 75},
      },
      new int[][] {
        new int[] {-1, 48},
      },
      new int[][] {
        new int[] {-1, 49},
      },
      new int[][] {
        new int[] {-1, 50},
      },
      new int[][] {
        new int[] {-1, 102},
      },
      new int[][] {
        new int[] {-1, 103},
        new int[] {126, 133},
      },
      new int[][] {
        new int[] {-1, 11},
      },
      new int[][] {
        new int[] {-1, 12},
        new int[] {11, 19},
      },
      new int[][] {
        new int[] {-1, 32},
      },
      new int[][] {
        new int[] {-1, 33},
        new int[] {41, 57},
      },
      new int[][] {
        new int[] {-1, 104},
        new int[] {43, 65},
        new int[] {58, 80},
        new int[] {59, 81},
        new int[] {72, 105},
        new int[] {73, 106},
        new int[] {86, 110},
        new int[] {134, 136},
      },
      new int[][] {
        new int[] {-1, 66},
        new int[] {61, 85},
        new int[] {88, 112},
        new int[] {89, 113},
      },
      new int[][] {
        new int[] {-1, 67},
        new int[] {92, 116},
        new int[] {93, 117},
        new int[] {94, 118},
        new int[] {95, 119},
        new int[] {96, 120},
        new int[] {97, 121},
      },
      new int[][] {
        new int[] {-1, 68},
        new int[] {90, 114},
        new int[] {91, 115},
      },
      new int[][] {
        new int[] {-1, 69},
        new int[] {98, 122},
        new int[] {99, 123},
      },
      new int[][] {
        new int[] {-1, 70},
      },
      new int[][] {
        new int[] {-1, 4},
      },
      new int[][] {
        new int[] {-1, 51},
        new int[] {0, 5},
        new int[] {4, 13},
      },
      new int[][] {
        new int[] {-1, 6},
      },
      new int[][] {
        new int[] {-1, 7},
      },
      new int[][] {
        new int[] {-1, 27},
      },
      new int[][] {
        new int[] {-1, 52},
      },
    };

    private static String[] errorMessages = {
      "expecting: 'const', var names",
      "expecting: var names",
      "expecting: EOF",
      "expecting: 'const', 'void', var names",
      "expecting: ';'",
      "expecting: 'if', 'const', 'while', 'void', '}', var names",
      "expecting: ';', '['",
      "expecting: 'main', var names",
      "expecting: 'void', EOF",
      "expecting: '='",
      "expecting: ints",
      "expecting: '('",
      "expecting: '-', rootbeerfloats, ints",
      "expecting: ']'",
      "expecting: ')'",
      "expecting: ')', var names",
      "expecting: rootbeerfloats, ints",
      "expecting: '{'",
      "expecting: ')', ','",
      "expecting: 'if', 'const', 'while', '}', var names",
      "expecting: ')', '[', ','",
      "expecting: '(', '-', nah, rootbeerfloats, ints, var names",
      "expecting: '(', '=', '[', var names",
      "expecting: rootbeerfloats, ints, var names",
      "expecting: '(', '-', rootbeerfloats, ints, var names",
      "expecting: ')', '*', '/', '+', '-', andy, or nah, '==', '!=', '>=', '<=', '>', '<', ';', ']', '{', ','",
      "expecting: ')', '*', '/', '+', '-', andy, or nah, '==', '!=', '>=', '<=', '>', '<', ';', '[', ']', '{', ','",
      "expecting: ')', andy, or nah, ';', ']', '{', ','",
      "expecting: ')', '+', '-', andy, or nah, '==', '!=', '>=', '<=', '>', '<', ';', ']', '{', ','",
      "expecting: '(', ')', '-', nah, sillystrings, rootbeerfloats, ints, var names",
      "expecting: ')', ';', ']', '{', ','",
      "expecting: 'if', 'const', 'while', var names",
      "expecting: ')', '+', '-', andy, or nah, ';', ']', '{', ','",
      "expecting: '(', '-', nah, sillystrings, rootbeerfloats, ints, var names",
      "expecting: 'if', 'else', 'const', 'while', '}', var names",
    };

    private static int[] errors = {
      0, 1, 1, 2, 3, 3, 4, 5, 1, 6, 7, 8, 8, 3, 5, 9, 
      10, 11, 11, 8, 12, 13, 14, 15, 16, 4, 4, 4, 4, 17, 17, 1, 
      18, 18, 4, 4, 5, 19, 19, 20, 17, 1, 11, 21, 8, 22, 19, 19, 
      19, 19, 19, 19, 19, 8, 19, 13, 19, 18, 21, 21, 23, 24, 25, 25, 
      26, 17, 27, 28, 25, 25, 25, 29, 21, 21, 8, 19, 8, 18, 8, 19, 
      14, 14, 25, 25, 25, 30, 21, 31, 24, 24, 24, 24, 24, 24, 24, 24, 
      24, 24, 24, 24, 4, 18, 18, 18, 18, 4, 13, 8, 17, 25, 13, 19, 
      30, 30, 25, 25, 32, 32, 32, 32, 32, 32, 25, 25, 19, 4, 33, 19, 
      9, 31, 25, 19, 19, 18, 21, 19, 4, 34, 19, 17, 31, 19, 19, 
    };
}
}
