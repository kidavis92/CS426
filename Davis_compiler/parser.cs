/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using comp5210.node;
using comp5210.lexer;
using comp5210.analysis;

namespace comp5210.parser {

public class ParserException : ApplicationException
{
    Token token;

    public ParserException(Token token, String  message) : base(message)
    {
        this.token = token;
    }

    public Token Token
    {
      get { return token; }
    }
}

internal class State
{
    internal int state;
    internal ArrayList nodes;

    internal State(int state, ArrayList nodes)
    {
        this.state = state;
        this.nodes = nodes;
    }
}

internal class TokenIndex : AnalysisAdapter
{
    internal int index;

    public override void CaseTBang(TBang node)
    {
        index = 0;
    }

    public override void CaseTOp(TOp node)
    {
        index = 1;
    }

    public override void CaseTClass(TClass node)
    {
        index = 2;
    }

    public override void CaseTPublic(TPublic node)
    {
        index = 3;
    }

    public override void CaseTPrivate(TPrivate node)
    {
        index = 4;
    }

    public override void CaseTStatic(TStatic node)
    {
        index = 5;
    }

    public override void CaseTMain(TMain node)
    {
        index = 6;
    }

    public override void CaseTReturn(TReturn node)
    {
        index = 7;
    }

    public override void CaseTAssignment(TAssignment node)
    {
        index = 8;
    }

    public override void CaseTString(TString node)
    {
        index = 9;
    }

    public override void CaseTVar(TVar node)
    {
        index = 10;
    }

    public override void CaseTIf(TIf node)
    {
        index = 11;
    }

    public override void CaseTElse(TElse node)
    {
        index = 12;
    }

    public override void CaseTWhile(TWhile node)
    {
        index = 13;
    }

    public override void CaseTOpenParenthesis(TOpenParenthesis node)
    {
        index = 14;
    }

    public override void CaseTCloseParenthesis(TCloseParenthesis node)
    {
        index = 15;
    }

    public override void CaseTOpenBracket(TOpenBracket node)
    {
        index = 16;
    }

    public override void CaseTCloseBracket(TCloseBracket node)
    {
        index = 17;
    }

    public override void CaseTOpenBrace(TOpenBrace node)
    {
        index = 18;
    }

    public override void CaseTCloseBrace(TCloseBrace node)
    {
        index = 19;
    }

    public override void CaseTMultiply(TMultiply node)
    {
        index = 20;
    }

    public override void CaseTDivide(TDivide node)
    {
        index = 21;
    }

    public override void CaseTAdd(TAdd node)
    {
        index = 22;
    }

    public override void CaseTSubtract(TSubtract node)
    {
        index = 23;
    }

    public override void CaseTAnd(TAnd node)
    {
        index = 24;
    }

    public override void CaseTOr(TOr node)
    {
        index = 25;
    }

    public override void CaseTEquals(TEquals node)
    {
        index = 26;
    }

    public override void CaseTGreater(TGreater node)
    {
        index = 27;
    }

    public override void CaseTLess(TLess node)
    {
        index = 28;
    }

    public override void CaseTGreaterEqual(TGreaterEqual node)
    {
        index = 29;
    }

    public override void CaseTLessEqual(TLessEqual node)
    {
        index = 30;
    }

    public override void CaseTNotEqual(TNotEqual node)
    {
        index = 31;
    }

    public override void CaseTNot(TNot node)
    {
        index = 32;
    }

    public override void CaseTFloat(TFloat node)
    {
        index = 33;
    }

    public override void CaseTInt(TInt node)
    {
        index = 34;
    }

    public override void CaseTSemicolon(TSemicolon node)
    {
        index = 35;
    }

    public override void CaseEOF(EOF node)
    {
        index = 36;
    }
}

public class Parser
{
    private Analysis ignoredTokens = new AnalysisAdapter();
    public Analysis IgnoredTokens
    {
      get { return ignoredTokens; }
    }

    protected ArrayList nodeList;

    private Lexer lexer;
    private Stack stack = new Stack();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private TokenIndex converter = new TokenIndex();
    private int[] action = new int[2];

    private const int SHIFT = 0;
    private const int REDUCE = 1;
    private const int ACCEPT = 2;
    private const int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private int GoTo(int index)
    {
        int state = State();
        int low = 1;
        int high = gotoTable[index].Length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void Push(int numstate, ArrayList listNode)
    {
        this.nodeList = listNode;

        stack.Push(new State(numstate, this.nodeList));
    }

    private int State()
    {
        State s = (State) stack.Peek();
        return s.state;
    }

    private ArrayList Pop()
    {
        return (ArrayList) ((State) stack.Pop()).nodes;
    }

    private int Index(Switchable token)
    {
        converter.index = -1;
        token.Apply(converter);
        return converter.index;
    }

    public Start Parse()
    {
        Push(0, null);

        IList ign = null;
        while(true)
        {
            while(Index(lexer.Peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedList(NodeCast.Instance);
                }

                ign.Add(lexer.Next());
            }

            if(ign != null)
            {
                ignoredTokens.SetIn(lexer.Peek(), ign);
                ign = null;
            }

            last_pos = lexer.Peek().Pos;
            last_line = lexer.Peek().Line;
            last_token = lexer.Peek();

            int index = Index(lexer.Peek());
            action[0] = actionTable[State()][0][1];
            action[1] = actionTable[State()][0][2];

            int low = 1;
            int high = actionTable[State()].Length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[State()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[State()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[State()][middle][1];
                    action[1] = actionTable[State()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
        {
            ArrayList list = new ArrayList();
            list.Add(lexer.Next());
                        Push(action[1], list);
                        last_shift = action[1];
                    }
        break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0:
        {
      ArrayList list = New0();
      Push(GoTo(0), list);
        }
        break;
                    case 1:
        {
      ArrayList list = New1();
      Push(GoTo(1), list);
        }
        break;
                    case 2:
        {
      ArrayList list = New2();
      Push(GoTo(1), list);
        }
        break;
                    case 3:
        {
      ArrayList list = New3();
      Push(GoTo(1), list);
        }
        break;
                    case 4:
        {
      ArrayList list = New4();
      Push(GoTo(1), list);
        }
        break;
                    case 5:
        {
      ArrayList list = New5();
      Push(GoTo(2), list);
        }
        break;
                    case 6:
        {
      ArrayList list = New6();
      Push(GoTo(3), list);
        }
        break;
                    case 7:
        {
      ArrayList list = New7();
      Push(GoTo(3), list);
        }
        break;
                    case 8:
        {
      ArrayList list = New8();
      Push(GoTo(4), list);
        }
        break;
                    case 9:
        {
      ArrayList list = New9();
      Push(GoTo(4), list);
        }
        break;
                    case 10:
        {
      ArrayList list = New10();
      Push(GoTo(4), list);
        }
        break;
                    case 11:
        {
      ArrayList list = New11();
      Push(GoTo(4), list);
        }
        break;
                    case 12:
        {
      ArrayList list = New12();
      Push(GoTo(4), list);
        }
        break;
                    case 13:
        {
      ArrayList list = New13();
      Push(GoTo(4), list);
        }
        break;
                    case 14:
        {
      ArrayList list = New14();
      Push(GoTo(5), list);
        }
        break;
                    case 15:
        {
      ArrayList list = New15();
      Push(GoTo(5), list);
        }
        break;
                    case 16:
        {
      ArrayList list = New16();
      Push(GoTo(6), list);
        }
        break;
                    case 17:
        {
      ArrayList list = New17();
      Push(GoTo(6), list);
        }
        break;
                    case 18:
        {
      ArrayList list = New18();
      Push(GoTo(7), list);
        }
        break;
                    case 19:
        {
      ArrayList list = New19();
      Push(GoTo(7), list);
        }
        break;
                    case 20:
        {
      ArrayList list = New20();
      Push(GoTo(8), list);
        }
        break;
                    case 21:
        {
      ArrayList list = New21();
      Push(GoTo(8), list);
        }
        break;
                    case 22:
        {
      ArrayList list = New22();
      Push(GoTo(8), list);
        }
        break;
                    case 23:
        {
      ArrayList list = New23();
      Push(GoTo(9), list);
        }
        break;
                    case 24:
        {
      ArrayList list = New24();
      Push(GoTo(10), list);
        }
        break;
                    case 25:
        {
      ArrayList list = New25();
      Push(GoTo(11), list);
        }
        break;
                    case 26:
        {
      ArrayList list = New26();
      Push(GoTo(12), list);
        }
        break;
                    case 27:
        {
      ArrayList list = New27();
      Push(GoTo(12), list);
        }
        break;
                    case 28:
        {
      ArrayList list = New28();
      Push(GoTo(12), list);
        }
        break;
                    case 29:
        {
      ArrayList list = New29();
      Push(GoTo(12), list);
        }
        break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.Next();
                        PProgram node1 = (PProgram) ((ArrayList)Pop())[0];
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList New0()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PStuff pstuffNode2 = (PStuff)nodeArrayList1[0];
        AProgram pprogramNode1 = new AProgram (
              pstuffNode2
        );
        nodeList.Add(pprogramNode1);
        return nodeList;
    }
    ArrayList New1()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVar tvarNode2 = (TVar)nodeArrayList1[0];
        TAssignment tassignmentNode3 = (TAssignment)nodeArrayList2[0];
        TInt tintNode4 = (TInt)nodeArrayList3[0];
        TSemicolon tsemicolonNode5 = (TSemicolon)nodeArrayList4[0];
        PConstants pconstantsNode6 = (PConstants)nodeArrayList5[0];
        AIntegerConstants pconstantsNode1 = new AIntegerConstants (
              tvarNode2,
              tassignmentNode3,
              tintNode4,
              tsemicolonNode5,
              pconstantsNode6
        );
        nodeList.Add(pconstantsNode1);
        return nodeList;
    }
    ArrayList New2()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVar tvarNode2 = (TVar)nodeArrayList1[0];
        TAssignment tassignmentNode3 = (TAssignment)nodeArrayList2[0];
        TFloat tfloatNode4 = (TFloat)nodeArrayList3[0];
        TSemicolon tsemicolonNode5 = (TSemicolon)nodeArrayList4[0];
        PConstants pconstantsNode6 = (PConstants)nodeArrayList5[0];
        AFloatConstants pconstantsNode1 = new AFloatConstants (
              tvarNode2,
              tassignmentNode3,
              tfloatNode4,
              tsemicolonNode5,
              pconstantsNode6
        );
        nodeList.Add(pconstantsNode1);
        return nodeList;
    }
    ArrayList New3()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVar tvarNode2 = (TVar)nodeArrayList1[0];
        TAssignment tassignmentNode3 = (TAssignment)nodeArrayList2[0];
        TString tstringNode4 = (TString)nodeArrayList3[0];
        TSemicolon tsemicolonNode5 = (TSemicolon)nodeArrayList4[0];
        PConstants pconstantsNode6 = (PConstants)nodeArrayList5[0];
        AStringConstants pconstantsNode1 = new AStringConstants (
              tvarNode2,
              tassignmentNode3,
              tstringNode4,
              tsemicolonNode5,
              pconstantsNode6
        );
        nodeList.Add(pconstantsNode1);
        return nodeList;
    }
    ArrayList New4()
    {
        ArrayList nodeList = new ArrayList();
        ANoneConstants pconstantsNode1 = new ANoneConstants (
        );
        nodeList.Add(pconstantsNode1);
        return nodeList;
    }
    ArrayList New5()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMain tmainNode2 = (TMain)nodeArrayList1[0];
        TOpenParenthesis topenparenthesisNode3 = (TOpenParenthesis)nodeArrayList2[0];
        PFormalParam pformalparamNode4 = (PFormalParam)nodeArrayList3[0];
        TCloseParenthesis tcloseparenthesisNode5 = (TCloseParenthesis)nodeArrayList4[0];
        TOpenBrace topenbraceNode6 = (TOpenBrace)nodeArrayList5[0];
        PStuff pstuffNode7 = (PStuff)nodeArrayList6[0];
        TCloseBrace tclosebraceNode8 = (TCloseBrace)nodeArrayList7[0];
        AMainProgram pmainprogramNode1 = new AMainProgram (
              tmainNode2,
              topenparenthesisNode3,
              pformalparamNode4,
              tcloseparenthesisNode5,
              topenbraceNode6,
              pstuffNode7,
              tclosebraceNode8
        );
        nodeList.Add(pmainprogramNode1);
        return nodeList;
    }
    ArrayList New6()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVar tvarNode2 = (TVar)nodeArrayList1[0];
        TVar tvarNode3 = (TVar)nodeArrayList2[0];
        PFormalParam pformalparamNode4 = (PFormalParam)nodeArrayList3[0];
        AFormalParam pformalparamNode1 = new AFormalParam (
              tvarNode2,
              tvarNode3,
              pformalparamNode4
        );
        nodeList.Add(pformalparamNode1);
        return nodeList;
    }
    ArrayList New7()
    {
        ArrayList nodeList = new ArrayList();
        ANoneFormalParam pformalparamNode1 = new ANoneFormalParam (
        );
        nodeList.Add(pformalparamNode1);
        return nodeList;
    }
    ArrayList New8()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PIfState pifstateNode2 = (PIfState)nodeArrayList1[0];
        AIfsStuff pstuffNode1 = new AIfsStuff (
              pifstateNode2
        );
        nodeList.Add(pstuffNode1);
        return nodeList;
    }
    ArrayList New9()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PWhileState pwhilestateNode2 = (PWhileState)nodeArrayList1[0];
        AWhilesStuff pstuffNode1 = new AWhilesStuff (
              pwhilestateNode2
        );
        nodeList.Add(pstuffNode1);
        return nodeList;
    }
    ArrayList New10()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PMethodCall pmethodcallNode2 = (PMethodCall)nodeArrayList1[0];
        AMethodsStuff pstuffNode1 = new AMethodsStuff (
              pmethodcallNode2
        );
        nodeList.Add(pstuffNode1);
        return nodeList;
    }
    ArrayList New11()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDeclarations pdeclarationsNode2 = (PDeclarations)nodeArrayList1[0];
        ADeclsStuff pstuffNode1 = new ADeclsStuff (
              pdeclarationsNode2
        );
        nodeList.Add(pstuffNode1);
        return nodeList;
    }
    ArrayList New12()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAssignments passignmentsNode2 = (PAssignments)nodeArrayList1[0];
        AAssignsStuff pstuffNode1 = new AAssignsStuff (
              passignmentsNode2
        );
        nodeList.Add(pstuffNode1);
        return nodeList;
    }
    ArrayList New13()
    {
        ArrayList nodeList = new ArrayList();
        ANoneStuff pstuffNode1 = new ANoneStuff (
        );
        nodeList.Add(pstuffNode1);
        return nodeList;
    }
    ArrayList New14()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDeclaration pdeclarationNode2 = (PDeclaration)nodeArrayList1[0];
        PDeclarations pdeclarationsNode3 = (PDeclarations)nodeArrayList2[0];
        ARecursiveDeclarations pdeclarationsNode1 = new ARecursiveDeclarations (
              pdeclarationNode2,
              pdeclarationsNode3
        );
        nodeList.Add(pdeclarationsNode1);
        return nodeList;
    }
    ArrayList New15()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDeclaration pdeclarationNode2 = (PDeclaration)nodeArrayList1[0];
        ANotDeclarations pdeclarationsNode1 = new ANotDeclarations (
              pdeclarationNode2
        );
        nodeList.Add(pdeclarationsNode1);
        return nodeList;
    }
    ArrayList New16()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVar tvarNode2 = (TVar)nodeArrayList1[0];
        TVar tvarNode3 = (TVar)nodeArrayList2[0];
        TSemicolon tsemicolonNode4 = (TSemicolon)nodeArrayList3[0];
        ASide1Declaration pdeclarationNode1 = new ASide1Declaration (
              tvarNode2,
              tvarNode3,
              tsemicolonNode4
        );
        nodeList.Add(pdeclarationNode1);
        return nodeList;
    }
    ArrayList New17()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVar tvarNode2 = (TVar)nodeArrayList1[0];
        TVar tvarNode3 = (TVar)nodeArrayList2[0];
        TOpenBracket topenbracketNode4 = (TOpenBracket)nodeArrayList3[0];
        TInt tintNode5 = (TInt)nodeArrayList4[0];
        TCloseBracket tclosebracketNode6 = (TCloseBracket)nodeArrayList5[0];
        TSemicolon tsemicolonNode7 = (TSemicolon)nodeArrayList6[0];
        ASide2Declaration pdeclarationNode1 = new ASide2Declaration (
              tvarNode2,
              tvarNode3,
              topenbracketNode4,
              tintNode5,
              tclosebracketNode6,
              tsemicolonNode7
        );
        nodeList.Add(pdeclarationNode1);
        return nodeList;
    }
    ArrayList New18()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAssign passignNode2 = (PAssign)nodeArrayList1[0];
        PAssignments passignmentsNode3 = (PAssignments)nodeArrayList2[0];
        ARecursiveAssignments passignmentsNode1 = new ARecursiveAssignments (
              passignNode2,
              passignmentsNode3
        );
        nodeList.Add(passignmentsNode1);
        return nodeList;
    }
    ArrayList New19()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAssign passignNode2 = (PAssign)nodeArrayList1[0];
        ANotAssignments passignmentsNode1 = new ANotAssignments (
              passignNode2
        );
        nodeList.Add(passignmentsNode1);
        return nodeList;
    }
    ArrayList New20()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVar tvarNode2 = (TVar)nodeArrayList1[0];
        TAssignment tassignmentNode3 = (TAssignment)nodeArrayList2[0];
        TInt tintNode4 = (TInt)nodeArrayList3[0];
        TSemicolon tsemicolonNode5 = (TSemicolon)nodeArrayList4[0];
        AIntAssign passignNode1 = new AIntAssign (
              tvarNode2,
              tassignmentNode3,
              tintNode4,
              tsemicolonNode5
        );
        nodeList.Add(passignNode1);
        return nodeList;
    }
    ArrayList New21()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVar tvarNode2 = (TVar)nodeArrayList1[0];
        TAssignment tassignmentNode3 = (TAssignment)nodeArrayList2[0];
        TFloat tfloatNode4 = (TFloat)nodeArrayList3[0];
        TSemicolon tsemicolonNode5 = (TSemicolon)nodeArrayList4[0];
        AFloatAssign passignNode1 = new AFloatAssign (
              tvarNode2,
              tassignmentNode3,
              tfloatNode4,
              tsemicolonNode5
        );
        nodeList.Add(passignNode1);
        return nodeList;
    }
    ArrayList New22()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVar tvarNode2 = (TVar)nodeArrayList1[0];
        TAssignment tassignmentNode3 = (TAssignment)nodeArrayList2[0];
        TString tstringNode4 = (TString)nodeArrayList3[0];
        TSemicolon tsemicolonNode5 = (TSemicolon)nodeArrayList4[0];
        AStringAssign passignNode1 = new AStringAssign (
              tvarNode2,
              tassignmentNode3,
              tstringNode4,
              tsemicolonNode5
        );
        nodeList.Add(passignNode1);
        return nodeList;
    }
    ArrayList New23()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIf tifNode2 = (TIf)nodeArrayList1[0];
        TOpenParenthesis topenparenthesisNode3 = (TOpenParenthesis)nodeArrayList2[0];
        TInt tintNode4 = (TInt)nodeArrayList3[0];
        TCloseParenthesis tcloseparenthesisNode5 = (TCloseParenthesis)nodeArrayList4[0];
        TOpenBrace topenbraceNode6 = (TOpenBrace)nodeArrayList5[0];
        PStuff pstuffNode7 = (PStuff)nodeArrayList6[0];
        TCloseBrace tclosebraceNode8 = (TCloseBrace)nodeArrayList7[0];
        AIfState pifstateNode1 = new AIfState (
              tifNode2,
              topenparenthesisNode3,
              tintNode4,
              tcloseparenthesisNode5,
              topenbraceNode6,
              pstuffNode7,
              tclosebraceNode8
        );
        nodeList.Add(pifstateNode1);
        return nodeList;
    }
    ArrayList New24()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TWhile twhileNode2 = (TWhile)nodeArrayList1[0];
        TOpenParenthesis topenparenthesisNode3 = (TOpenParenthesis)nodeArrayList2[0];
        TInt tintNode4 = (TInt)nodeArrayList3[0];
        TCloseParenthesis tcloseparenthesisNode5 = (TCloseParenthesis)nodeArrayList4[0];
        TOpenBrace topenbraceNode6 = (TOpenBrace)nodeArrayList5[0];
        PStuff pstuffNode7 = (PStuff)nodeArrayList6[0];
        TCloseBrace tclosebraceNode8 = (TCloseBrace)nodeArrayList7[0];
        AWhileState pwhilestateNode1 = new AWhileState (
              twhileNode2,
              topenparenthesisNode3,
              tintNode4,
              tcloseparenthesisNode5,
              topenbraceNode6,
              pstuffNode7,
              tclosebraceNode8
        );
        nodeList.Add(pwhilestateNode1);
        return nodeList;
    }
    ArrayList New25()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVar tvarNode2 = (TVar)nodeArrayList1[0];
        TOpenParenthesis topenparenthesisNode3 = (TOpenParenthesis)nodeArrayList2[0];
        PFormalParam pformalparamNode4 = (PFormalParam)nodeArrayList3[0];
        TCloseParenthesis tcloseparenthesisNode5 = (TCloseParenthesis)nodeArrayList4[0];
        TOpenBrace topenbraceNode6 = (TOpenBrace)nodeArrayList5[0];
        PStuff pstuffNode7 = (PStuff)nodeArrayList6[0];
        TCloseBrace tclosebraceNode8 = (TCloseBrace)nodeArrayList7[0];
        AMethodCall pmethodcallNode1 = new AMethodCall (
              tvarNode2,
              topenparenthesisNode3,
              pformalparamNode4,
              tcloseparenthesisNode5,
              topenbraceNode6,
              pstuffNode7,
              tclosebraceNode8
        );
        nodeList.Add(pmethodcallNode1);
        return nodeList;
    }
    ArrayList New26()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TPublic tpublicNode2 = (TPublic)nodeArrayList1[0];
        TVar tvarNode3 = (TVar)nodeArrayList2[0];
        TOpenParenthesis topenparenthesisNode4 = (TOpenParenthesis)nodeArrayList3[0];
        PFormalParam pformalparamNode5 = (PFormalParam)nodeArrayList4[0];
        TCloseParenthesis tcloseparenthesisNode6 = (TCloseParenthesis)nodeArrayList5[0];
        TOpenBracket topenbracketNode7 = (TOpenBracket)nodeArrayList6[0];
        PStuff pstuffNode8 = (PStuff)nodeArrayList7[0];
        TCloseBracket tclosebracketNode9 = (TCloseBracket)nodeArrayList8[0];
        ASide1Methods pmethodsNode1 = new ASide1Methods (
              tpublicNode2,
              tvarNode3,
              topenparenthesisNode4,
              pformalparamNode5,
              tcloseparenthesisNode6,
              topenbracketNode7,
              pstuffNode8,
              tclosebracketNode9
        );
        nodeList.Add(pmethodsNode1);
        return nodeList;
    }
    ArrayList New27()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TPublic tpublicNode2 = (TPublic)nodeArrayList1[0];
        TStatic tstaticNode3 = (TStatic)nodeArrayList2[0];
        TOpenParenthesis topenparenthesisNode4 = (TOpenParenthesis)nodeArrayList3[0];
        PFormalParam pformalparamNode5 = (PFormalParam)nodeArrayList4[0];
        TCloseParenthesis tcloseparenthesisNode6 = (TCloseParenthesis)nodeArrayList5[0];
        TOpenBracket topenbracketNode7 = (TOpenBracket)nodeArrayList6[0];
        PStuff pstuffNode8 = (PStuff)nodeArrayList7[0];
        TCloseBracket tclosebracketNode9 = (TCloseBracket)nodeArrayList8[0];
        ASide2Methods pmethodsNode1 = new ASide2Methods (
              tpublicNode2,
              tstaticNode3,
              topenparenthesisNode4,
              pformalparamNode5,
              tcloseparenthesisNode6,
              topenbracketNode7,
              pstuffNode8,
              tclosebracketNode9
        );
        nodeList.Add(pmethodsNode1);
        return nodeList;
    }
    ArrayList New28()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList9 = (ArrayList) Pop();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TPublic tpublicNode2 = (TPublic)nodeArrayList1[0];
        TStatic tstaticNode3 = (TStatic)nodeArrayList2[0];
        TVar tvarNode4 = (TVar)nodeArrayList3[0];
        TOpenParenthesis topenparenthesisNode5 = (TOpenParenthesis)nodeArrayList4[0];
        TCloseParenthesis tcloseparenthesisNode6 = (TCloseParenthesis)nodeArrayList5[0];
        TOpenBracket topenbracketNode7 = (TOpenBracket)nodeArrayList6[0];
        PStuff pstuffNode8 = (PStuff)nodeArrayList7[0];
        TReturn treturnNode9 = (TReturn)nodeArrayList8[0];
        TCloseBracket tclosebracketNode10 = (TCloseBracket)nodeArrayList9[0];
        ASide3Methods pmethodsNode1 = new ASide3Methods (
              tpublicNode2,
              tstaticNode3,
              tvarNode4,
              topenparenthesisNode5,
              tcloseparenthesisNode6,
              topenbracketNode7,
              pstuffNode8,
              treturnNode9,
              tclosebracketNode10
        );
        nodeList.Add(pmethodsNode1);
        return nodeList;
    }
    ArrayList New29()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TPublic tpublicNode2 = (TPublic)nodeArrayList1[0];
        TVar tvarNode3 = (TVar)nodeArrayList2[0];
        TOpenParenthesis topenparenthesisNode4 = (TOpenParenthesis)nodeArrayList3[0];
        TCloseParenthesis tcloseparenthesisNode5 = (TCloseParenthesis)nodeArrayList4[0];
        TOpenBracket topenbracketNode6 = (TOpenBracket)nodeArrayList5[0];
        PStuff pstuffNode7 = (PStuff)nodeArrayList6[0];
        TReturn treturnNode8 = (TReturn)nodeArrayList7[0];
        TCloseBracket tclosebracketNode9 = (TCloseBracket)nodeArrayList8[0];
        ASide4Methods pmethodsNode1 = new ASide4Methods (
              tpublicNode2,
              tvarNode3,
              topenparenthesisNode4,
              tcloseparenthesisNode5,
              topenbracketNode6,
              pstuffNode7,
              treturnNode8,
              tclosebracketNode9
        );
        nodeList.Add(pmethodsNode1);
        return nodeList;
    }

    private static int[][][] actionTable = {
      new int[][] {
        new int[] {-1, 1, 13},
        new int[] {10, 0, 1},
        new int[] {11, 0, 2},
        new int[] {13, 0, 3},
      },
      new int[][] {
        new int[] {-1, 3, 1},
        new int[] {8, 0, 13},
        new int[] {10, 0, 14},
        new int[] {14, 0, 15},
      },
      new int[][] {
        new int[] {-1, 3, 2},
        new int[] {14, 0, 16},
      },
      new int[][] {
        new int[] {-1, 3, 3},
        new int[] {14, 0, 17},
      },
      new int[][] {
        new int[] {-1, 3, 4},
        new int[] {36, 2, -1},
      },
      new int[][] {
        new int[] {-1, 1, 0},
      },
      new int[][] {
        new int[] {-1, 1, 11},
      },
      new int[][] {
        new int[] {-1, 1, 15},
        new int[] {10, 0, 18},
      },
      new int[][] {
        new int[] {-1, 1, 12},
      },
      new int[][] {
        new int[] {-1, 1, 19},
        new int[] {10, 0, 20},
      },
      new int[][] {
        new int[] {-1, 1, 8},
      },
      new int[][] {
        new int[] {-1, 1, 9},
      },
      new int[][] {
        new int[] {-1, 1, 10},
      },
      new int[][] {
        new int[] {-1, 3, 13},
        new int[] {9, 0, 22},
        new int[] {33, 0, 23},
        new int[] {34, 0, 24},
      },
      new int[][] {
        new int[] {-1, 3, 14},
        new int[] {16, 0, 25},
        new int[] {35, 0, 26},
      },
      new int[][] {
        new int[] {-1, 1, 7},
        new int[] {10, 0, 27},
      },
      new int[][] {
        new int[] {-1, 3, 16},
        new int[] {34, 0, 29},
      },
      new int[][] {
        new int[] {-1, 3, 17},
        new int[] {34, 0, 30},
      },
      new int[][] {
        new int[] {-1, 3, 18},
        new int[] {10, 0, 14},
      },
      new int[][] {
        new int[] {-1, 1, 14},
      },
      new int[][] {
        new int[] {-1, 3, 20},
        new int[] {8, 0, 13},
      },
      new int[][] {
        new int[] {-1, 1, 18},
      },
      new int[][] {
        new int[] {-1, 3, 22},
        new int[] {35, 0, 31},
      },
      new int[][] {
        new int[] {-1, 3, 23},
        new int[] {35, 0, 32},
      },
      new int[][] {
        new int[] {-1, 3, 24},
        new int[] {35, 0, 33},
      },
      new int[][] {
        new int[] {-1, 3, 25},
        new int[] {34, 0, 34},
      },
      new int[][] {
        new int[] {-1, 1, 16},
      },
      new int[][] {
        new int[] {-1, 3, 27},
        new int[] {10, 0, 35},
      },
      new int[][] {
        new int[] {-1, 3, 28},
        new int[] {15, 0, 36},
      },
      new int[][] {
        new int[] {-1, 3, 29},
        new int[] {15, 0, 37},
      },
      new int[][] {
        new int[] {-1, 3, 30},
        new int[] {15, 0, 38},
      },
      new int[][] {
        new int[] {-1, 1, 22},
      },
      new int[][] {
        new int[] {-1, 1, 21},
      },
      new int[][] {
        new int[] {-1, 1, 20},
      },
      new int[][] {
        new int[] {-1, 3, 34},
        new int[] {17, 0, 39},
      },
      new int[][] {
        new int[] {-1, 1, 7},
        new int[] {10, 0, 27},
      },
      new int[][] {
        new int[] {-1, 3, 36},
        new int[] {18, 0, 41},
      },
      new int[][] {
        new int[] {-1, 3, 37},
        new int[] {18, 0, 42},
      },
      new int[][] {
        new int[] {-1, 3, 38},
        new int[] {18, 0, 43},
      },
      new int[][] {
        new int[] {-1, 3, 39},
        new int[] {35, 0, 44},
      },
      new int[][] {
        new int[] {-1, 1, 6},
      },
      new int[][] {
        new int[] {-1, 1, 13},
        new int[] {10, 0, 1},
        new int[] {11, 0, 2},
        new int[] {13, 0, 3},
      },
      new int[][] {
        new int[] {-1, 1, 13},
        new int[] {10, 0, 1},
        new int[] {11, 0, 2},
        new int[] {13, 0, 3},
      },
      new int[][] {
        new int[] {-1, 1, 13},
        new int[] {10, 0, 1},
        new int[] {11, 0, 2},
        new int[] {13, 0, 3},
      },
      new int[][] {
        new int[] {-1, 1, 17},
      },
      new int[][] {
        new int[] {-1, 3, 45},
        new int[] {19, 0, 48},
      },
      new int[][] {
        new int[] {-1, 3, 46},
        new int[] {19, 0, 49},
      },
      new int[][] {
        new int[] {-1, 3, 47},
        new int[] {19, 0, 50},
      },
      new int[][] {
        new int[] {-1, 1, 25},
      },
      new int[][] {
        new int[] {-1, 1, 23},
      },
      new int[][] {
        new int[] {-1, 1, 24},
      },
    };

    private static int[][][] gotoTable  = {
      new int[][] {
        new int[] {-1, 4},
      },
      new int[][] {
        new int[] {-1, -1},
      },
      new int[][] {
        new int[] {-1, -1},
      },
      new int[][] {
        new int[] {-1, 28},
        new int[] {35, 40},
      },
      new int[][] {
        new int[] {-1, 5},
        new int[] {41, 45},
        new int[] {42, 46},
        new int[] {43, 47},
      },
      new int[][] {
        new int[] {-1, 6},
        new int[] {7, 19},
      },
      new int[][] {
        new int[] {-1, 7},
      },
      new int[][] {
        new int[] {-1, 8},
        new int[] {9, 21},
      },
      new int[][] {
        new int[] {-1, 9},
      },
      new int[][] {
        new int[] {-1, 10},
      },
      new int[][] {
        new int[] {-1, 11},
      },
      new int[][] {
        new int[] {-1, 12},
      },
      new int[][] {
        new int[] {-1, -1},
      },
    };

    private static String[] errorMessages = {
      "expecting: var, 'if', 'while', EOF",
      "expecting: '=', var, '('",
      "expecting: '('",
      "expecting: EOF",
      "expecting: '}', EOF",
      "expecting: var, '}', EOF",
      "expecting: string, float, int",
      "expecting: '[', ';'",
      "expecting: var, ')'",
      "expecting: int",
      "expecting: var",
      "expecting: '='",
      "expecting: ';'",
      "expecting: ')'",
      "expecting: ']'",
      "expecting: '{'",
      "expecting: var, 'if', 'while', '}'",
      "expecting: '}'",
    };

    private static int[] errors = {
      0, 1, 2, 2, 3, 3, 4, 5, 4, 5, 4, 4, 4, 6, 7, 8, 
      9, 9, 10, 4, 11, 4, 12, 12, 12, 9, 5, 10, 13, 13, 13, 5, 
      5, 5, 14, 8, 15, 15, 15, 12, 13, 16, 16, 16, 5, 17, 17, 17, 
      4, 4, 4, 
    };
}
}
